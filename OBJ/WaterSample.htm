<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\WaterSample.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\WaterSample.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Aug 05 15:12:08 2019
<BR><P>
<H3>Maximum Stack Usage =      35696 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
image_loader_stb_load &rArr; stb_load_image &rArr; stbi_load_from_memory &rArr; stbi__load_and_postprocess_8bit &rArr; stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[414]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
 <LI><a href="#[9d3]">node_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d3]">node_merge</a><BR>
 <LI><a href="#[549]">ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[549]">ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)</a><BR>
 <LI><a href="#[24c]">widget_invalidate_default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24c]">widget_invalidate_default</a><BR>
 <LI><a href="#[d89]">widget_set_dirty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d89]">widget_set_dirty</a><BR>
 <LI><a href="#[d85]">widget_is_focusable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61c]">widget_get_prop</a><BR>
 <LI><a href="#[d4b]">widget_update_style_recursive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d4b]">widget_update_style_recursive</a><BR>
 <LI><a href="#[ae5]">widget_layout_children_default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[740]">widget_layout</a><BR>
 <LI><a href="#[775]">widget_foreach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[775]">widget_foreach</a><BR>
 <LI><a href="#[68f]">widget_ungrab</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68f]">widget_ungrab</a><BR>
 <LI><a href="#[68c]">widget_grab</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68c]">widget_grab</a><BR>
 <LI><a href="#[792]">widget_set_tr_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61e]">widget_set_prop</a><BR>
 <LI><a href="#[d5f]">widget_set_prop_str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61e]">widget_set_prop</a><BR>
 <LI><a href="#[a66]">widget_set_as_key_target</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a66]">widget_set_as_key_target</a><BR>
 <LI><a href="#[d75]">widget_set_prop_int</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61e]">widget_set_prop</a><BR>
 <LI><a href="#[d6d]">widget_dispatch_blur_event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[817]">widget_set_focused</a><BR>
 <LI><a href="#[d68]">widget_destroy_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d66]">widget_do_destroy</a><BR>
 <LI><a href="#[a6b]">parse_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[830]">parse_expr</a><BR>
 <LI><a href="#[a6e]">parse_term</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[830]">parse_expr</a><BR>
 <LI><a href="#[d92]">widget_lookup_all</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d92]">widget_lookup_all</a><BR>
 <LI><a href="#[248]">widget_on_paint_children_default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a64]">widget_paint</a><BR>
 <LI><a href="#[d94]">widget_lookup_by_type_all</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d94]">widget_lookup_by_type_all</a><BR>
 <LI><a href="#[db9]">widget_re_translate_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[db9]">widget_re_translate_text</a><BR>
 <LI><a href="#[bf4]">stbi__out_gif_code</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bf4]">stbi__out_gif_code</a><BR>
 <LI><a href="#[db2]">widget_on_pointer_up_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[920]">widget_on_pointer_up</a><BR>
 <LI><a href="#[dae]">widget_on_pointer_move_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91f]">widget_on_pointer_move</a><BR>
 <LI><a href="#[daa]">widget_on_pointer_down_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91e]">widget_on_pointer_down</a><BR>
 <LI><a href="#[d9f]">widget_on_keyup_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[925]">widget_on_keyup</a><BR>
 <LI><a href="#[d9a]">widget_on_keydown_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[924]">widget_on_keydown</a><BR>
 <LI><a href="#[926]">widget_dispatch_to_target</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[926]">widget_dispatch_to_target</a><BR>
 <LI><a href="#[c47]">stbtt__sort_edges_quicksort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c47]">stbtt__sort_edges_quicksort</a><BR>
 <LI><a href="#[c12]">stbtt__tesselate_curve</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c12]">stbtt__tesselate_curve</a><BR>
 <LI><a href="#[c13]">stbtt__tesselate_cubic</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c13]">stbtt__tesselate_cubic</a><BR>
 <LI><a href="#[c20]">stbtt__GetGlyphShapeTT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c1c]">stbtt_GetGlyphShape</a><BR>
 <LI><a href="#[a2f]">nvg__tesselateBezier</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2f]">nvg__tesselateBezier</a><BR>
 <LI><a href="#[dbe]">widget_set_visible_recursive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dbe]">widget_set_visible_recursive</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2c]">CAN1_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[29]">CAN1_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[56]">CAN2_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[58]">CAN2_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[55]">CAN2_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7e]">CAN3_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7f]">CAN3_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[80]">CAN3_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7d]">CAN3_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[73]">CEC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[64]">DCMI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7b]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6f]">DMA2D_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream5_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[77]">DSI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[53]">ETH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[54]">ETH_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3e]">EXTI15_10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2d]">EXTI9_5_IRQHandler</a> from bsp_touch_gtxx.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[46]">FMC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[66]">FPU_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[38]">I2C2_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[37]">I2C2_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5f]">I2C3_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5e]">I2C3_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[75]">I2C4_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[74]">I2C4_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[81]">JPEG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[72]">LPTIM1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6e]">LTDC_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6d]">LTDC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[82]">MDIOS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from mpu.o(i.MemManage_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[59]">OTG_FS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[40]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8c]">QSPI_DMAAbortCplt</a> from stm32f7xx_hal_qspi.o(i.QSPI_DMAAbortCplt) referenced from stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler)
 <LI><a href="#[71]">QUADSPI_IRQHandler</a> from stm32f7xx_it.o(i.QUADSPI_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[65]">RNG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3f]">RTC_Alarm_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[19]">RTC_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6c]">SAI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[70]">SAI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[47]">SDMMC1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7c]">SDMMC2_IRQHandler</a> from stm32f7xx_it.o(i.SDMMC2_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[90]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[90]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[8f]">SD_DMAReceiveCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[8e]">SD_DMARxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[91]">SD_DMATransmitCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[8d]">SD_DMATxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[367]">SD_initialize</a> from sd_diskio_dma_rtos.o(i.SD_initialize) referenced from sd_diskio_dma_rtos.o(.constdata)
 <LI><a href="#[36b]">SD_ioctl</a> from sd_diskio_dma_rtos.o(i.SD_ioctl) referenced from sd_diskio_dma_rtos.o(.constdata)
 <LI><a href="#[369]">SD_read</a> from sd_diskio_dma_rtos.o(i.SD_read) referenced from sd_diskio_dma_rtos.o(.constdata)
 <LI><a href="#[368]">SD_status</a> from sd_diskio_dma_rtos.o(i.SD_status) referenced from sd_diskio_dma_rtos.o(.constdata)
 <LI><a href="#[36a]">SD_write</a> from sd_diskio_dma_rtos.o(i.SD_write) referenced from sd_diskio_dma_rtos.o(.constdata)
 <LI><a href="#[76]">SPDIF_RX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3a]">SPI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[69]">SPI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6a]">SPI5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6b]">SPI6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[18]">TAMP_STAMP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[30]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[34]">TIM4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4c]">TIM6_DAC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[41]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[44]">TIM8_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[43]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[42]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[67]">UART7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[68]">UART8_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3d]">USART3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5d]">USART6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[99]">void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[97]">void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[95]">void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[93]">void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[9b]">void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[9d]">void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[98]">void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[96]">void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[94]">void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[92]">void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[9a]">void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[9c]">void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[13d]">aggenvg__renderFlush(void*)</a> from nanovg_agge.o(i._Z20aggenvg__renderFlushPv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[13c]">aggenvg__renderCancel(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderCancelPv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[136]">aggenvg__renderCreate(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderCreatePv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[13e]">aggenvg__renderDelete(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderDeletePv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[13b]">aggenvg__renderViewport(void*, float, float, float)</a> from nanovg_agge.o(i._Z23aggenvg__renderViewportPvfff) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[104]">input_engine_pinyin_input(_input_engine_t*, int)</a> from input_engine_pinyin.o(i._Z25input_engine_pinyin_inputP15_input_engine_ti) referenced from input_engine_pinyin.o(i.input_engine_create)
 <LI><a href="#[137]">aggenvg__renderCreateTexture(void*, int, int, int, int, const unsigned char*)</a> from nanovg_agge.o(i._Z28aggenvg__renderCreateTexturePviiiiPKh) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[138]">aggenvg__renderDeleteTexture(void*, int)</a> from nanovg_agge.o(i._Z28aggenvg__renderDeleteTexturePvi) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[139]">aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)</a> from nanovg_agge.o(i._Z28aggenvg__renderUpdateTexturePviiiiiPKh) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[13a]">aggenvg__renderGetTextureSize(void*, int, int*, int*)</a> from nanovg_agge.o(i._Z29aggenvg__renderGetTextureSizePviPiS0_) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[103]">input_engine_pinyin_reset_input(_input_engine_t*)</a> from input_engine_pinyin.o(i._Z31input_engine_pinyin_reset_inputP15_input_engine_t) referenced from input_engine_pinyin.o(i.input_engine_create)
 <LI><a href="#[a2]">ime_pinyin::compare_spl(const void*, const void*)</a> from spellingtrie.o(i._ZN10ime_pinyin11compare_splEPKvS1_) referenced from spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie9constructEPKcjjfh)
 <LI><a href="#[a3]">ime_pinyin::cmp_hanzis_1(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_1EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a4]">ime_pinyin::cmp_hanzis_2(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_2EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a5]">ime_pinyin::cmp_hanzis_3(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_3EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a6]">ime_pinyin::cmp_hanzis_4(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_4EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a7]">ime_pinyin::cmp_hanzis_5(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_5EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a8]">ime_pinyin::cmp_hanzis_6(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_6EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[a9]">ime_pinyin::cmp_hanzis_7(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_7EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[aa]">ime_pinyin::cmp_hanzis_8(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_8EPKvS1_) referenced from dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
 <LI><a href="#[9e]">ime_pinyin::cmp_lpi_with_psb(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin16cmp_lpi_with_psbEPKvS1_) referenced from matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch10extend_dmiEPNS_11DictExtParaEPNS_13DictMatchInfoE)
 <LI><a href="#[9e]">ime_pinyin::cmp_lpi_with_psb(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin16cmp_lpi_with_psbEPKvS1_) referenced from matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
 <LI><a href="#[a0]">ime_pinyin::cmp_lpsi_with_str(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin17cmp_lpsi_with_strEPKvS1_) referenced from matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
 <LI><a href="#[a1]">ime_pinyin::cmp_lpi_with_hanzi(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin18cmp_lpi_with_hanziEPKvS1_) referenced from matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
 <LI><a href="#[9f]">ime_pinyin::cmp_lpi_with_unified_psb(const void*, const void*)</a> from searchutility.o(i._ZN10ime_pinyin24cmp_lpi_with_unified_psbEPKvS1_) referenced from matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch18prepare_candidatesEv)
 <LI><a href="#[371]">ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrie11extend_dictEtPKNS_11DictExtParaEPNS_10LmaPsbItemEjPj) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[373]">ime_pinyin::DictTrie::get_lemma_str(unsigned, unsigned short*, unsigned short)</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrie13get_lemma_strEjPtt) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[370]">ime_pinyin::DictTrie::reset_milestones(unsigned short, unsigned short)</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrie16reset_milestonesEtt) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[372]">ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrie8get_lpisEPKttPNS_10LmaPsbItemEj) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[36f]">ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrie9load_dictEPKcjj) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[36e]">ime_pinyin::DictTrie::~DictTrie__deallocating()</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrieD0Ev) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[36d]">ime_pinyin::DictTrie::~DictTrie()</a> from dicttrie.o(i._ZN10ime_pinyin8DictTrieD1Ev) referenced from dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[1b4]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[375]">agge::caps::butt::~butt__deallocating()</a> from stroke_features.o(i._ZN4agge4caps4buttD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[374]">agge::caps::butt::~butt()</a> from stroke_features.o(i._ZN4agge4caps4buttD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[378]">agge::joins::bevel::~bevel__deallocating()</a> from stroke_features.o(i._ZN4agge5joins5bevelD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[377]">agge::joins::bevel::~bevel()</a> from stroke_features.o(i._ZN4agge5joins5bevelD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[37a]">agge::stroke::cap::~cap__deallocating()</a> from stroke_features.o(i._ZN4agge6stroke3capD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
 <LI><a href="#[37b]">agge::stroke::join::~join__deallocating()</a> from nanovg_agge.o(i._ZN4agge6stroke4joinD0Ev) referenced from nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
 <LI><a href="#[376]">agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge4caps4butt4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[379]">agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge5joins5bevel4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[36c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 18 times from dicttrie.o(.constdata__ZTVN10ime_pinyin12AtomDictBaseE)
 <LI><a href="#[36c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
 <LI><a href="#[36c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
 <LI><a href="#[37d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[37c]">__sti___8_math_cpp_059a9964</a> from math.o(i.__sti___8_math_cpp_059a9964) referenced from math.o(.init_array)
 <LI><a href="#[85]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[89]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[88]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[8a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[87]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[86]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[1b5]">app_bar_create</a> from app_bar.o(i.app_bar_create) referenced 2 times from app_bar.o(.constdata)
 <LI><a href="#[ad]">asset_cache_cmp_type</a> from assets_manager.o(i.asset_cache_cmp_type) referenced from assets_manager.o(i.assets_manager_init)
 <LI><a href="#[ae]">asset_info_unref</a> from assets_manager.o(i.asset_info_unref) referenced from assets_manager.o(i.assets_manager_init)
 <LI><a href="#[189]">awtk_mem_on_out_of_memory</a> from awtk_global.o(i.awtk_mem_on_out_of_memory) referenced from awtk_global.o(i.tk_init_internal)
 <LI><a href="#[ee]">bitmap_cache_cmp_data</a> from image_manager.o(i.bitmap_cache_cmp_data) referenced from image_manager.o(i.image_manager_unload_bitmap)
 <LI><a href="#[ee]">bitmap_cache_cmp_data</a> from image_manager.o(i.bitmap_cache_cmp_data) referenced from image_manager.o(i.image_manager_update_specific)
 <LI><a href="#[ed]">bitmap_cache_cmp_name</a> from image_manager.o(i.bitmap_cache_cmp_name) referenced from image_manager.o(i.image_manager_lookup)
 <LI><a href="#[ef]">bitmap_cache_cmp_time</a> from image_manager.o(i.bitmap_cache_cmp_time) referenced from image_manager.o(i.image_manager_unload_unused)
 <LI><a href="#[ec]">bitmap_cache_destroy</a> from image_manager.o(i.bitmap_cache_destroy) referenced from image_manager.o(i.image_manager_init)
 <LI><a href="#[af]">bsvg_draw_on_path</a> from bsvg_draw.o(i.bsvg_draw_on_path) referenced from bsvg_draw.o(i.bsvg_draw)
 <LI><a href="#[b0]">bsvg_draw_on_shape</a> from bsvg_draw.o(i.bsvg_draw_on_shape) referenced from bsvg_draw.o(i.bsvg_draw)
 <LI><a href="#[1b6]">button_create</a> from button.o(i.button_create) referenced 2 times from button.o(.constdata)
 <LI><a href="#[1b7]">button_get_prop</a> from button.o(i.button_get_prop) referenced from button.o(.constdata)
 <LI><a href="#[1b8]">button_get_prop_default_value</a> from button.o(i.button_get_prop_default_value) referenced from button.o(.constdata)
 <LI><a href="#[1bd]">button_group_create</a> from button_group.o(i.button_group_create) referenced 2 times from button_group.o(.constdata)
 <LI><a href="#[1be]">button_group_on_paint_self</a> from button_group.o(i.button_group_on_paint_self) referenced from button_group.o(.constdata)
 <LI><a href="#[1bc]">button_on_destroy</a> from button.o(i.button_on_destroy) referenced from button.o(.constdata)
 <LI><a href="#[1bb]">button_on_event</a> from button.o(i.button_on_event) referenced from button.o(.constdata)
 <LI><a href="#[b7]">button_on_long_press</a> from button.o(i.button_on_long_press) referenced from button.o(i.button_on_event)
 <LI><a href="#[b6]">button_on_repeat</a> from button.o(i.button_on_repeat) referenced from button.o(i.button_on_event)
 <LI><a href="#[1b9]">button_set_prop</a> from button.o(i.button_set_prop) referenced from button.o(.constdata)
 <LI><a href="#[243]">calibration_win_create</a> from calibration_win.o(i.calibration_win_create) referenced 2 times from widget_factory.o(.constdata)
 <LI><a href="#[25e]">calibration_win_on_event</a> from calibration_win.o(i.calibration_win_on_event) referenced from calibration_win.o(.constdata)
 <LI><a href="#[25d]">calibration_win_on_paint_self</a> from calibration_win.o(i.calibration_win_on_paint_self) referenced from calibration_win.o(.constdata)
 <LI><a href="#[176]">candidates_create</a> from candidates.o(i.candidates_create) referenced from candidates.o(.constdata)
 <LI><a href="#[176]">candidates_create</a> from candidates.o(i.candidates_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[2f9]">candidates_get_prop</a> from candidates.o(i.candidates_get_prop) referenced from candidates.o(.constdata)
 <LI><a href="#[2fd]">candidates_invalidate</a> from candidates.o(i.candidates_invalidate) referenced from candidates.o(.constdata)
 <LI><a href="#[b9]">candidates_on_button_click</a> from candidates.o(i.candidates_on_button_click) referenced from candidates.o(i.candidates_create_button)
 <LI><a href="#[2ff]">candidates_on_destroy_default</a> from candidates.o(i.candidates_on_destroy_default) referenced from candidates.o(.constdata)
 <LI><a href="#[2fe]">candidates_on_event</a> from candidates.o(i.candidates_on_event) referenced from candidates.o(.constdata)
 <LI><a href="#[b8]">candidates_on_im_candidates_event</a> from candidates.o(i.candidates_on_im_candidates_event) referenced from candidates.o(i.candidates_create)
 <LI><a href="#[2fc]">candidates_on_paint_children</a> from candidates.o(i.candidates_on_paint_children) referenced from candidates.o(.constdata)
 <LI><a href="#[2fb]">candidates_on_paint_self</a> from candidates.o(i.candidates_on_paint_self) referenced from candidates.o(.constdata)
 <LI><a href="#[2fa]">candidates_set_prop</a> from candidates.o(i.candidates_set_prop) referenced from candidates.o(.constdata)
 <LI><a href="#[181]">canvas_widget_create</a> from canvas_widget.o(i.canvas_widget_create) referenced from canvas_widget.o(.constdata)
 <LI><a href="#[181]">canvas_widget_create</a> from canvas_widget.o(i.canvas_widget_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[1bf]">check_button_create</a> from check_button.o(i.check_button_create) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[1c4]">check_button_create_radio</a> from check_button.o(i.check_button_create_radio) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[1c0]">check_button_get_prop</a> from check_button.o(i.check_button_get_prop) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[1c3]">check_button_on_event</a> from check_button.o(i.check_button_on_event) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[1c2]">check_button_on_paint_self</a> from check_button.o(i.check_button_on_paint_self) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[1c1]">check_button_set_prop</a> from check_button.o(i.check_button_set_prop) referenced 2 times from check_button.o(.constdata)
 <LI><a href="#[be]">children_layouter_default_create</a> from children_layouter_default.o(i.children_layouter_default_create) referenced from children_layouter_builtins.o(i.children_layouter_register_builtins)
 <LI><a href="#[2a4]">children_layouter_default_destroy</a> from children_layouter_default.o(i.children_layouter_default_destroy) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[2a2]">children_layouter_default_get_param</a> from children_layouter_default.o(i.children_layouter_default_get_param) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[2a1]">children_layouter_default_is_valid</a> from children_layouter_default.o(i.children_layouter_default_is_valid) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[2a0]">children_layouter_default_layout</a> from children_layouter_default.o(i.children_layouter_default_layout) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[2a3]">children_layouter_default_set_param</a> from children_layouter_default.o(i.children_layouter_default_set_param) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[29f]">children_layouter_default_to_string</a> from children_layouter_default.o(i.children_layouter_default_to_string) referenced from children_layouter_default.o(.constdata)
 <LI><a href="#[bf]">children_layouter_list_view_create</a> from children_layouter_list_view.o(i.children_layouter_list_view_create) referenced from ext_widgets.o(i.children_layouter_register_ext_builtins)
 <LI><a href="#[358]">children_layouter_list_view_destroy</a> from children_layouter_list_view.o(i.children_layouter_list_view_destroy) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[356]">children_layouter_list_view_get_param</a> from children_layouter_list_view.o(i.children_layouter_list_view_get_param) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[355]">children_layouter_list_view_is_valid</a> from children_layouter_list_view.o(i.children_layouter_list_view_is_valid) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[354]">children_layouter_list_view_layout</a> from children_layouter_list_view.o(i.children_layouter_list_view_layout) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[357]">children_layouter_list_view_set_param</a> from children_layouter_list_view.o(i.children_layouter_list_view_set_param) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[353]">children_layouter_list_view_to_string</a> from children_layouter_list_view.o(i.children_layouter_list_view_to_string) referenced from children_layouter_list_view.o(.constdata)
 <LI><a href="#[ba]">children_layouter_parser_on_name</a> from children_layouter_parser.o(i.children_layouter_parser_on_name) referenced from children_layouter_parser.o(i.children_layouter_create_new)
 <LI><a href="#[bb]">children_layouter_parser_on_param</a> from children_layouter_parser.o(i.children_layouter_parser_on_param) referenced from children_layouter_parser.o(i.children_layouter_create_new)
 <LI><a href="#[299]">clip_board_default_clear</a> from clip_board_default.o(i.clip_board_default_clear) referenced from clip_board_default.o(.constdata)
 <LI><a href="#[29c]">clip_board_default_destroy</a> from clip_board_default.o(i.clip_board_default_destroy) referenced from clip_board_default.o(.constdata)
 <LI><a href="#[29a]">clip_board_default_get_data</a> from clip_board_default.o(i.clip_board_default_get_data) referenced from clip_board_default.o(.constdata)
 <LI><a href="#[29b]">clip_board_default_set_data</a> from clip_board_default.o(i.clip_board_default_set_data) referenced from clip_board_default.o(.constdata)
 <LI><a href="#[16a]">color_component_create</a> from color_component.o(i.color_component_create) referenced from color_component.o(.constdata)
 <LI><a href="#[16a]">color_component_create</a> from color_component.o(i.color_component_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[2ed]">color_component_on_destroy</a> from color_component.o(i.color_component_on_destroy) referenced from color_component.o(.constdata)
 <LI><a href="#[2ec]">color_component_on_event</a> from color_component.o(i.color_component_on_event) referenced from color_component.o(.constdata)
 <LI><a href="#[2eb]">color_component_on_paint_self</a> from color_component.o(i.color_component_on_paint_self) referenced from color_component.o(.constdata)
 <LI><a href="#[c1]">color_component_update_h</a> from color_component.o(i.color_component_update_h) referenced from color_component.o(i.color_component_set_type)
 <LI><a href="#[c0]">color_component_update_sv</a> from color_component.o(i.color_component_update_sv) referenced from color_component.o(i.color_component_on_paint_self)
 <LI><a href="#[c0]">color_component_update_sv</a> from color_component.o(i.color_component_update_sv) referenced from color_component.o(i.color_component_set_color)
 <LI><a href="#[c0]">color_component_update_sv</a> from color_component.o(i.color_component_update_sv) referenced from color_component.o(i.color_component_set_type)
 <LI><a href="#[169]">color_picker_create</a> from color_picker.o(i.color_picker_create) referenced from color_picker.o(.constdata)
 <LI><a href="#[169]">color_picker_create</a> from color_picker.o(i.color_picker_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[2ee]">color_picker_get_prop</a> from color_picker.o(i.color_picker_get_prop) referenced from color_picker.o(.constdata)
 <LI><a href="#[c3]">color_picker_hook_children</a> from color_picker.o(i.color_picker_hook_children) referenced from color_picker.o(i.color_picker_init_if_not_inited)
 <LI><a href="#[c2]">color_picker_on_child_value_changing</a> from color_picker.o(i.color_picker_on_child_value_changing) referenced from color_picker.o(i.color_picker_hook_children)
 <LI><a href="#[2f0]">color_picker_on_paint_begin</a> from color_picker.o(i.color_picker_on_paint_begin) referenced from color_picker.o(.constdata)
 <LI><a href="#[2ef]">color_picker_set_prop</a> from color_picker.o(i.color_picker_set_prop) referenced from color_picker.o(.constdata)
 <LI><a href="#[c4]">color_picker_update_child</a> from color_picker.o(i.color_picker_update_child) referenced from color_picker.o(i.color_picker_sync_children)
 <LI><a href="#[1c5]">color_tile_create</a> from color_tile.o(i.color_tile_create) referenced 2 times from color_tile.o(.constdata)
 <LI><a href="#[1c6]">color_tile_get_prop</a> from color_tile.o(i.color_tile_get_prop) referenced from color_tile.o(.constdata)
 <LI><a href="#[1c8]">color_tile_on_paint_self</a> from color_tile.o(i.color_tile_on_paint_self) referenced from color_tile.o(.constdata)
 <LI><a href="#[1c7]">color_tile_set_prop</a> from color_tile.o(i.color_tile_set_prop) referenced from color_tile.o(.constdata)
 <LI><a href="#[1c9]">column_create</a> from column.o(i.column_create) referenced 2 times from column.o(.constdata)
 <LI><a href="#[240]">combo_box_create</a> from combo_box.o(i.combo_box_create) referenced from widget_factory.o(.constdata)
 <LI><a href="#[1ca]">combo_box_create_self</a> from combo_box.o(i.combo_box_create_self) referenced from combo_box.o(.constdata)
 <LI><a href="#[1cb]">combo_box_get_prop</a> from combo_box.o(i.combo_box_get_prop) referenced from combo_box.o(.constdata)
 <LI><a href="#[1d1]">combo_box_item_create</a> from combo_box_item.o(i.combo_box_item_create) referenced 2 times from combo_box_item.o(.constdata)
 <LI><a href="#[1d2]">combo_box_item_get_prop</a> from combo_box_item.o(i.combo_box_item_get_prop) referenced from combo_box_item.o(.constdata)
 <LI><a href="#[1d5]">combo_box_item_on_event</a> from combo_box_item.o(i.combo_box_item_on_event) referenced from combo_box_item.o(.constdata)
 <LI><a href="#[1d4]">combo_box_item_on_paint_self</a> from combo_box_item.o(i.combo_box_item_on_paint_self) referenced from combo_box_item.o(.constdata)
 <LI><a href="#[1d3]">combo_box_item_set_prop</a> from combo_box_item.o(i.combo_box_item_set_prop) referenced from combo_box_item.o(.constdata)
 <LI><a href="#[c5]">combo_box_on_button_click</a> from combo_box.o(i.combo_box_on_button_click) referenced from combo_box.o(i.combo_box_create)
 <LI><a href="#[1d0]">combo_box_on_destroy</a> from combo_box.o(i.combo_box_on_destroy) referenced from combo_box.o(.constdata)
 <LI><a href="#[c7]">combo_box_on_item_click</a> from combo_box.o(i.combo_box_on_item_click) referenced from combo_box.o(i.combo_box_visit_item)
 <LI><a href="#[1ce]">combo_box_on_layout_children</a> from combo_box.o(i.combo_box_on_layout_children) referenced from combo_box.o(.constdata)
 <LI><a href="#[1cc]">combo_box_set_prop</a> from combo_box.o(i.combo_box_set_prop) referenced from combo_box.o(.constdata)
 <LI><a href="#[c6]">combo_box_visit_item</a> from combo_box.o(i.combo_box_visit_item) referenced from combo_box.o(i.combo_box_hook_items)
 <LI><a href="#[130]">compare_color</a> from color_parser.o(i.compare_color) referenced from color_parser.o(i.map_name_to_value)
 <LI><a href="#[bc]">creator_item_cmp</a> from children_layouter_factory.o(i.creator_item_cmp) referenced from children_layouter_factory.o(i.children_layouter_factory_init)
 <LI><a href="#[cb]">creator_item_cmp</a> from dialog_highlighter_factory.o(i.creator_item_cmp) referenced from dialog_highlighter_factory.o(i.dialog_highlighter_factory_init)
 <LI><a href="#[14e]">creator_item_cmp</a> from self_layouter_factory.o(i.creator_item_cmp) referenced from self_layouter_factory.o(i.self_layouter_factory_init)
 <LI><a href="#[19a]">creator_item_cmp</a> from widget_factory.o(i.creator_item_cmp) referenced from widget_factory.o(i.widget_factory_init)
 <LI><a href="#[19e]">creator_item_cmp</a> from window_animator_factory.o(i.creator_item_cmp) referenced from window_animator_factory.o(i.window_animator_factory_init)
 <LI><a href="#[bd]">default_destroy</a> from utils.o(i.default_destroy) referenced from children_layouter_factory.o(i.children_layouter_factory_init)
 <LI><a href="#[bd]">default_destroy</a> from utils.o(i.default_destroy) referenced from dialog_highlighter_factory.o(i.dialog_highlighter_factory_init)
 <LI><a href="#[bd]">default_destroy</a> from utils.o(i.default_destroy) referenced from self_layouter_factory.o(i.self_layouter_factory_init)
 <LI><a href="#[bd]">default_destroy</a> from utils.o(i.default_destroy) referenced from widget_factory.o(i.widget_factory_init)
 <LI><a href="#[bd]">default_destroy</a> from utils.o(i.default_destroy) referenced from window_animator_factory.o(i.window_animator_factory_init)
 <LI><a href="#[2c6]">default_get_func</a> from expr_eval.o(i.default_get_func) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c7]">default_get_variable</a> from expr_eval.o(i.default_get_variable) referenced from expr_eval.o(.constdata)
 <LI><a href="#[de]">destroy_glyph</a> from font_loader_stb.o(i.destroy_glyph) referenced from font_loader_stb.o(i.font_stb_create)
 <LI><a href="#[1df]">dialog_client_create</a> from dialog_client.o(i.dialog_client_create) referenced 2 times from dialog_client.o(.constdata)
 <LI><a href="#[1e0]">dialog_client_on_paint_self</a> from dialog_client.o(i.dialog_client_on_paint_self) referenced from dialog_client.o(.constdata)
 <LI><a href="#[1d6]">dialog_create</a> from dialog.o(i.dialog_create) referenced 2 times from dialog.o(.constdata)
 <LI><a href="#[1d7]">dialog_get_prop</a> from dialog.o(i.dialog_get_prop) referenced from dialog.o(.constdata)
 <LI><a href="#[cc]">dialog_highlighter_default_create</a> from dialog_highlighter_default.o(i.dialog_highlighter_default_create) referenced from dialog_highlighter_builtins.o(i.dialog_highlighter_register_builtins)
 <LI><a href="#[2dc]">dialog_highlighter_default_draw</a> from dialog_highlighter_default.o(i.dialog_highlighter_default_draw) referenced from dialog_highlighter_default.o(.constdata)
 <LI><a href="#[2de]">dialog_highlighter_default_is_dynamic</a> from dialog_highlighter_default.o(i.dialog_highlighter_default_is_dynamic) referenced from dialog_highlighter_default.o(.constdata)
 <LI><a href="#[2dd]">dialog_highlighter_default_prepare</a> from dialog_highlighter_default.o(i.dialog_highlighter_default_prepare) referenced from dialog_highlighter_default.o(.constdata)
 <LI><a href="#[ca]">dialog_highlighter_on_dialog_destroy</a> from dialog_highlighter_factory.o(i.dialog_highlighter_on_dialog_destroy) referenced from dialog_highlighter_factory.o(i.dialog_highlighter_factory_create_highlighter)
 <LI><a href="#[cd]">dialog_idle_close</a> from dialog.o(i.dialog_idle_close) referenced from dialog.o(i.dialog_modal)
 <LI><a href="#[1dc]">dialog_on_add_child</a> from dialog.o(i.dialog_on_add_child) referenced from dialog.o(.constdata)
 <LI><a href="#[1de]">dialog_on_destroy</a> from dialog.o(i.dialog_on_destroy) referenced from dialog.o(.constdata)
 <LI><a href="#[1d8]">dialog_set_prop</a> from dialog.o(i.dialog_set_prop) referenced from dialog.o(.constdata)
 <LI><a href="#[1e1]">dialog_title_create</a> from dialog_title.o(i.dialog_title_create) referenced 2 times from dialog_title.o(.constdata)
 <LI><a href="#[1e2]">dialog_title_on_paint_self</a> from dialog_title.o(i.dialog_title_on_paint_self) referenced from dialog_title.o(.constdata)
 <LI><a href="#[178]">digit_clock_create</a> from digit_clock.o(i.digit_clock_create) referenced from digit_clock.o(.constdata)
 <LI><a href="#[178]">digit_clock_create</a> from digit_clock.o(i.digit_clock_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[334]">digit_clock_get_prop</a> from digit_clock.o(i.digit_clock_get_prop) referenced from digit_clock.o(.constdata)
 <LI><a href="#[336]">digit_clock_on_destroy</a> from digit_clock.o(i.digit_clock_on_destroy) referenced from digit_clock.o(.constdata)
 <LI><a href="#[ce]">digit_clock_on_timer</a> from digit_clock.o(i.digit_clock_on_timer) referenced from digit_clock.o(i.digit_clock_create)
 <LI><a href="#[335]">digit_clock_set_prop</a> from digit_clock.o(i.digit_clock_set_prop) referenced from digit_clock.o(.constdata)
 <LI><a href="#[1e3]">dragger_create</a> from dragger.o(i.dragger_create) referenced 2 times from dragger.o(.constdata)
 <LI><a href="#[1e4]">dragger_get_prop</a> from dragger.o(i.dragger_get_prop) referenced from dragger.o(.constdata)
 <LI><a href="#[1e7]">dragger_on_event</a> from dragger.o(i.dragger_on_event) referenced from dragger.o(.constdata)
 <LI><a href="#[1e6]">dragger_on_paint_self</a> from dragger.o(i.dragger_on_paint_self) referenced from dragger.o(.constdata)
 <LI><a href="#[1e5]">dragger_set_prop</a> from dragger.o(i.dragger_set_prop) referenced from dragger.o(.constdata)
 <LI><a href="#[c8]">dummy_destroy</a> from utils.o(i.dummy_destroy) referenced from darray.o(i.darray_init)
 <LI><a href="#[c8]">dummy_destroy</a> from utils.o(i.dummy_destroy) referenced from slist.o(i.slist_init)
 <LI><a href="#[1fa]">easing_back_in</a> from easing.o(i.easing_back_in) referenced from easing.o(.constdata)
 <LI><a href="#[1fc]">easing_back_inout</a> from easing.o(i.easing_back_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1fb]">easing_back_out</a> from easing.o(i.easing_back_out) referenced from easing.o(.constdata)
 <LI><a href="#[1fd]">easing_bounce_in</a> from easing.o(i.easing_bounce_in) referenced from easing.o(.constdata)
 <LI><a href="#[1ff]">easing_bounce_inout</a> from easing.o(i.easing_bounce_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1fe]">easing_bounce_out</a> from easing.o(i.easing_bounce_out) referenced from easing.o(.constdata)
 <LI><a href="#[1f4]">easing_circular_in</a> from easing.o(i.easing_circular_in) referenced from easing.o(.constdata)
 <LI><a href="#[1f6]">easing_circular_inout</a> from easing.o(i.easing_circular_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1f5]">easing_circular_out</a> from easing.o(i.easing_circular_out) referenced from easing.o(.constdata)
 <LI><a href="#[1ec]">easing_cubic_in</a> from easing.o(i.easing_cubic_in) referenced from easing.o(.constdata)
 <LI><a href="#[1ed]">easing_cubic_out</a> from easing.o(i.easing_cubic_out) referenced from easing.o(.constdata)
 <LI><a href="#[1f7]">easing_elastic_in</a> from easing.o(i.easing_elastic_in) referenced from easing.o(.constdata)
 <LI><a href="#[1f9]">easing_elastic_inout</a> from easing.o(i.easing_elastic_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1f8]">easing_elastic_out</a> from easing.o(i.easing_elastic_out) referenced from easing.o(.constdata)
 <LI><a href="#[1e8]">easing_linear</a> from easing.o(i.easing_linear) referenced from easing.o(.constdata)
 <LI><a href="#[1f1]">easing_pow_in</a> from easing.o(i.easing_pow_in) referenced from easing.o(.constdata)
 <LI><a href="#[1f3]">easing_pow_inout</a> from easing.o(i.easing_pow_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1f2]">easing_pow_out</a> from easing.o(i.easing_pow_out) referenced from easing.o(.constdata)
 <LI><a href="#[1e9]">easing_quadratic_in</a> from easing.o(i.easing_quadratic_in) referenced from easing.o(.constdata)
 <LI><a href="#[1eb]">easing_quadratic_inout</a> from easing.o(i.easing_quadratic_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1ea]">easing_quadratic_out</a> from easing.o(i.easing_quadratic_out) referenced from easing.o(.constdata)
 <LI><a href="#[1ee]">easing_sin_in</a> from easing.o(i.easing_sin_in) referenced from easing.o(.constdata)
 <LI><a href="#[1f0]">easing_sin_inout</a> from easing.o(i.easing_sin_inout) referenced from easing.o(.constdata)
 <LI><a href="#[1ef]">easing_sin_out</a> from easing.o(i.easing_sin_out) referenced from easing.o(.constdata)
 <LI><a href="#[200]">edit_create</a> from edit.o(i.edit_create) referenced 2 times from edit.o(.constdata)
 <LI><a href="#[201]">edit_get_prop</a> from edit.o(i.edit_get_prop) referenced 2 times from edit.o(.constdata)
 <LI><a href="#[d4]">edit_hook_button</a> from edit.o(i.edit_hook_button) referenced from edit.o(i.edit_hook_children_button)
 <LI><a href="#[cf]">edit_hook_children_button</a> from edit.o(i.edit_hook_children_button) referenced from edit.o(i.edit_create_ex)
 <LI><a href="#[d2]">edit_on_clear</a> from edit.o(i.edit_on_clear) referenced from edit.o(i.edit_hook_button)
 <LI><a href="#[d1]">edit_on_dec</a> from edit.o(i.edit_on_dec) referenced from edit.o(i.edit_hook_button)
 <LI><a href="#[203]">edit_on_destroy</a> from edit.o(i.edit_on_destroy) referenced 2 times from edit.o(.constdata)
 <LI><a href="#[1cf]">edit_on_event</a> from edit.o(i.edit_on_event) referenced 3 times from combo_box.o(.constdata)
 <LI><a href="#[d0]">edit_on_inc</a> from edit.o(i.edit_on_inc) referenced from edit.o(i.edit_hook_button)
 <LI><a href="#[1cd]">edit_on_paint_self</a> from edit.o(i.edit_on_paint_self) referenced 3 times from combo_box.o(.constdata)
 <LI><a href="#[d3]">edit_on_password_visible</a> from edit.o(i.edit_on_password_visible) referenced from edit.o(i.edit_hook_button)
 <LI><a href="#[d6]">edit_request_input_method_on_window_open</a> from edit.o(i.edit_request_input_method_on_window_open) referenced from edit.o(i.edit_request_input_method)
 <LI><a href="#[202]">edit_set_prop</a> from edit.o(i.edit_set_prop) referenced 2 times from edit.o(.constdata)
 <LI><a href="#[d5]">edit_update_caret</a> from edit.o(i.edit_update_caret) referenced from edit.o(i.edit_on_event)
 <LI><a href="#[d8]">font_cmp</a> from font_manager.o(i.font_cmp) referenced from font_manager.o(i.font_manager_init)
 <LI><a href="#[d9]">font_destroy</a> from font.o(i.font_destroy) referenced from font_manager.o(i.font_manager_init)
 <LI><a href="#[db]">font_stb_destroy</a> from font_loader_stb.o(i.font_stb_destroy) referenced from font_loader_stb.o(i.font_stb_create)
 <LI><a href="#[dd]">font_stb_get_baseline</a> from font_loader_stb.o(i.font_stb_get_baseline) referenced from font_loader_stb.o(i.font_stb_create)
 <LI><a href="#[dc]">font_stb_get_glyph</a> from font_loader_stb.o(i.font_stb_get_glyph) referenced from font_loader_stb.o(i.font_stb_create)
 <LI><a href="#[d7]">font_stb_load</a> from font_loader_stb.o(i.font_stb_load) referenced from font_loader_stb.o(i.font_loader_stb)
 <LI><a href="#[da]">font_stb_match</a> from font_loader_stb.o(i.font_stb_match) referenced from font_loader_stb.o(i.font_stb_create)
 <LI><a href="#[2bb]">func_acos</a> from expr_eval.o(i.func_acos) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2bc]">func_asin</a> from expr_eval.o(i.func_asin) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2bd]">func_atan</a> from expr_eval.o(i.func_atan) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c2]">func_ceil</a> from expr_eval.o(i.func_ceil) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b8]">func_cos</a> from expr_eval.o(i.func_cos) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2be]">func_exp</a> from expr_eval.o(i.func_exp) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c3]">func_floor</a> from expr_eval.o(i.func_floor) referenced 2 times from expr_eval.o(.constdata)
 <LI><a href="#[2c5]">func_if</a> from expr_eval.o(i.func_if) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2bf]">func_log</a> from expr_eval.o(i.func_log) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c0]">func_log10</a> from expr_eval.o(i.func_log10) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b2]">func_number</a> from expr_eval.o(i.func_number) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b4]">func_path</a> from expr_eval.o(i.func_path) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c4]">func_round</a> from expr_eval.o(i.func_round) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b9]">func_sin</a> from expr_eval.o(i.func_sin) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2c1]">func_sqrt</a> from expr_eval.o(i.func_sqrt) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b5]">func_string</a> from expr_eval.o(i.func_string) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b3]">func_strlen</a> from expr_eval.o(i.func_strlen) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2ba]">func_tan</a> from expr_eval.o(i.func_tan) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b7]">func_tolower</a> from expr_eval.o(i.func_tolower) referenced from expr_eval.o(.constdata)
 <LI><a href="#[2b6]">func_toupper</a> from expr_eval.o(i.func_toupper) referenced from expr_eval.o(.constdata)
 <LI><a href="#[180]">gif_image_create</a> from gif_image.o(i.gif_image_create) referenced from gif_image.o(.constdata)
 <LI><a href="#[180]">gif_image_create</a> from gif_image.o(i.gif_image_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[342]">gif_image_on_destroy</a> from gif_image.o(i.gif_image_on_destroy) referenced from gif_image.o(.constdata)
 <LI><a href="#[341]">gif_image_on_paint_self</a> from gif_image.o(i.gif_image_on_paint_self) referenced from gif_image.o(.constdata)
 <LI><a href="#[e1]">gif_image_on_timer</a> from gif_image.o(i.gif_image_on_timer) referenced from gif_image.o(i.gif_image_on_paint_self)
 <LI><a href="#[e1]">gif_image_on_timer</a> from gif_image.o(i.gif_image_on_timer) referenced from gif_image.o(i.gif_image_on_timer)
 <LI><a href="#[204]">grid_create</a> from grid.o(i.grid_create) referenced 2 times from grid.o(.constdata)
 <LI><a href="#[241]">grid_item_create</a> from grid_item.o(i.grid_item_create) referenced 2 times from widget_factory.o(.constdata)
 <LI><a href="#[205]">group_box_create</a> from group_box.o(i.group_box_create) referenced 2 times from group_box.o(.constdata)
 <LI><a href="#[206]">group_box_on_paint_self</a> from group_box.o(i.group_box_on_paint_self) referenced from group_box.o(.constdata)
 <LI><a href="#[179]">guage_create</a> from guage.o(i.guage_create) referenced from guage.o(.constdata)
 <LI><a href="#[179]">guage_create</a> from guage.o(i.guage_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[2f1]">guage_get_prop</a> from guage.o(i.guage_get_prop) referenced from guage.o(.constdata)
 <LI><a href="#[2f4]">guage_on_destroy</a> from guage.o(i.guage_on_destroy) referenced from guage.o(.constdata)
 <LI><a href="#[2f3]">guage_on_paint_self</a> from guage.o(i.guage_on_paint_self) referenced from guage.o(.constdata)
 <LI><a href="#[17a]">guage_pointer_create</a> from guage_pointer.o(i.guage_pointer_create) referenced from guage_pointer.o(.constdata)
 <LI><a href="#[17a]">guage_pointer_create</a> from guage_pointer.o(i.guage_pointer_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[33b]">guage_pointer_get_prop</a> from guage_pointer.o(i.guage_pointer_get_prop) referenced from guage_pointer.o(.constdata)
 <LI><a href="#[e2]">guage_pointer_load_svg_asset</a> from guage_pointer.o(i.guage_pointer_load_svg_asset) referenced from guage_pointer.o(i.guage_pointer_set_image)
 <LI><a href="#[33e]">guage_pointer_on_destroy</a> from guage_pointer.o(i.guage_pointer_on_destroy) referenced from guage_pointer.o(.constdata)
 <LI><a href="#[33d]">guage_pointer_on_paint_self</a> from guage_pointer.o(i.guage_pointer_on_paint_self) referenced from guage_pointer.o(.constdata)
 <LI><a href="#[33c]">guage_pointer_set_prop</a> from guage_pointer.o(i.guage_pointer_set_prop) referenced from guage_pointer.o(.constdata)
 <LI><a href="#[2f2]">guage_set_prop</a> from guage.o(i.guage_set_prop) referenced from guage.o(.constdata)
 <LI><a href="#[15b]">high_task</a> from main.o(i.high_task) referenced from main.o(i.start_task)
 <LI><a href="#[187]">hscroll_label_create</a> from hscroll_label.o(i.hscroll_label_create) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[187]">hscroll_label_create</a> from hscroll_label.o(i.hscroll_label_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[362]">hscroll_label_get_prop</a> from hscroll_label.o(i.hscroll_label_get_prop) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[366]">hscroll_label_on_destroy</a> from hscroll_label.o(i.hscroll_label_on_destroy) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[365]">hscroll_label_on_event</a> from hscroll_label.o(i.hscroll_label_on_event) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[364]">hscroll_label_on_paint_self</a> from hscroll_label.o(i.hscroll_label_on_paint_self) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[e4]">hscroll_label_on_timer</a> from hscroll_label.o(i.hscroll_label_on_timer) referenced from hscroll_label.o(i.hscroll_label_start)
 <LI><a href="#[e3]">hscroll_label_on_timer_start</a> from hscroll_label.o(i.hscroll_label_on_timer_start) referenced from hscroll_label.o(i.hscroll_label_create)
 <LI><a href="#[e3]">hscroll_label_on_timer_start</a> from hscroll_label.o(i.hscroll_label_on_timer_start) referenced from hscroll_label.o(i.hscroll_label_on_timer)
 <LI><a href="#[363]">hscroll_label_set_prop</a> from hscroll_label.o(i.hscroll_label_set_prop) referenced from hscroll_label.o(.constdata)
 <LI><a href="#[e5]">hscrollable_on_scroll_done</a> from hscrollable.o(i.hscrollable_on_scroll_done) referenced from hscrollable.o(i.hscrollable_scroll_to)
 <LI><a href="#[e6]">idle_info_compare</a> from idle_info.o(i.idle_info_compare) referenced from idle_manager_1.o(i.idle_manager_init)
 <LI><a href="#[2aa]">idle_info_on_destroy</a> from idle_info.o(i.idle_info_on_destroy) referenced from idle_info.o(.constdata)
 <LI><a href="#[17d]">image_animation_create</a> from image_animation.o(i.image_animation_create) referenced from image_animation.o(.constdata)
 <LI><a href="#[17d]">image_animation_create</a> from image_animation.o(i.image_animation_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[ea]">image_animation_delay_play</a> from image_animation.o(i.image_animation_delay_play) referenced from image_animation.o(i.image_animation_start_init_if_not_inited)
 <LI><a href="#[2f5]">image_animation_get_prop</a> from image_animation.o(i.image_animation_get_prop) referenced from image_animation.o(.constdata)
 <LI><a href="#[2f8]">image_animation_on_destroy</a> from image_animation.o(i.image_animation_on_destroy) referenced from image_animation.o(.constdata)
 <LI><a href="#[2f7]">image_animation_on_paint_self</a> from image_animation.o(i.image_animation_on_paint_self) referenced from image_animation.o(.constdata)
 <LI><a href="#[e9]">image_animation_on_update</a> from image_animation.o(i.image_animation_on_update) referenced from image_animation.o(i.image_animation_play)
 <LI><a href="#[2f6]">image_animation_set_prop</a> from image_animation.o(i.image_animation_set_prop) referenced from image_animation.o(.constdata)
 <LI><a href="#[2c8]">image_base_get_prop</a> from image_base.o(i.image_base_get_prop) referenced 3 times from mutable_image.o(.constdata)
 <LI><a href="#[20c]">image_base_on_destroy</a> from image_base.o(i.image_base_on_destroy) referenced from image.o(.constdata)
 <LI><a href="#[20b]">image_base_on_event</a> from image_base.o(i.image_base_on_event) referenced 4 times from image.o(.constdata)
 <LI><a href="#[2c9]">image_base_set_prop</a> from image_base.o(i.image_base_set_prop) referenced 3 times from mutable_image.o(.constdata)
 <LI><a href="#[207]">image_create</a> from image.o(i.image_create) referenced 2 times from image.o(.constdata)
 <LI><a href="#[208]">image_get_prop</a> from image.o(i.image_get_prop) referenced from image.o(.constdata)
 <LI><a href="#[259]">image_loader_stb_load</a> from image_loader_stb.o(i.image_loader_stb_load) referenced from image_loader_stb.o(.constdata)
 <LI><a href="#[eb]">image_manager_on_expr_result</a> from image_manager.o(i.image_manager_on_expr_result) referenced from image_manager.o(i.image_manager_get_bitmap_exprs)
 <LI><a href="#[20a]">image_on_paint_self</a> from image.o(i.image_on_paint_self) referenced from image.o(.constdata)
 <LI><a href="#[209]">image_set_prop</a> from image.o(i.image_set_prop) referenced from image.o(.constdata)
 <LI><a href="#[182]">image_value_create</a> from image_value.o(i.image_value_create) referenced from image_value.o(.constdata)
 <LI><a href="#[182]">image_value_create</a> from image_value.o(i.image_value_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[343]">image_value_get_prop</a> from image_value.o(i.image_value_get_prop) referenced from image_value.o(.constdata)
 <LI><a href="#[346]">image_value_on_destroy</a> from image_value.o(i.image_value_on_destroy) referenced from image_value.o(.constdata)
 <LI><a href="#[345]">image_value_on_paint_self</a> from image_value.o(i.image_value_on_paint_self) referenced from image_value.o(.constdata)
 <LI><a href="#[344]">image_value_set_prop</a> from image_value.o(i.image_value_set_prop) referenced from image_value.o(.constdata)
 <LI><a href="#[f0]">init_widget</a> from window_main.o(i.init_widget) referenced 4 times from window_main.o(i.init_children_widget)
 <LI><a href="#[106]">input_method_default_destroy</a> from input_method_creator.o(i.input_method_default_destroy) referenced from input_method_creator.o(i.input_method_default_create)
 <LI><a href="#[108]">input_method_default_on_keyboard_open</a> from input_method_creator.o(i.input_method_default_on_keyboard_open) referenced from input_method_creator.o(i.input_type_open_keyboard)
 <LI><a href="#[105]">input_method_default_request</a> from input_method_creator.o(i.input_method_default_request) referenced from input_method_creator.o(i.input_method_default_create)
 <LI><a href="#[10a]">input_method_on_win_close</a> from input_method_creator.o(i.input_method_on_win_close) referenced from input_method_creator.o(i.input_type_open_keyboard)
 <LI><a href="#[8b]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[175]">keyboard_create</a> from keyboard.o(i.keyboard_create) referenced from keyboard.o(.constdata)
 <LI><a href="#[175]">keyboard_create</a> from keyboard.o(i.keyboard_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[10e]">keyboard_hook_buttons</a> from keyboard.o(i.keyboard_hook_buttons) referenced from keyboard.o(i.keyboard_on_load)
 <LI><a href="#[10c]">keyboard_on_action_info</a> from keyboard.o(i.keyboard_on_action_info) referenced from keyboard.o(i.keyboard_create)
 <LI><a href="#[10d]">keyboard_on_button_click</a> from keyboard.o(i.keyboard_on_button_click) referenced from keyboard.o(i.keyboard_hook_buttons)
 <LI><a href="#[300]">keyboard_on_destroy</a> from keyboard.o(i.keyboard_on_destroy) referenced from keyboard.o(.constdata)
 <LI><a href="#[10b]">keyboard_on_load</a> from keyboard.o(i.keyboard_on_load) referenced from keyboard.o(i.keyboard_create)
 <LI><a href="#[20d]">label_create</a> from label.o(i.label_create) referenced 2 times from label.o(.constdata)
 <LI><a href="#[20e]">label_get_prop</a> from label.o(i.label_get_prop) referenced from label.o(.constdata)
 <LI><a href="#[10f]">label_on_line</a> from label.o(i.label_on_line) referenced from label.o(i.label_paint_text_mlines)
 <LI><a href="#[210]">label_on_paint_self</a> from label.o(i.label_on_paint_self) referenced from label.o(.constdata)
 <LI><a href="#[20f]">label_set_prop</a> from label.o(i.label_set_prop) referenced from label.o(.constdata)
 <LI><a href="#[110]">lcd_mem_begin_frame</a> from lcd_mem_bgr565.o(i.lcd_mem_begin_frame) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11d]">lcd_mem_destroy</a> from lcd_mem_bgr565.o(i.lcd_mem_destroy) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[116]">lcd_mem_draw_glyph</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_glyph) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[112]">lcd_mem_draw_hline</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_hline) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[114]">lcd_mem_draw_image</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_image) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[115]">lcd_mem_draw_image_matrix</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_image_matrix) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[117]">lcd_mem_draw_points</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_points) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[111]">lcd_mem_draw_vline</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_vline) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11c]">lcd_mem_end_frame</a> from lcd_mem_bgr565.o(i.lcd_mem_end_frame) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[113]">lcd_mem_fill_rect</a> from lcd_mem_bgr565.o(i.lcd_mem_fill_rect) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11f]">lcd_mem_flush</a> from lcd_mem_bgr565.o(i.lcd_mem_flush) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11b]">lcd_mem_get_desired_bitmap_format</a> from lcd_mem_bgr565.o(i.lcd_mem_get_desired_bitmap_format) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[118]">lcd_mem_get_point_color</a> from lcd_mem_bgr565.o(i.lcd_mem_get_point_color) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[119]">lcd_mem_get_vgcanvas</a> from lcd_mem_bgr565.o(i.lcd_mem_get_vgcanvas) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11e]">lcd_mem_resize</a> from lcd_mem_bgr565.o(i.lcd_mem_resize) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[11a]">lcd_mem_take_snapshot</a> from lcd_mem_bgr565.o(i.lcd_mem_take_snapshot) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[186]">line_number_create</a> from line_number.o(i.line_number_create) referenced from line_number.o(.constdata)
 <LI><a href="#[186]">line_number_create</a> from line_number.o(i.line_number_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[35f]">line_number_get_prop</a> from line_number.o(i.line_number_get_prop) referenced from line_number.o(.constdata)
 <LI><a href="#[361]">line_number_on_paint_self</a> from line_number.o(i.line_number_on_paint_self) referenced from line_number.o(.constdata)
 <LI><a href="#[360]">line_number_set_prop</a> from line_number.o(i.line_number_set_prop) referenced from line_number.o(.constdata)
 <LI><a href="#[16e]">list_item_create</a> from list_item.o(i.list_item_create) referenced from list_item.o(.constdata)
 <LI><a href="#[16e]">list_item_create</a> from list_item.o(i.list_item_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[307]">list_item_on_destroy</a> from list_item.o(i.list_item_on_destroy) referenced from list_item.o(.constdata)
 <LI><a href="#[306]">list_item_on_event</a> from list_item.o(i.list_item_on_event) referenced from list_item.o(.constdata)
 <LI><a href="#[305]">list_item_on_paint_self</a> from list_item.o(i.list_item_on_paint_self) referenced from list_item.o(.constdata)
 <LI><a href="#[120]">list_item_on_timer</a> from list_item.o(i.list_item_on_timer) referenced from list_item.o(i.list_item_on_event)
 <LI><a href="#[16c]">list_view_create</a> from list_view.o(i.list_view_create) referenced from list_view.o(.constdata)
 <LI><a href="#[16c]">list_view_create</a> from list_view.o(i.list_view_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[308]">list_view_get_prop</a> from list_view.o(i.list_view_get_prop) referenced from list_view.o(.constdata)
 <LI><a href="#[16d]">list_view_h_create</a> from list_view_h.o(i.list_view_h_create) referenced from list_view_h.o(.constdata)
 <LI><a href="#[16d]">list_view_h_create</a> from list_view_h.o(i.list_view_h_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[30d]">list_view_h_get_prop</a> from list_view_h.o(i.list_view_h_get_prop) referenced from list_view_h.o(.constdata)
 <LI><a href="#[310]">list_view_h_on_add_child</a> from list_view_h.o(i.list_view_h_on_add_child) referenced from list_view_h.o(.constdata)
 <LI><a href="#[311]">list_view_h_on_event</a> from list_view_h.o(i.list_view_h_on_event) referenced from list_view_h.o(.constdata)
 <LI><a href="#[30f]">list_view_h_on_paint_self</a> from list_view_h.o(i.list_view_h_on_paint_self) referenced from list_view_h.o(.constdata)
 <LI><a href="#[121]">list_view_h_on_scroll_view_layout_children</a> from list_view_h.o(i.list_view_h_on_scroll_view_layout_children) referenced from list_view_h.o(i.list_view_h_on_add_child)
 <LI><a href="#[30e]">list_view_h_set_prop</a> from list_view_h.o(i.list_view_h_set_prop) referenced from list_view_h.o(.constdata)
 <LI><a href="#[30b]">list_view_on_add_child</a> from list_view.o(i.list_view_on_add_child) referenced from list_view.o(.constdata)
 <LI><a href="#[30c]">list_view_on_event</a> from list_view.o(i.list_view_on_event) referenced from list_view.o(.constdata)
 <LI><a href="#[30a]">list_view_on_paint_self</a> from list_view.o(i.list_view_on_paint_self) referenced from list_view.o(.constdata)
 <LI><a href="#[125]">list_view_on_scroll_bar_value_changed</a> from list_view.o(i.list_view_on_scroll_bar_value_changed) referenced from list_view.o(i.list_view_on_add_child)
 <LI><a href="#[124]">list_view_on_scroll_view_layout_children</a> from list_view.o(i.list_view_on_scroll_view_layout_children) referenced from list_view.o(i.list_view_on_add_child)
 <LI><a href="#[122]">list_view_on_scroll_view_scroll</a> from list_view.o(i.list_view_on_scroll_view_scroll) referenced from list_view.o(i.list_view_on_add_child)
 <LI><a href="#[123]">list_view_on_scroll_view_scroll_to</a> from list_view.o(i.list_view_on_scroll_view_scroll_to) referenced from list_view.o(i.list_view_on_add_child)
 <LI><a href="#[309]">list_view_set_prop</a> from list_view.o(i.list_view_set_prop) referenced from list_view.o(.constdata)
 <LI><a href="#[15d]">low_task</a> from main.o(i.low_task) referenced from main.o(i.start_task)
 <LI><a href="#[12b]">main_loop_raw_destroy</a> from main_loop_stm32_raw.o(i.main_loop_raw_destroy) referenced from main_loop_stm32_raw.o(i.main_loop_init)
 <LI><a href="#[12c]">main_loop_raw_dispatch</a> from main_loop_stm32_raw.o(i.main_loop_raw_dispatch) referenced from main_loop_stm32_raw.o(i.main_loop_init)
 <LI><a href="#[12f]">main_loop_simple_queue_event</a> from main_loop_simple.o(i.main_loop_simple_queue_event) referenced from main_loop_simple.o(i.main_loop_simple_init)
 <LI><a href="#[12d]">main_loop_simple_run</a> from main_loop_simple.o(i.main_loop_simple_run) referenced from main_loop_simple.o(i.main_loop_simple_init)
 <LI><a href="#[12e]">main_loop_simple_step</a> from main_loop_simple.o(i.main_loop_simple_step) referenced from main_loop_simple.o(i.main_loop_simple_init)
 <LI><a href="#[15c]">middle_task</a> from main.o(i.middle_task) referenced from main.o(i.start_task)
 <LI><a href="#[185]">mledit_create</a> from mledit.o(i.mledit_create) referenced from mledit.o(.constdata)
 <LI><a href="#[185]">mledit_create</a> from mledit.o(i.mledit_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[359]">mledit_get_prop</a> from mledit.o(i.mledit_get_prop) referenced from mledit.o(.constdata)
 <LI><a href="#[35c]">mledit_on_add_child</a> from mledit.o(i.mledit_on_add_child) referenced from mledit.o(.constdata)
 <LI><a href="#[35e]">mledit_on_destroy</a> from mledit.o(i.mledit_on_destroy) referenced from mledit.o(.constdata)
 <LI><a href="#[35d]">mledit_on_event</a> from mledit.o(i.mledit_on_event) referenced from mledit.o(.constdata)
 <LI><a href="#[35b]">mledit_on_paint_self</a> from mledit.o(i.mledit_on_paint_self) referenced from mledit.o(.constdata)
 <LI><a href="#[131]">mledit_on_scroll_bar_value_changed</a> from mledit.o(i.mledit_on_scroll_bar_value_changed) referenced from mledit.o(i.mledit_on_add_child)
 <LI><a href="#[132]">mledit_on_text_edit_state_changed</a> from mledit.o(i.mledit_on_text_edit_state_changed) referenced from mledit.o(i.mledit_on_add_child)
 <LI><a href="#[134]">mledit_request_input_method_on_window_open</a> from mledit.o(i.mledit_request_input_method_on_window_open) referenced from mledit.o(i.mledit_request_input_method)
 <LI><a href="#[35a]">mledit_set_prop</a> from mledit.o(i.mledit_set_prop) referenced from mledit.o(.constdata)
 <LI><a href="#[133]">mledit_update_caret</a> from mledit.o(i.mledit_update_caret) referenced from mledit.o(i.mledit_on_event)
 <LI><a href="#[184]">mutable_image_create</a> from mutable_image.o(i.mutable_image_create) referenced from mutable_image.o(.constdata)
 <LI><a href="#[184]">mutable_image_create</a> from mutable_image.o(i.mutable_image_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[135]">mutable_image_invalidate</a> from mutable_image.o(i.mutable_image_invalidate) referenced from mutable_image.o(i.mutable_image_create)
 <LI><a href="#[2cb]">mutable_image_on_destroy</a> from mutable_image.o(i.mutable_image_on_destroy) referenced from mutable_image.o(.constdata)
 <LI><a href="#[2ca]">mutable_image_on_paint_self</a> from mutable_image.o(i.mutable_image_on_paint_self) referenced from mutable_image.o(.constdata)
 <LI><a href="#[13f]">obj_get_func</a> from object.o(i.obj_get_func) referenced from object.o(i.object_eval)
 <LI><a href="#[140]">obj_get_variable</a> from object.o(i.obj_get_variable) referenced from object.o(i.object_eval)
 <LI><a href="#[2ad]">object_default_compare</a> from object_default.o(i.object_default_compare) referenced from object_default.o(.constdata)
 <LI><a href="#[2b1]">object_default_foreach_prop</a> from object_default.o(i.object_default_foreach_prop) referenced from object_default.o(.constdata)
 <LI><a href="#[2ae]">object_default_get_prop</a> from object_default.o(i.object_default_get_prop) referenced from object_default.o(.constdata)
 <LI><a href="#[2ac]">object_default_on_destroy</a> from object_default.o(i.object_default_on_destroy) referenced from object_default.o(.constdata)
 <LI><a href="#[2b0]">object_default_remove_prop</a> from object_default.o(i.object_default_remove_prop) referenced from object_default.o(.constdata)
 <LI><a href="#[2af]">object_default_set_prop</a> from object_default.o(i.object_default_set_prop) referenced from object_default.o(.constdata)
 <LI><a href="#[e7]">object_unref</a> from object.o(i.object_unref) referenced from idle_manager_1.o(i.idle_manager_init)
 <LI><a href="#[e7]">object_unref</a> from object.o(i.object_unref) referenced from timer_manager.o(i.timer_manager_init)
 <LI><a href="#[f5]">on_auto</a> from window_main.o(i.on_auto) referenced from window_main.o(i.init_widget)
 <LI><a href="#[142]">on_bkgnd_delay_in</a> from window_main.o(i.on_bkgnd_delay_in) referenced from window_main.o(i.on_bkgnd_update)
 <LI><a href="#[141]">on_bkgnd_update</a> from window_main.o(i.on_bkgnd_update) referenced from window_main.o(i.on_auto)
 <LI><a href="#[102]">on_cancle</a> from window_timing.o(i.on_cancle) referenced from window_timing.o(i.init_widget)
 <LI><a href="#[ff]">on_close</a> from window_record.o(i.on_close) referenced 2 times from window_record.o(i.init_widget)
 <LI><a href="#[fa]">on_frequency_dec</a> from window_main.o(i.on_frequency_dec) referenced from window_main.o(i.init_widget)
 <LI><a href="#[f9]">on_frequency_inc</a> from window_main.o(i.on_frequency_inc) referenced from window_main.o(i.init_widget)
 <LI><a href="#[fe]">on_humidity_dec</a> from window_main.o(i.on_humidity_dec) referenced from window_main.o(i.init_widget)
 <LI><a href="#[fd]">on_humidity_inc</a> from window_main.o(i.on_humidity_inc) referenced from window_main.o(i.init_widget)
 <LI><a href="#[107]">on_idle_close_keyboard</a> from input_method_creator.o(i.on_idle_close_keyboard) referenced from input_method_creator.o(i.input_method_default_request)
 <LI><a href="#[1aa]">on_idle_invalidate</a> from window_manager.o(i.on_idle_invalidate) referenced from window_manager.o(i.window_manager_check_if_need_open_animation)
 <LI><a href="#[e8]">on_idle_unload_image</a> from image_animation.o(i.on_idle_unload_image) referenced from image_animation.o(i.image_animation_on_paint_self)
 <LI><a href="#[ab]">on_language</a> from window_main.o(i.on_language) referenced from window_main.o(i.application_init)
 <LI><a href="#[101]">on_ok</a> from window_timing.o(i.on_ok) referenced from window_timing.o(i.init_widget)
 <LI><a href="#[1a9]">on_prev_window_paint_done</a> from window_animator_slide.o(i.on_prev_window_paint_done) referenced from window_animator_slide.o(i.window_animator_slide_init)
 <LI><a href="#[109]">on_push_window</a> from input_method_creator.o(i.on_push_window) referenced from input_method_creator.o(i.input_type_open_keyboard)
 <LI><a href="#[143]">on_reading_update</a> from window_main.o(i.on_reading_update) referenced from window_main.o(i.on_switch)
 <LI><a href="#[f7]">on_record</a> from window_main.o(i.on_record) referenced from window_main.o(i.init_widget)
 <LI><a href="#[f8]">on_setting</a> from window_main.o(i.on_setting) referenced from window_main.o(i.init_widget)
 <LI><a href="#[f4]">on_switch</a> from window_main.o(i.on_switch) referenced from window_main.o(i.init_widget)
 <LI><a href="#[ac]">on_systime_update</a> from window_main.o(i.on_systime_update) referenced from window_main.o(i.application_init)
 <LI><a href="#[fc]">on_temperature_dec</a> from window_main.o(i.on_temperature_dec) referenced from window_main.o(i.init_widget)
 <LI><a href="#[fb]">on_temperature_inc</a> from window_main.o(i.on_temperature_inc) referenced from window_main.o(i.init_widget)
 <LI><a href="#[f6]">on_timing</a> from window_main.o(i.on_timing) referenced from window_main.o(i.init_widget)
 <LI><a href="#[1b2]">on_window_open</a> from window_open.o(i.on_window_open) referenced from window_open.o(i.window_open_with_name)
 <LI><a href="#[23d]">overlay_create</a> from overlay.o(i.overlay_create) referenced 2 times from widget_factory.o(.constdata)
 <LI><a href="#[211]">pages_create</a> from pages.o(i.pages_create) referenced 2 times from pages.o(.constdata)
 <LI><a href="#[216]">pages_find_target</a> from pages.o(i.pages_find_target) referenced from pages.o(.constdata)
 <LI><a href="#[212]">pages_get_prop</a> from pages.o(i.pages_get_prop) referenced from pages.o(.constdata)
 <LI><a href="#[215]">pages_on_paint_children</a> from pages.o(i.pages_on_paint_children) referenced from pages.o(.constdata)
 <LI><a href="#[213]">pages_set_prop</a> from pages.o(i.pages_set_prop) referenced from pages.o(.constdata)
 <LI><a href="#[df]">parser_on_name</a> from func_call_parser.o(i.parser_on_name) referenced from func_call_parser.o(i.func_call_parse)
 <LI><a href="#[194]">parser_on_name</a> from widget_animator_factory.o(i.parser_on_name) referenced from widget_animator_factory.o(i.widget_animator_parser_parse)
 <LI><a href="#[e0]">parser_on_param</a> from func_call_parser.o(i.parser_on_param) referenced from func_call_parser.o(i.func_call_parse)
 <LI><a href="#[195]">parser_on_param</a> from widget_animator_factory.o(i.parser_on_param) referenced from widget_animator_factory.o(i.widget_animator_parser_parse)
 <LI><a href="#[c9]">pointer_compare</a> from utils.o(i.pointer_compare) referenced from darray.o(i.darray_init)
 <LI><a href="#[c9]">pointer_compare</a> from utils.o(i.pointer_compare) referenced from slist.o(i.slist_init)
 <LI><a href="#[217]">popup_create</a> from popup.o(i.popup_create) referenced 2 times from popup.o(.constdata)
 <LI><a href="#[218]">popup_get_prop</a> from popup.o(i.popup_get_prop) referenced from popup.o(.constdata)
 <LI><a href="#[21a]">popup_on_event</a> from popup.o(i.popup_on_event) referenced from popup.o(.constdata)
 <LI><a href="#[219]">popup_set_prop</a> from popup.o(i.popup_set_prop) referenced from popup.o(.constdata)
 <LI><a href="#[21c]">progress_bar_create</a> from progress_bar.o(i.progress_bar_create) referenced 2 times from progress_bar.o(.constdata)
 <LI><a href="#[21d]">progress_bar_get_prop</a> from progress_bar.o(i.progress_bar_get_prop) referenced from progress_bar.o(.constdata)
 <LI><a href="#[21f]">progress_bar_on_paint_self</a> from progress_bar.o(i.progress_bar_on_paint_self) referenced from progress_bar.o(.constdata)
 <LI><a href="#[21e]">progress_bar_set_prop</a> from progress_bar.o(i.progress_bar_set_prop) referenced from progress_bar.o(.constdata)
 <LI><a href="#[17e]">progress_circle_create</a> from progress_circle.o(i.progress_circle_create) referenced from progress_circle.o(.constdata)
 <LI><a href="#[17e]">progress_circle_create</a> from progress_circle.o(i.progress_circle_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[337]">progress_circle_get_prop</a> from progress_circle.o(i.progress_circle_get_prop) referenced from progress_circle.o(.constdata)
 <LI><a href="#[33a]">progress_circle_on_destroy</a> from progress_circle.o(i.progress_circle_on_destroy) referenced from progress_circle.o(.constdata)
 <LI><a href="#[339]">progress_circle_on_paint_self</a> from progress_circle.o(i.progress_circle_on_paint_self) referenced from progress_circle.o(.constdata)
 <LI><a href="#[338]">progress_circle_set_prop</a> from progress_circle.o(i.progress_circle_set_prop) referenced from progress_circle.o(.constdata)
 <LI><a href="#[18f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[144]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[1b3]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[126]">resample_row_1</a> from image_loader_stb.o(i.resample_row_1) referenced from image_loader_stb.o(i.load_jpeg_image)
 <LI><a href="#[168]">rich_text_create</a> from rich_text.o(i.rich_text_create) referenced from rich_text.o(.constdata)
 <LI><a href="#[168]">rich_text_create</a> from rich_text.o(i.rich_text_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[304]">rich_text_on_destroy</a> from rich_text.o(i.rich_text_on_destroy) referenced from rich_text.o(.constdata)
 <LI><a href="#[303]">rich_text_on_event</a> from rich_text.o(i.rich_text_on_event) referenced from rich_text.o(.constdata)
 <LI><a href="#[302]">rich_text_on_paint_self</a> from rich_text.o(i.rich_text_on_paint_self) referenced from rich_text.o(.constdata)
 <LI><a href="#[301]">rich_text_set_prop</a> from rich_text.o(i.rich_text_set_prop) referenced from rich_text.o(.constdata)
 <LI><a href="#[220]">row_create</a> from row.o(i.row_create) referenced 2 times from row.o(.constdata)
 <LI><a href="#[16f]">scroll_bar_create</a> from scroll_bar.o(i.scroll_bar_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[170]">scroll_bar_create_desktop</a> from scroll_bar.o(i.scroll_bar_create_desktop) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[316]">scroll_bar_create_desktop_self</a> from scroll_bar.o(i.scroll_bar_create_desktop_self) referenced from scroll_bar.o(.constdata)
 <LI><a href="#[171]">scroll_bar_create_mobile</a> from scroll_bar.o(i.scroll_bar_create_mobile) referenced from scroll_bar.o(.constdata)
 <LI><a href="#[171]">scroll_bar_create_mobile</a> from scroll_bar.o(i.scroll_bar_create_mobile) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[317]">scroll_bar_desktop_on_event</a> from scroll_bar.o(i.scroll_bar_desktop_on_event) referenced from scroll_bar.o(.constdata)
 <LI><a href="#[312]">scroll_bar_get_prop</a> from scroll_bar.o(i.scroll_bar_get_prop) referenced 2 times from scroll_bar.o(.constdata)
 <LI><a href="#[314]">scroll_bar_mobile_on_paint_self</a> from scroll_bar.o(i.scroll_bar_mobile_on_paint_self) referenced from scroll_bar.o(.constdata)
 <LI><a href="#[146]">scroll_bar_on_down_button_clicked</a> from scroll_bar.o(i.scroll_bar_on_down_button_clicked) referenced from scroll_bar.o(i.scroll_bar_create_children)
 <LI><a href="#[147]">scroll_bar_on_drag</a> from scroll_bar.o(i.scroll_bar_on_drag) referenced from scroll_bar.o(i.scroll_bar_create_children)
 <LI><a href="#[315]">scroll_bar_on_layout_children</a> from scroll_bar.o(i.scroll_bar_on_layout_children) referenced 2 times from scroll_bar.o(.constdata)
 <LI><a href="#[148]">scroll_bar_on_opactiy_animate_end</a> from scroll_bar.o(i.scroll_bar_on_opactiy_animate_end) referenced from scroll_bar.o(i.scroll_bar_scroll_to)
 <LI><a href="#[145]">scroll_bar_on_up_button_clicked</a> from scroll_bar.o(i.scroll_bar_on_up_button_clicked) referenced from scroll_bar.o(i.scroll_bar_create_children)
 <LI><a href="#[149]">scroll_bar_on_value_animate_end</a> from scroll_bar.o(i.scroll_bar_on_value_animate_end) referenced from scroll_bar.o(i.scroll_bar_scroll_to)
 <LI><a href="#[313]">scroll_bar_set_prop</a> from scroll_bar.o(i.scroll_bar_set_prop) referenced 2 times from scroll_bar.o(.constdata)
 <LI><a href="#[16b]">scroll_view_create</a> from scroll_view.o(i.scroll_view_create) referenced from scroll_view.o(.constdata)
 <LI><a href="#[16b]">scroll_view_create</a> from scroll_view.o(i.scroll_view_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[31f]">scroll_view_find_target</a> from scroll_view.o(i.scroll_view_find_target) referenced from scroll_view.o(.constdata)
 <LI><a href="#[14a]">scroll_view_fix_end_offset_default</a> from scroll_view.o(i.scroll_view_fix_end_offset_default) referenced from scroll_view.o(i.scroll_view_create)
 <LI><a href="#[318]">scroll_view_get_prop</a> from scroll_view.o(i.scroll_view_get_prop) referenced from scroll_view.o(.constdata)
 <LI><a href="#[31c]">scroll_view_invalidate</a> from scroll_view.o(i.scroll_view_invalidate) referenced from scroll_view.o(.constdata)
 <LI><a href="#[31d]">scroll_view_on_add_child</a> from scroll_view.o(i.scroll_view_on_add_child) referenced from scroll_view.o(.constdata)
 <LI><a href="#[31e]">scroll_view_on_event</a> from scroll_view.o(i.scroll_view_on_event) referenced from scroll_view.o(.constdata)
 <LI><a href="#[31b]">scroll_view_on_layout_children</a> from scroll_view.o(i.scroll_view_on_layout_children) referenced from scroll_view.o(.constdata)
 <LI><a href="#[31a]">scroll_view_on_paint_children</a> from scroll_view.o(i.scroll_view_on_paint_children) referenced from scroll_view.o(.constdata)
 <LI><a href="#[14b]">scroll_view_on_scroll_done</a> from scroll_view.o(i.scroll_view_on_scroll_done) referenced from scroll_view.o(i.scroll_view_scroll_to)
 <LI><a href="#[319]">scroll_view_set_prop</a> from scroll_view.o(i.scroll_view_set_prop) referenced from scroll_view.o(.constdata)
 <LI><a href="#[14f]">self_layouter_default_create</a> from self_layouter_default.o(i.self_layouter_default_create) referenced from self_layouter_builtins.o(i.self_layouter_register_builtins)
 <LI><a href="#[2a9]">self_layouter_default_destroy</a> from self_layouter_default.o(i.self_layouter_default_destroy) referenced from self_layouter_default.o(.constdata)
 <LI><a href="#[2a7]">self_layouter_default_get_param</a> from self_layouter_default.o(i.self_layouter_default_get_param) referenced from self_layouter_default.o(.constdata)
 <LI><a href="#[2a6]">self_layouter_default_layout</a> from self_layouter_default.o(i.self_layouter_default_layout) referenced from self_layouter_default.o(.constdata)
 <LI><a href="#[2a8]">self_layouter_default_set_param</a> from self_layouter_default.o(i.self_layouter_default_set_param) referenced from self_layouter_default.o(.constdata)
 <LI><a href="#[2a5]">self_layouter_default_to_string</a> from self_layouter_default.o(i.self_layouter_default_to_string) referenced from self_layouter_default.o(.constdata)
 <LI><a href="#[150]">self_layouter_menu_create</a> from self_layouter_menu.o(i.self_layouter_menu_create) referenced from self_layouter_builtins.o(i.self_layouter_register_builtins)
 <LI><a href="#[2ea]">self_layouter_menu_destroy</a> from self_layouter_menu.o(i.self_layouter_menu_destroy) referenced from self_layouter_menu.o(.constdata)
 <LI><a href="#[2e8]">self_layouter_menu_get_param</a> from self_layouter_menu.o(i.self_layouter_menu_get_param) referenced from self_layouter_menu.o(.constdata)
 <LI><a href="#[2e7]">self_layouter_menu_layout</a> from self_layouter_menu.o(i.self_layouter_menu_layout) referenced from self_layouter_menu.o(.constdata)
 <LI><a href="#[2e9]">self_layouter_menu_set_param</a> from self_layouter_menu.o(i.self_layouter_menu_set_param) referenced from self_layouter_menu.o(.constdata)
 <LI><a href="#[14c]">self_layouter_parser_on_name</a> from self_layouter_parser.o(i.self_layouter_parser_on_name) referenced from self_layouter_parser.o(i.self_layouter_create)
 <LI><a href="#[14d]">self_layouter_parser_on_param</a> from self_layouter_parser.o(i.self_layouter_parser_on_param) referenced from self_layouter_parser.o(i.self_layouter_create)
 <LI><a href="#[352]">slide_indicator_arc_on_paint_self</a> from slide_indicator.o(i.slide_indicator_arc_on_paint_self) referenced from slide_indicator.o(.constdata)
 <LI><a href="#[173]">slide_indicator_create</a> from slide_indicator.o(i.slide_indicator_create) referenced from slide_indicator.o(.constdata)
 <LI><a href="#[173]">slide_indicator_create</a> from slide_indicator.o(i.slide_indicator_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[174]">slide_indicator_create_arc</a> from slide_indicator.o(i.slide_indicator_create_arc) referenced from slide_indicator.o(.constdata)
 <LI><a href="#[174]">slide_indicator_create_arc</a> from slide_indicator.o(i.slide_indicator_create_arc) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[34d]">slide_indicator_get_prop</a> from slide_indicator.o(i.slide_indicator_get_prop) referenced 2 times from slide_indicator.o(.constdata)
 <LI><a href="#[157]">slide_indicator_on_animate_end</a> from slide_indicator.o(i.slide_indicator_on_animate_end) referenced from slide_indicator.o(i.slide_indicator_set_visible)
 <LI><a href="#[351]">slide_indicator_on_destroy</a> from slide_indicator.o(i.slide_indicator_on_destroy) referenced 2 times from slide_indicator.o(.constdata)
 <LI><a href="#[350]">slide_indicator_on_layout_children</a> from slide_indicator.o(i.slide_indicator_on_layout_children) referenced 2 times from slide_indicator.o(.constdata)
 <LI><a href="#[34f]">slide_indicator_on_paint_self</a> from slide_indicator.o(i.slide_indicator_on_paint_self) referenced from slide_indicator.o(.constdata)
 <LI><a href="#[34e]">slide_indicator_set_prop</a> from slide_indicator.o(i.slide_indicator_set_prop) referenced 2 times from slide_indicator.o(.constdata)
 <LI><a href="#[153]">slide_indicator_target_on_destroy</a> from slide_indicator.o(i.slide_indicator_target_on_destroy) referenced from slide_indicator.o(i.slide_indicator_reset_indicated_widget)
 <LI><a href="#[153]">slide_indicator_target_on_destroy</a> from slide_indicator.o(i.slide_indicator_target_on_destroy) referenced from slide_indicator.o(i.slide_indicator_set_indicated_widget)
 <LI><a href="#[154]">slide_indicator_target_on_pointer_down</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_down) referenced from slide_indicator.o(i.slide_indicator_reset_indicated_widget)
 <LI><a href="#[154]">slide_indicator_target_on_pointer_down</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_down) referenced from slide_indicator.o(i.slide_indicator_set_indicated_widget)
 <LI><a href="#[155]">slide_indicator_target_on_pointer_down_abort</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_down_abort) referenced from slide_indicator.o(i.slide_indicator_reset_indicated_widget)
 <LI><a href="#[155]">slide_indicator_target_on_pointer_down_abort</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_down_abort) referenced from slide_indicator.o(i.slide_indicator_set_indicated_widget)
 <LI><a href="#[156]">slide_indicator_target_on_pointer_up</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_up) referenced from slide_indicator.o(i.slide_indicator_reset_indicated_widget)
 <LI><a href="#[156]">slide_indicator_target_on_pointer_up</a> from slide_indicator.o(i.slide_indicator_target_on_pointer_up) referenced from slide_indicator.o(i.slide_indicator_set_indicated_widget)
 <LI><a href="#[152]">slide_indicator_target_on_value_changed</a> from slide_indicator.o(i.slide_indicator_target_on_value_changed) referenced from slide_indicator.o(i.slide_indicator_reset_indicated_widget)
 <LI><a href="#[152]">slide_indicator_target_on_value_changed</a> from slide_indicator.o(i.slide_indicator_target_on_value_changed) referenced from slide_indicator.o(i.slide_indicator_set_indicated_widget)
 <LI><a href="#[183]">slide_menu_create</a> from slide_menu.o(i.slide_menu_create) referenced from slide_menu.o(.constdata)
 <LI><a href="#[183]">slide_menu_create</a> from slide_menu.o(i.slide_menu_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[34c]">slide_menu_find_target</a> from slide_menu.o(i.slide_menu_find_target) referenced from slide_menu.o(.constdata)
 <LI><a href="#[347]">slide_menu_get_prop</a> from slide_menu.o(i.slide_menu_get_prop) referenced from slide_menu.o(.constdata)
 <LI><a href="#[34a]">slide_menu_layout_children</a> from slide_menu.o(i.slide_menu_layout_children) referenced from slide_menu.o(.constdata)
 <LI><a href="#[34b]">slide_menu_on_event</a> from slide_menu.o(i.slide_menu_on_event) referenced from slide_menu.o(.constdata)
 <LI><a href="#[349]">slide_menu_on_paint_children</a> from slide_menu.o(i.slide_menu_on_paint_children) referenced from slide_menu.o(.constdata)
 <LI><a href="#[158]">slide_menu_on_scroll_done</a> from slide_menu.o(i.slide_menu_on_scroll_done) referenced from slide_menu.o(i.slide_menu_scroll_to)
 <LI><a href="#[348]">slide_menu_set_prop</a> from slide_menu.o(i.slide_menu_set_prop) referenced from slide_menu.o(.constdata)
 <LI><a href="#[172]">slide_view_create</a> from slide_view.o(i.slide_view_create) referenced from slide_view.o(.constdata)
 <LI><a href="#[172]">slide_view_create</a> from slide_view.o(i.slide_view_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[325]">slide_view_find_target</a> from slide_view.o(i.slide_view_find_target) referenced from slide_view.o(.constdata)
 <LI><a href="#[320]">slide_view_get_prop</a> from slide_view.o(i.slide_view_get_prop) referenced from slide_view.o(.constdata)
 <LI><a href="#[326]">slide_view_on_destroy</a> from slide_view.o(i.slide_view_on_destroy) referenced from slide_view.o(.constdata)
 <LI><a href="#[324]">slide_view_on_event</a> from slide_view.o(i.slide_view_on_event) referenced from slide_view.o(.constdata)
 <LI><a href="#[323]">slide_view_on_paint_children</a> from slide_view.o(i.slide_view_on_paint_children) referenced from slide_view.o(.constdata)
 <LI><a href="#[322]">slide_view_on_paint_self</a> from slide_view.o(i.slide_view_on_paint_self) referenced from slide_view.o(.constdata)
 <LI><a href="#[159]">slide_view_on_scroll_done</a> from slide_view.o(i.slide_view_on_scroll_done) referenced from slide_view.o(i.slide_view_on_pointer_up)
 <LI><a href="#[159]">slide_view_on_scroll_done</a> from slide_view.o(i.slide_view_on_scroll_done) referenced from slide_view.o(i.slide_view_on_timer_next)
 <LI><a href="#[15a]">slide_view_on_timer_next</a> from slide_view.o(i.slide_view_on_timer_next) referenced from slide_view.o(i.slide_view_set_auto_play)
 <LI><a href="#[321]">slide_view_set_prop</a> from slide_view.o(i.slide_view_set_prop) referenced from slide_view.o(.constdata)
 <LI><a href="#[221]">slider_create</a> from slider.o(i.slider_create) referenced 2 times from slider.o(.constdata)
 <LI><a href="#[222]">slider_get_prop</a> from slider.o(i.slider_get_prop) referenced from slider.o(.constdata)
 <LI><a href="#[225]">slider_on_event</a> from slider.o(i.slider_on_event) referenced from slider.o(.constdata)
 <LI><a href="#[224]">slider_on_paint_self</a> from slider.o(i.slider_on_paint_self) referenced from slider.o(.constdata)
 <LI><a href="#[223]">slider_set_prop</a> from slider.o(i.slider_set_prop) referenced from slider.o(.constdata)
 <LI><a href="#[23f]">spin_box_create</a> from spin_box.o(i.spin_box_create) referenced from widget_factory.o(.constdata)
 <LI><a href="#[226]">spin_box_create_self</a> from spin_box.o(i.spin_box_create_self) referenced from spin_box.o(.constdata)
 <LI><a href="#[12a]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[15f]">stbi__YCbCr_to_RGB_row</a> from image_loader_stb.o(i.stbi__YCbCr_to_RGB_row) referenced from image_loader_stb.o(i.stbi__setup_jpeg)
 <LI><a href="#[15e]">stbi__idct_block</a> from image_loader_stb.o(i.stbi__idct_block) referenced from image_loader_stb.o(i.stbi__setup_jpeg)
 <LI><a href="#[129]">stbi__resample_row_generic</a> from image_loader_stb.o(i.stbi__resample_row_generic) referenced from image_loader_stb.o(i.load_jpeg_image)
 <LI><a href="#[128]">stbi__resample_row_h_2</a> from image_loader_stb.o(i.stbi__resample_row_h_2) referenced from image_loader_stb.o(i.load_jpeg_image)
 <LI><a href="#[160]">stbi__resample_row_hv_2</a> from image_loader_stb.o(i.stbi__resample_row_hv_2) referenced from image_loader_stb.o(i.stbi__setup_jpeg)
 <LI><a href="#[127]">stbi__resample_row_v_2</a> from image_loader_stb.o(i.stbi__resample_row_v_2) referenced from image_loader_stb.o(i.load_jpeg_image)
 <LI><a href="#[264]">style_const_destroy</a> from style_const.o(i.style_const_destroy) referenced from style_const.o(.constdata)
 <LI><a href="#[262]">style_const_get_color</a> from style_const.o(i.style_const_get_color) referenced from style_const.o(.constdata)
 <LI><a href="#[260]">style_const_get_int</a> from style_const.o(i.style_const_get_int) referenced from style_const.o(.constdata)
 <LI><a href="#[261]">style_const_get_str</a> from style_const.o(i.style_const_get_str) referenced from style_const.o(.constdata)
 <LI><a href="#[25f]">style_const_is_valid</a> from style_const.o(i.style_const_is_valid) referenced from style_const.o(.constdata)
 <LI><a href="#[263]">style_const_notify_widget_state_changed</a> from style_const.o(i.style_const_notify_widget_state_changed) referenced from style_const.o(.constdata)
 <LI><a href="#[2e6]">style_factory_create_style_mutable</a> from style_mutable.o(i.style_factory_create_style_mutable) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e5]">style_mutable_destroy</a> from style_mutable.o(i.style_mutable_destroy) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e2]">style_mutable_get_color</a> from style_mutable.o(i.style_mutable_get_color) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e0]">style_mutable_get_int</a> from style_mutable.o(i.style_mutable_get_int) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e1]">style_mutable_get_str</a> from style_mutable.o(i.style_mutable_get_str) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2df]">style_mutable_is_valid</a> from style_mutable.o(i.style_mutable_is_valid) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e3]">style_mutable_notify_widget_state_changed</a> from style_mutable.o(i.style_mutable_notify_widget_state_changed) referenced from style_mutable.o(.constdata)
 <LI><a href="#[2e4]">style_mutable_set_value</a> from style_mutable.o(i.style_mutable_set_value) referenced from style_mutable.o(.constdata)
 <LI><a href="#[17f]">svg_image_create</a> from svg_image.o(i.svg_image_create) referenced from svg_image.o(.constdata)
 <LI><a href="#[17f]">svg_image_create</a> from svg_image.o(i.svg_image_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[340]">svg_image_on_destroy</a> from svg_image.o(i.svg_image_on_destroy) referenced from svg_image.o(.constdata)
 <LI><a href="#[33f]">svg_image_on_paint_self</a> from svg_image.o(i.svg_image_on_paint_self) referenced from svg_image.o(.constdata)
 <LI><a href="#[17c]">switch_create</a> from switch.o(i.switch_create) referenced from switch.o(.constdata)
 <LI><a href="#[17c]">switch_create</a> from switch.o(i.switch_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[327]">switch_get_prop</a> from switch.o(i.switch_get_prop) referenced from switch.o(.constdata)
 <LI><a href="#[32a]">switch_on_event</a> from switch.o(i.switch_on_event) referenced from switch.o(.constdata)
 <LI><a href="#[329]">switch_on_paint_background</a> from switch.o(i.switch_on_paint_background) referenced from switch.o(.constdata)
 <LI><a href="#[161]">switch_on_scroll_done</a> from switch.o(i.switch_on_scroll_done) referenced from switch.o(i.switch_scroll_to)
 <LI><a href="#[328]">switch_set_prop</a> from switch.o(i.switch_set_prop) referenced from switch.o(.constdata)
 <LI><a href="#[242]">system_bar_create</a> from system_bar.o(i.system_bar_create) referenced 2 times from widget_factory.o(.constdata)
 <LI><a href="#[29e]">system_bar_on_destroy</a> from system_bar.o(i.system_bar_on_destroy) referenced from system_bar.o(.constdata)
 <LI><a href="#[29d]">system_bar_on_event</a> from system_bar.o(i.system_bar_on_event) referenced from system_bar.o(.constdata)
 <LI><a href="#[163]">system_bar_on_request_close_window</a> from system_bar.o(i.system_bar_on_request_close_window) referenced from system_bar.o(i.system_bar_on_event)
 <LI><a href="#[162]">system_bar_on_top_window_changed</a> from system_bar.o(i.system_bar_on_top_window_changed) referenced from system_bar.o(i.system_bar_create)
 <LI><a href="#[228]">system_info_get_prop</a> from system_info.o(i.system_info_get_prop) referenced from system_info.o(.constdata)
 <LI><a href="#[227]">system_info_on_destroy</a> from system_info.o(i.system_info_on_destroy) referenced from system_info.o(.constdata)
 <LI><a href="#[229]">tab_button_create</a> from tab_button.o(i.tab_button_create) referenced 2 times from tab_button.o(.constdata)
 <LI><a href="#[22a]">tab_button_get_prop</a> from tab_button.o(i.tab_button_get_prop) referenced from tab_button.o(.constdata)
 <LI><a href="#[22f]">tab_button_group_create</a> from tab_button_group.o(i.tab_button_group_create) referenced 2 times from tab_button_group.o(.constdata)
 <LI><a href="#[230]">tab_button_group_get_prop</a> from tab_button_group.o(i.tab_button_group_get_prop) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[237]">tab_button_group_invalidate</a> from tab_button_group.o(i.tab_button_group_invalidate) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[239]">tab_button_group_on_destroy</a> from tab_button_group.o(i.tab_button_group_on_destroy) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[238]">tab_button_group_on_event</a> from tab_button_group.o(i.tab_button_group_on_event) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[236]">tab_button_group_on_layout_children</a> from tab_button_group.o(i.tab_button_group_on_layout_children) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[234]">tab_button_group_on_paint_border</a> from tab_button_group.o(i.tab_button_group_on_paint_border) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[233]">tab_button_group_on_paint_children</a> from tab_button_group.o(i.tab_button_group_on_paint_children) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[235]">tab_button_group_on_paint_end</a> from tab_button_group.o(i.tab_button_group_on_paint_end) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[232]">tab_button_group_on_paint_self</a> from tab_button_group.o(i.tab_button_group_on_paint_self) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[231]">tab_button_group_set_prop</a> from tab_button_group.o(i.tab_button_group_set_prop) referenced from tab_button_group.o(.constdata)
 <LI><a href="#[22e]">tab_button_on_destroy</a> from tab_button.o(i.tab_button_on_destroy) referenced from tab_button.o(.constdata)
 <LI><a href="#[22d]">tab_button_on_event</a> from tab_button.o(i.tab_button_on_event) referenced from tab_button.o(.constdata)
 <LI><a href="#[22c]">tab_button_on_paint_self</a> from tab_button.o(i.tab_button_on_paint_self) referenced from tab_button.o(.constdata)
 <LI><a href="#[22b]">tab_button_set_prop</a> from tab_button.o(i.tab_button_set_prop) referenced from tab_button.o(.constdata)
 <LI><a href="#[164]">tab_button_sync_pages</a> from tab_button.o(i.tab_button_sync_pages) referenced from tab_button.o(i.tab_button_set_value)
 <LI><a href="#[23a]">tab_control_create</a> from tab_control.o(i.tab_control_create) referenced 2 times from tab_control.o(.constdata)
 <LI><a href="#[23b]">tab_control_on_paint_self</a> from tab_control.o(i.tab_control_on_paint_self) referenced from tab_control.o(.constdata)
 <LI><a href="#[17b]">text_selector_create</a> from text_selector.o(i.text_selector_create) referenced from text_selector.o(.constdata)
 <LI><a href="#[17b]">text_selector_create</a> from text_selector.o(i.text_selector_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[32b]">text_selector_get_prop</a> from text_selector.o(i.text_selector_get_prop) referenced from text_selector.o(.constdata)
 <LI><a href="#[32f]">text_selector_on_destroy</a> from text_selector.o(i.text_selector_on_destroy) referenced from text_selector.o(.constdata)
 <LI><a href="#[32e]">text_selector_on_event</a> from text_selector.o(i.text_selector_on_event) referenced from text_selector.o(.constdata)
 <LI><a href="#[32d]">text_selector_on_paint_self</a> from text_selector.o(i.text_selector_on_paint_self) referenced from text_selector.o(.constdata)
 <LI><a href="#[165]">text_selector_on_scroll_done</a> from text_selector.o(i.text_selector_on_scroll_done) referenced from text_selector.o(i.text_selector_scroll_to)
 <LI><a href="#[32c]">text_selector_set_prop</a> from text_selector.o(i.text_selector_set_prop) referenced from text_selector.o(.constdata)
 <LI><a href="#[177]">time_clock_create</a> from time_clock.o(i.time_clock_create) referenced from time_clock.o(.constdata)
 <LI><a href="#[177]">time_clock_create</a> from time_clock.o(i.time_clock_create) referenced from ext_widgets.o(i.tk_ext_widgets_init)
 <LI><a href="#[330]">time_clock_get_prop</a> from time_clock.o(i.time_clock_get_prop) referenced from time_clock.o(.constdata)
 <LI><a href="#[333]">time_clock_on_destroy</a> from time_clock.o(i.time_clock_on_destroy) referenced from time_clock.o(.constdata)
 <LI><a href="#[332]">time_clock_on_paint_self</a> from time_clock.o(i.time_clock_on_paint_self) referenced from time_clock.o(.constdata)
 <LI><a href="#[166]">time_clock_on_timer</a> from time_clock.o(i.time_clock_on_timer) referenced from time_clock.o(i.time_clock_create)
 <LI><a href="#[331]">time_clock_set_prop</a> from time_clock.o(i.time_clock_set_prop) referenced from time_clock.o(.constdata)
 <LI><a href="#[188]">time_now_ms</a> from time_now.o(i.time_now_ms) referenced from awtk_global.o(i.tk_init_internal)
 <LI><a href="#[167]">timer_info_compare</a> from timer_info.o(i.timer_info_compare) referenced from timer_manager.o(i.timer_manager_init)
 <LI><a href="#[2ab]">timer_info_on_destroy</a> from timer_info.o(i.timer_info_on_destroy) referenced from timer_info.o(.constdata)
 <LI><a href="#[151]">ub_get_next_char_utf32</a> from unibreakdef.o(i.ub_get_next_char_utf32) referenced from linebreak.o(i.set_linebreaks_utf32)
 <LI><a href="#[151]">ub_get_next_char_utf32</a> from unibreakdef.o(i.ub_get_next_char_utf32) referenced from wordbreak.o(i.set_wordbreaks_utf32)
 <LI><a href="#[18e]">ui_builder_default_on_end</a> from ui_builder_default.o(i.ui_builder_default_on_end) referenced from ui_builder_default.o(i.ui_builder_default)
 <LI><a href="#[18d]">ui_builder_default_on_widget_end</a> from ui_builder_default.o(i.ui_builder_default_on_widget_end) referenced from ui_builder_default.o(i.ui_builder_default)
 <LI><a href="#[18b]">ui_builder_default_on_widget_prop</a> from ui_builder_default.o(i.ui_builder_default_on_widget_prop) referenced from ui_builder_default.o(i.ui_builder_default)
 <LI><a href="#[18c]">ui_builder_default_on_widget_prop_end</a> from ui_builder_default.o(i.ui_builder_default_on_widget_prop_end) referenced from ui_builder_default.o(i.ui_builder_default)
 <LI><a href="#[18a]">ui_builder_default_on_widget_start</a> from ui_builder_default.o(i.ui_builder_default_on_widget_start) referenced from ui_builder_default.o(i.ui_builder_default)
 <LI><a href="#[25a]">ui_loader_load_default</a> from ui_loader_default.o(i.ui_loader_load_default) referenced from ui_loader_default.o(.constdata)
 <LI><a href="#[1b1]">ui_on_expr</a> from window_open.o(i.ui_on_expr) referenced from window_open.o(i.window_open_with_expr)
 <LI><a href="#[26d]">vgcanvas_nanovg_arc</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[26e]">vgcanvas_nanovg_arc_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[266]">vgcanvas_nanovg_begin_frame</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_frame) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[26a]">vgcanvas_nanovg_begin_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[26f]">vgcanvas_nanovg_bezier_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bezier_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[296]">vgcanvas_nanovg_bind_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bind_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[269]">vgcanvas_nanovg_clear_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clear_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27a]">vgcanvas_nanovg_clip_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clip_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[274]">vgcanvas_nanovg_close_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_close_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[294]">vgcanvas_nanovg_create_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_create_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[298]">vgcanvas_nanovg_destroy</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[295]">vgcanvas_nanovg_destroy_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[284]">vgcanvas_nanovg_draw_image</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_draw_image) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[272]">vgcanvas_nanovg_ellipse</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ellipse) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[293]">vgcanvas_nanovg_end_frame</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_end_frame) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27b]">vgcanvas_nanovg_fill</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[282]">vgcanvas_nanovg_fill_text</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill_text) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[268]">vgcanvas_nanovg_flush</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_flush) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[271]">vgcanvas_nanovg_is_point_in_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_is_point_in_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[26c]">vgcanvas_nanovg_line_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_line_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[283]">vgcanvas_nanovg_measure_text</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_measure_text) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[26b]">vgcanvas_nanovg_move_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_move_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27d]">vgcanvas_nanovg_paint</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_paint) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[270]">vgcanvas_nanovg_quad_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_quad_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[265]">vgcanvas_nanovg_reinit</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reinit) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[267]">vgcanvas_nanovg_reset</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reset) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[292]">vgcanvas_nanovg_restore</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_restore) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[276]">vgcanvas_nanovg_rotate</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rotate) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[273]">vgcanvas_nanovg_rounded_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rounded_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[291]">vgcanvas_nanovg_save</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_save) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[275]">vgcanvas_nanovg_scale</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_scale) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[285]">vgcanvas_nanovg_set_antialias</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_antialias) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[288]">vgcanvas_nanovg_set_fill_color</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_color) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[289]">vgcanvas_nanovg_set_fill_linear_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_linear_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28a]">vgcanvas_nanovg_set_fill_radial_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_radial_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27e]">vgcanvas_nanovg_set_font</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27f]">vgcanvas_nanovg_set_font_size</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font_size) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[286]">vgcanvas_nanovg_set_global_alpha</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_global_alpha) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28f]">vgcanvas_nanovg_set_line_cap</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_cap) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28e]">vgcanvas_nanovg_set_line_join</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_join) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[287]">vgcanvas_nanovg_set_line_width</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_width) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[290]">vgcanvas_nanovg_set_miter_limit</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_miter_limit) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28b]">vgcanvas_nanovg_set_stroke_color</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_color) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28c]">vgcanvas_nanovg_set_stroke_linear_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_linear_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[28d]">vgcanvas_nanovg_set_stroke_radial_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_radial_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[280]">vgcanvas_nanovg_set_text_align</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_align) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[281]">vgcanvas_nanovg_set_text_baseline</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_baseline) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[279]">vgcanvas_nanovg_set_transform</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_transform) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[27c]">vgcanvas_nanovg_stroke</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_stroke) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[278]">vgcanvas_nanovg_transform</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_transform) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[277]">vgcanvas_nanovg_translate</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_translate) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[297]">vgcanvas_nanovg_unbind_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_unbind_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[23c]">view_create</a> from view.o(i.view_create) referenced 2 times from view.o(.constdata)
 <LI><a href="#[193]">widget_animator_manager_on_timer</a> from widget_animator_manager.o(i.widget_animator_manager_on_timer) referenced from widget_animator_manager.o(i.widget_animator_manager_init)
 <LI><a href="#[192]">widget_animator_on_widget_destroy</a> from widget_animator.o(i.widget_animator_on_widget_destroy) referenced from widget_animator.o(i.widget_animator_init)
 <LI><a href="#[196]">widget_animator_prop2_update</a> from widget_animator_prop2.o(i.widget_animator_prop2_update) referenced from widget_animator_prop2.o(i.widget_animator_prop2_create)
 <LI><a href="#[197]">widget_animator_prop_update</a> from widget_animator_prop.o(i.widget_animator_prop_update) referenced from widget_animator_prop.o(i.widget_animator_prop_create)
 <LI><a href="#[198]">widget_animator_scroll_update</a> from widget_animator_scroll.o(i.widget_animator_scroll_update) referenced from widget_animator_scroll.o(i.widget_animator_scroll_create)
 <LI><a href="#[19d]">widget_apply_tr_text_before_paint</a> from widget.o(i.widget_apply_tr_text_before_paint) referenced from widget.o(i.widget_set_tr_text)
 <LI><a href="#[199]">widget_destroy_in_idle</a> from widget.o(i.widget_destroy_in_idle) referenced from widget.o(i.widget_destroy_async)
 <LI><a href="#[24e]">widget_find_target_default</a> from widget_vtable.o(i.widget_find_target_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[244]">widget_get_prop_default</a> from widget_vtable.o(i.widget_get_prop_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[24c]">widget_invalidate_default</a> from widget_vtable.o(i.widget_invalidate_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[24f]">widget_on_destroy_default</a> from widget_vtable.o(i.widget_on_destroy_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[24d]">widget_on_event_default</a> from widget_vtable.o(i.widget_on_event_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[247]">widget_on_keydown_default</a> from widget_vtable.o(i.widget_on_keydown_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[246]">widget_on_keyup_default</a> from widget_vtable.o(i.widget_on_keyup_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[248]">widget_on_paint_children_default</a> from widget_vtable.o(i.widget_on_paint_children_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[214]">widget_on_paint_null</a> from widget_vtable.o(i.widget_on_paint_null) referenced 8 times from pages.o(.constdata)
 <LI><a href="#[1ba]">widget_on_paint_self_default</a> from widget_vtable.o(i.widget_on_paint_self_default) referenced 3 times from button.o(.constdata)
 <LI><a href="#[249]">widget_on_pointer_down_default</a> from widget_vtable.o(i.widget_on_pointer_down_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[24a]">widget_on_pointer_move_default</a> from widget_vtable.o(i.widget_on_pointer_move_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[24b]">widget_on_pointer_up_default</a> from widget_vtable.o(i.widget_on_pointer_up_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[19b]">widget_on_visit_focusable</a> from widget.o(i.widget_on_visit_focusable) referenced from widget.o(i.widget_get_all_focusable_widgets_in_window)
 <LI><a href="#[19b]">widget_on_visit_focusable</a> from widget.o(i.widget_on_visit_focusable) referenced from widget.o(i.widget_get_first_focusable_widget_in_window)
 <LI><a href="#[19b]">widget_on_visit_focusable</a> from widget.o(i.widget_on_visit_focusable) referenced from widget.o(i.widget_on_visit_focusable)
 <LI><a href="#[19c]">widget_pool_real_destroy_widget</a> from widget_pool.o(i.widget_pool_real_destroy_widget) referenced from widget_pool.o(i.widget_pool_put)
 <LI><a href="#[190]">widget_remove_idle_on_destroy</a> from widget.o(i.widget_remove_idle_on_destroy) referenced from widget.o(i.widget_add_idle)
 <LI><a href="#[191]">widget_remove_timer_on_destroy</a> from widget.o(i.widget_remove_timer_on_destroy) referenced from widget.o(i.widget_add_timer)
 <LI><a href="#[245]">widget_set_prop_default</a> from widget_vtable.o(i.widget_set_prop_default) referenced from widget_vtable.o(.constdata)
 <LI><a href="#[1a2]">window_animator_center_scale_create</a> from window_animator_center_scale.o(i.window_animator_center_scale_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2ce]">window_animator_center_scale_draw_curr</a> from window_animator_center_scale.o(i.window_animator_center_scale_draw_curr) referenced from window_animator_center_scale.o(.constdata)
 <LI><a href="#[2cc]">window_animator_center_scale_update_percent</a> from window_animator_center_scale.o(i.window_animator_center_scale_update_percent) referenced from window_animator_center_scale.o(.constdata)
 <LI><a href="#[1a1]">window_animator_fade_create</a> from window_animator_fade.o(i.window_animator_fade_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2cf]">window_animator_fade_draw_curr</a> from window_animator_fade.o(i.window_animator_fade_draw_curr) referenced from window_animator_fade.o(.constdata)
 <LI><a href="#[19f]">window_animator_htranslate_create</a> from window_animator_htranslate.o(i.window_animator_htranslate_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2d2]">window_animator_htranslate_draw_curr</a> from window_animator_htranslate.o(i.window_animator_htranslate_draw_curr) referenced from window_animator_htranslate.o(.constdata)
 <LI><a href="#[2d1]">window_animator_htranslate_draw_prev</a> from window_animator_htranslate.o(i.window_animator_htranslate_draw_prev) referenced from window_animator_htranslate.o(.constdata)
 <LI><a href="#[2d0]">window_animator_htranslate_update_percent</a> from window_animator_htranslate.o(i.window_animator_htranslate_update_percent) referenced from window_animator_htranslate.o(.constdata)
 <LI><a href="#[2cd]">window_animator_overlap_default_draw_prev</a> from window_animator.o(i.window_animator_overlap_default_draw_prev) referenced 4 times from window_animator_center_scale.o(.constdata)
 <LI><a href="#[1a3]">window_animator_popdown_create</a> from window_animator_popdown.o(i.window_animator_popdown_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[1a4]">window_animator_popup_create</a> from window_animator_popup.o(i.window_animator_popup_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[1a6]">window_animator_slide_down_create</a> from window_animator_slide_down.o(i.window_animator_slide_down_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2d6]">window_animator_slide_draw_prev</a> from window_animator_slide.o(i.window_animator_slide_draw_prev) referenced 4 times from window_animator_slide_down.o(.constdata)
 <LI><a href="#[2d5]">window_animator_slide_init</a> from window_animator_slide.o(i.window_animator_slide_init) referenced 4 times from window_animator_slide_down.o(.constdata)
 <LI><a href="#[1a7]">window_animator_slide_left_create</a> from window_animator_slide_left.o(i.window_animator_slide_left_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[1a8]">window_animator_slide_right_create</a> from window_animator_slide_right.o(i.window_animator_slide_right_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[1a5]">window_animator_slide_up_create</a> from window_animator_slide_up.o(i.window_animator_slide_up_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2d3]">window_animator_to_bottom_draw_curr</a> from window_animator_common.o(i.window_animator_to_bottom_draw_curr) referenced 2 times from window_animator_popdown.o(.constdata)
 <LI><a href="#[2d7]">window_animator_to_left_draw_curr</a> from window_animator_common.o(i.window_animator_to_left_draw_curr) referenced from window_animator_slide_left.o(.constdata)
 <LI><a href="#[2d8]">window_animator_to_right_draw_curr</a> from window_animator_common.o(i.window_animator_to_right_draw_curr) referenced from window_animator_slide_right.o(.constdata)
 <LI><a href="#[2d4]">window_animator_to_top_draw_curr</a> from window_animator_common.o(i.window_animator_to_top_draw_curr) referenced 2 times from window_animator_popup.o(.constdata)
 <LI><a href="#[1a0]">window_animator_vtranslate_create</a> from window_animator_vtranslate.o(i.window_animator_vtranslate_create) referenced from window_animator_builtins.o(i.window_animator_register_builtins)
 <LI><a href="#[2db]">window_animator_vtranslate_draw_curr</a> from window_animator_vtranslate.o(i.window_animator_vtranslate_draw_curr) referenced from window_animator_vtranslate.o(.constdata)
 <LI><a href="#[2da]">window_animator_vtranslate_draw_prev</a> from window_animator_vtranslate.o(i.window_animator_vtranslate_draw_prev) referenced from window_animator_vtranslate.o(.constdata)
 <LI><a href="#[2d9]">window_animator_vtranslate_update_percent</a> from window_animator_vtranslate.o(i.window_animator_vtranslate_update_percent) referenced from window_animator_vtranslate.o(.constdata)
 <LI><a href="#[25b]">window_base_get_prop</a> from window_base.o(i.window_base_get_prop) referenced 4 times from calibration_win.o(.constdata)
 <LI><a href="#[21b]">window_base_on_destroy</a> from window_base.o(i.window_base_on_destroy) referenced 3 times from popup.o(.constdata)
 <LI><a href="#[1dd]">window_base_on_event</a> from window_base.o(i.window_base_on_event) referenced 4 times from dialog.o(.constdata)
 <LI><a href="#[1da]">window_base_on_paint_begin</a> from window_base.o(i.window_base_on_paint_begin) referenced 7 times from dialog.o(.constdata)
 <LI><a href="#[1db]">window_base_on_paint_end</a> from window_base.o(i.window_base_on_paint_end) referenced 7 times from dialog.o(.constdata)
 <LI><a href="#[1d9]">window_base_on_paint_self</a> from window_base.o(i.window_base_on_paint_self) referenced 6 times from dialog.o(.constdata)
 <LI><a href="#[25c]">window_base_set_prop</a> from window_base.o(i.window_base_set_prop) referenced 4 times from calibration_win.o(.constdata)
 <LI><a href="#[23e]">window_create</a> from window.o(i.window_create) referenced 2 times from widget_factory.o(.constdata)
 <LI><a href="#[250]">window_get_prop</a> from window.o(i.window_get_prop) referenced from window.o(.constdata)
 <LI><a href="#[1ac]">window_manager_check_if_need_open_animation</a> from window_manager.o(i.window_manager_check_if_need_open_animation) referenced from window_manager.o(i.window_manager_do_open_window)
 <LI><a href="#[257]">window_manager_find_target</a> from window_manager.o(i.window_manager_find_target) referenced from window_manager.o(.constdata)
 <LI><a href="#[252]">window_manager_get_prop</a> from window_manager.o(i.window_manager_get_prop) referenced from window_manager.o(.constdata)
 <LI><a href="#[1ab]">window_manager_idle_destroy_window</a> from window_manager.o(i.window_manager_idle_destroy_window) referenced from window_manager.o(i.window_manager_close_window)
 <LI><a href="#[1ad]">window_manager_idle_dispatch_window_open</a> from window_manager.o(i.window_manager_idle_dispatch_window_open) referenced from window_manager.o(i.window_manager_do_open_window)
 <LI><a href="#[255]">window_manager_invalidate</a> from window_manager.o(i.window_manager_invalidate) referenced from window_manager.o(.constdata)
 <LI><a href="#[258]">window_manager_on_destroy</a> from window_manager.o(i.window_manager_on_destroy) referenced from window_manager.o(.constdata)
 <LI><a href="#[254]">window_manager_on_paint_children</a> from window_manager.o(i.window_manager_on_paint_children) referenced from window_manager.o(.constdata)
 <LI><a href="#[253]">window_manager_set_prop</a> from window_manager.o(i.window_manager_set_prop) referenced from window_manager.o(.constdata)
 <LI><a href="#[251]">window_set_prop</a> from window.o(i.window_set_prop) referenced from window.o(.constdata)
 <LI><a href="#[1af]">wm_on_destroy_child</a> from window_manager.o(i.wm_on_destroy_child) referenced from window_manager.o(i.window_manager_open_window)
 <LI><a href="#[1ae]">wm_on_locale_changed</a> from window_manager.o(i.wm_on_locale_changed) referenced from window_manager.o(i.window_manager_init)
 <LI><a href="#[256]">wm_on_remove_child</a> from window_manager.o(i.wm_on_remove_child) referenced from window_manager.o(.constdata)
 <LI><a href="#[1b0]">wm_on_screen_saver_timer</a> from window_manager.o(i.wm_on_screen_saver_timer) referenced from window_manager.o(i.window_manager_start_or_reset_screen_saver_timer)
 <LI><a href="#[b5]">xml_rich_text_destroy</a> from rich_text_parser.o(i.xml_rich_text_destroy) referenced from rich_text_parser.o(i.builder_init)
 <LI><a href="#[b2]">xml_rich_text_on_end</a> from rich_text_parser.o(i.xml_rich_text_on_end) referenced from rich_text_parser.o(i.builder_init)
 <LI><a href="#[b4]">xml_rich_text_on_error</a> from rich_text_parser.o(i.xml_rich_text_on_error) referenced from rich_text_parser.o(i.builder_init)
 <LI><a href="#[b1]">xml_rich_text_on_start</a> from rich_text_parser.o(i.xml_rich_text_on_start) referenced from rich_text_parser.o(i.builder_init)
 <LI><a href="#[b3]">xml_rich_text_on_text</a> from rich_text_parser.o(i.xml_rich_text_on_text) referenced from rich_text_parser.o(i.builder_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[381]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fc0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fc1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fc2]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[fc3]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[fc4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[382]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[3cd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[384]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[386]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[388]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[389]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[38a]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[fc5]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[38c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[38e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[38f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[390]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[392]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[394]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[396]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[397]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[398]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[39a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[fc6]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[39c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[39e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[3a0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[3a2]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[fc7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3b1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3a4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[fc8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[fc9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3a6]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[fca]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3a8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[fcb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fcc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3aa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[fcd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fce]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[fcf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fd0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fd1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fd2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3ad]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[fd3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fd4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fd5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fd6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fd7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fd8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fd9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fda]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fdb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3b6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fdc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fdd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[fde]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fdf]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fe0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fe1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fe2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[380]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[fe3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3ae]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[fe4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; GTP_Init_Panel &rArr; GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fe5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[415]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3b5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[fe6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3b7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e09]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e08]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fe7]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[958]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_int
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_double
</UL>

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[414]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3ba]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
<LI><a href="#[e0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_on_text
<LI><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_set_param
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wclass
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[3bc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[fe8]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
</UL>

<P><STRONG><a name="[3bb]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3bd]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_lower
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_shift_key
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tolower
</UL>

<P><STRONG><a name="[3be]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_name_fix
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_shift_key
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_toupper
</UL>

<P><STRONG><a name="[3bf]"></a>iswspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iswspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iswspace &rArr; _iswspace &rArr; _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iswspace
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_boundary
</UL>

<P><STRONG><a name="[3c1]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
</UL>

<P><STRONG><a name="[3c4]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_str
</UL>

<P><STRONG><a name="[3c6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3c7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3c5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[38d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3cb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[3ce]"></a>vsscanf</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_sscanf
</UL>

<P><STRONG><a name="[3d0]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[cdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strtol
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[3d3]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3a7]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[3d4]"></a>qsort</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
</UL>

<P><STRONG><a name="[9b6]"></a>bsearch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsearchnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_name_to_value
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_one
<LI><a href="#[d24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_to_utf8
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_normal
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_widget_start
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode_slowpath
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__shiftsigned
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_and_postprocess_8bit
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_huff_decode
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__fill_bits
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__extend_receive
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__de_iphone
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_transparency16
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_transparency
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bit_reverse
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_shape_size
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_path_size
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
<LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__handle_clipped_edge
<LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_get_param
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_get_param
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_check
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_get_param
<LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_create
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brks_to
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lb_result_lookup
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_default
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ub_get_next_char_utf32
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_get_param
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::LpiCache()
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_instance()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_spl_start_id()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_mtrx_nd(ime_pinyin::MatrixNode*, ime_pinyin::LmaPsbItem*, unsigned, unsigned short, unsigned)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create
</UL>

<P><STRONG><a name="[fe9]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[71b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_one
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_trim_right
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[d11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_skip_separator
<LI><a href="#[d12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_skip_non_separator
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create_animator
<LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_and_close
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_set_param
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_set_param
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
</UL>

<P><STRONG><a name="[601]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_rgba
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[c4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_count_sub_str
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_set_param
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_get_param
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_set_param
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_get_param
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
</UL>

<P><STRONG><a name="[ab3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_start_with
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_lb_class
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[912]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
</UL>

<P><STRONG><a name="[b16]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_y
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_x
</UL>

<P><STRONG><a name="[50f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_string
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_string
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_start_with
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_rgba
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_hex
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_name_fix
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
<LI><a href="#[c4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_count_sub_str
<LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_start_with
<LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init_ex
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_parser_parse
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set_text
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_toupper
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tolower
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_strlen
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_text
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_lb_class
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_value_is_anchor_px
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_image_name
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[87d]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_start_with
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_decode_xml_entity_with_len
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_lb_class
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lb_prop_lang
</UL>

<P><STRONG><a name="[3dc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_binary
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_binary
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_rgba8888
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fread
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_with_len
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_wstrdup
<LI><a href="#[d0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
<LI><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_insert
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append_with_len
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__vertical_flip
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__getn
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_str
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3d9]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[fea]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b83]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_remove
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_undo
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_redo
</UL>

<P><STRONG><a name="[3db]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[feb]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_post_pointer_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_send
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_recv
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_lookup
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_set_bg
<LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_before_children
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_before_children
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_before_children
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_before_children
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_before_children
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_leave_event
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_ins_sort
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_insert_prop_at
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_clean_invalid_props
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyReverse
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[fec]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fed]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fee]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b84]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_undo
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_redo
</UL>

<P><STRONG><a name="[fef]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3dd]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[ff0]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__build_huffman
</UL>

<P><STRONG><a name="[3e4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_init
<LI><a href="#[ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_image_name
</UL>

<P><STRONG><a name="[3e1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3e0]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[45b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_clear_cache
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_reset
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_init
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_init
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_create
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_type_find
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_item_destroy
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_lookup
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_deinit
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
<LI><a href="#[d35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_init
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watoi
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watof
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_dialog_highlighter
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
<LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_open_destroy
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create_animator
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zbuild_huffman
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_init
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_parser_parse
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_info_init_dummy
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_to_string
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_destroy_widget
<LI><a href="#[db5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_create_widget
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_init
<LI><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_init_dummy
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_create
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_init
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
<LI><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_state
<LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_notify
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_create
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builder_init
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_destroy
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_destroy
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_destroy
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__deleteTexture(AGGENVGcontext*, int)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_unload_image
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[ff1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ff2]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3e3]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_locale
</UL>

<P><STRONG><a name="[510]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_prop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop_default_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_find_in_cache
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_prop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_prop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_get_prop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_color
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_prop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_get_prop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_hook_button
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_set_prop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_get_prop
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_set_prop
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_on_add_child
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_get_prop
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_prop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_get_prop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_cache_cmp_name
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_prop
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_prop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_get_prop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_set_prop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_get_prop
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active_by_name
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_prop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_get_prop
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_table_lookup
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_find_style
<LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_str
<LI><a href="#[c52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_int
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_prop
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_prop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_equal
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_cmp
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_prop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_prop
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_system_bar
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_popup
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_normal_window
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_prop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get_prop
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_find_builtin_creator
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creator_item_cmp
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[d93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_child
<LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_child
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_all
<LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_all
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animator_is_equal
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_name
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_match
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_remove_prop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_get_prop
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_check
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_variable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_func
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_set
<LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creator_item_cmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creator_item_cmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creator_item_cmp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creator_item_cmp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_language
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_get_prop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_get_prop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_set_prop
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_add_child
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_get_prop
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_set_prop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_add_child
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_get_prop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_end
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_prop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_get_prop
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_get_prop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_get_prop
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prop
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap_with_alpha
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_prop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_get_prop
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_value_is_anchor_px
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_get_prop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_get_prop
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_add_child
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::compare_spl(const void*, const void*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_prop
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_set_active_page
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_prop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_get_prop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_prop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_hook_children
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_get_prop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_type
</UL>

<P><STRONG><a name="[ff3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ff4]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ff5]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[3a9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[3d2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ff6]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ff7]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[3e6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[3c0]"></a>_iswspace</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _iswspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _iswspace &rArr; _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wclass
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iswspace
</UL>

<P><STRONG><a name="[3c8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[3ca]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[383]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[3c2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[3c3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[86]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[3e8]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[39d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[39f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3e9]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[395]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[3ec]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[391]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[399]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[3ed]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[393]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[39b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[385]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[3ee]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3f0]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[409]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3cf]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[87]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3d1]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3f4]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[3f5]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3f7]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3f9]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3d8]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[3fb]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[3d7]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[3fe]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[3b8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ff8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ff9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3e7]"></a>_wclass</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wclass_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iswspace
</UL>

<P><STRONG><a name="[ffa]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[407]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[408]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[3a1]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[3a3]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[3ef]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3f1]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[40d]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[3f8]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[3f6]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[3ea]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[3fd]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[3fa]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[3fc]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[ffb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ffc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ffd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[406]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[400]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[412]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[411]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[416]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[fbf]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[417]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[ffe]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41a]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[419]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[41d]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[41b]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[41c]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[402]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40c]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[403]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40b]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[41e]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[41f]"></a>BSP_QSPI_EnableMemoryMappedMode</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, qspi.o(i.BSP_QSPI_EnableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_QSPI_EnableMemoryMappedMode &rArr; HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[421]"></a>BSP_QSPI_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, qspi.o(i.BSP_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_QSPI_Init &rArr; QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[423]"></a>BSP_QSPI_MspInit</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, qspi.o(i.BSP_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_QSPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[491]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[42d]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_SD_GetCardInfo &rArr; BSP_SD_GetCardInfoEx
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[42e]"></a>BSP_SD_GetCardInfoEx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_GetCardInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfoEx
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[430]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_GetCardState &rArr; BSP_SD_GetCardStateEx &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardStateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[431]"></a>BSP_SD_GetCardStateEx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_GetCardStateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_GetCardStateEx &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[433]"></a>BSP_SD_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_SD_Init &rArr; BSP_SD_InitEx &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[434]"></a>BSP_SD_InitEx</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_InitEx &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetectedEx
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[435]"></a>BSP_SD_IsDetectedEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdmmc_sd.o(i.BSP_SD_IsDetectedEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetectedEx
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_InitEx
</UL>

<P><STRONG><a name="[436]"></a>BSP_SD_MspInit</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, sdmmc_sd.o(i.BSP_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_SD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_InitEx
</UL>

<P><STRONG><a name="[43c]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sdmmc_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; BSP_SD_ReadBlocks_DMAEx &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[43d]"></a>BSP_SD_ReadBlocks_DMAEx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sdmmc_sd.o(i.BSP_SD_ReadBlocks_DMAEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_ReadBlocks_DMAEx &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[43f]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_diskio_dma_rtos.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[441]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sdmmc_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; BSP_SD_WriteBlocks_DMAEx &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[442]"></a>BSP_SD_WriteBlocks_DMAEx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sdmmc_sd.o(i.BSP_SD_WriteBlocks_DMAEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_WriteBlocks_DMAEx &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[444]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_diskio_dma_rtos.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[445]"></a>Cache_Enable</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sys.o(i.Cache_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cache_Enable &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[447]"></a>ConfigureTimeForRunTimeStats</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.ConfigureTimeForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ConfigureTimeForRunTimeStats &rArr; TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EXTI9_5_IRQHandler &rArr; GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44b]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init_Mount
</UL>

<P><STRONG><a name="[44c]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[48a]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[48d]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[48f]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[48b]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[44d]"></a>GT911_OnePiontScan</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, bsp_touch_gtxx.o(i.GT911_OnePiontScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GT911_OnePiontScan &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;middle_task
</UL>

<P><STRONG><a name="[453]"></a>GTP_Init_Panel</STRONG> (Thumb, 430 bytes, Stack size 344 bytes, bsp_touch_gtxx.o(i.GTP_Init_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GTP_Init_Panel &rArr; GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQDisable
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[455]"></a>GTP_Read_Version</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bsp_touch_gtxx.o(i.GTP_Read_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[44a]"></a>GTP_TouchProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.GTP_TouchProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[47e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[43a]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[4eb]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[449]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[43b]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[461]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[457]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[42a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[439]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetectedEx
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>

<P><STRONG><a name="[424]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_task
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[45f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms
</UL>

<P><STRONG><a name="[4f8]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[463]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[465]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[468]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Parameter_Config
</UL>

<P><STRONG><a name="[46a]"></a>HAL_LTDC_Init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[46b]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 1304 bytes, Stack size 32 bytes, ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[46c]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
</UL>

<P><STRONG><a name="[46d]"></a>HAL_LTDC_SetWindowSize</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
</UL>

<P><STRONG><a name="[4cd]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
</UL>

<P><STRONG><a name="[4cc]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
</UL>

<P><STRONG><a name="[4ce]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
</UL>

<P><STRONG><a name="[466]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[42c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[42b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[464]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[470]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[47b]"></a>HAL_QSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[471]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[47a]"></a>HAL_QSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[474]"></a>HAL_QSPI_Command</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[422]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[47c]"></a>HAL_QSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[477]"></a>HAL_QSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[476]"></a>HAL_QSPI_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TxCpltCallback
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TimeOutCallback
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_StatusMatchCallback
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_RxCpltCallback
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_FifoThresholdCallback
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_CmdCpltCallback
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>

<P><STRONG><a name="[426]"></a>HAL_QSPI_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_QSPI_Init &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[420]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
</UL>

<P><STRONG><a name="[475]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[480]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[482]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[479]"></a>HAL_QSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[481]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[47d]"></a>HAL_QSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[47f]"></a>HAL_QSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[483]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[478]"></a>HAL_QSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[484]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clk_Set
</UL>

<P><STRONG><a name="[485]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[486]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[487]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[488]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[489]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[48c]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[48e]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Send_Cmd
</UL>

<P><STRONG><a name="[490]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdmmc_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_AbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[438]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_InitEx
</UL>

<P><STRONG><a name="[498]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[4ef]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[42f]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfoEx
</UL>

<P><STRONG><a name="[432]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardStateEx
</UL>

<P><STRONG><a name="[496]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC2_IRQHandler
</UL>

<P><STRONG><a name="[437]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_InitEx
</UL>

<P><STRONG><a name="[49e]"></a>HAL_SD_InitCard</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[49d]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[43e]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMAEx
</UL>

<P><STRONG><a name="[499]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdmmc_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[49a]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdmmc_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[443]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMAEx
</UL>

<P><STRONG><a name="[7b5]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[467]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4b1]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4b0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4b3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4a8]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[4a9]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[4f9]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[4ac]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4ab]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[4ad]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4ae]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4af]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4b2]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[459]"></a>I2C_GTP_IRQDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.I2C_GTP_IRQDisable))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[4bf]"></a>I2C_GTP_IRQEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.I2C_GTP_IRQEnable))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[4b5]"></a>I2C_ReadBytes</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.I2C_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ReadBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[4bd]"></a>I2C_ResetChip</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_i2c_touch.o(i.I2C_ResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_ResetChip &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[454]"></a>I2C_Touch_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.I2C_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Touch_Init &rArr; I2C_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[4c0]"></a>I2C_WriteBytes</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_i2c_touch.o(i.I2C_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[4c1]"></a>LED_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c2]"></a>LTDC_Clear</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ltdc.o(i.LTDC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_Clear &rArr; LTDC_Fill
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4c4]"></a>LTDC_Clk_Set</STRONG> (Thumb, 38 bytes, Stack size 160 bytes, ltdc.o(i.LTDC_Clk_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4c8]"></a>LTDC_Display_Dir</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ltdc.o(i.LTDC_Display_Dir))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4c3]"></a>LTDC_Fill</STRONG> (Thumb, 310 bytes, Stack size 36 bytes, ltdc.o(i.LTDC_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LTDC_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clear
</UL>

<P><STRONG><a name="[4c5]"></a>LTDC_Init</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, ltdc.o(i.LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LTDC_Init &rArr; LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Select_Layer
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Parameter_Config
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Display_Dir
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clk_Set
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c6]"></a>LTDC_Layer_Parameter_Config</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, ltdc.o(i.LTDC_Layer_Parameter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LTDC_Layer_Parameter_Config &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4c7]"></a>LTDC_Layer_Window_Config</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltdc.o(i.LTDC_Layer_Window_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LTDC_Layer_Window_Config &rArr; HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4c9]"></a>LTDC_Select_Layer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltdc.o(i.LTDC_Select_Layer))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[4ca]"></a>MPU_Memory_Protection</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu.o(i.MPU_Memory_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Memory_Protection &rArr; MPU_Set_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4cb]"></a>MPU_Set_Protection</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, mpu.o(i.MPU_Set_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Set_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Memory_Protection
</UL>

<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mpu.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemManage_Handler &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QUADSPI_IRQHandler &rArr; HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SDMMC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SDMMC2_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4d1]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[4d4]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[4a3]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[4d6]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[4d7]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[4d9]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[4a4]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[4a5]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[4db]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[4dc]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[4de]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[4df]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[4e0]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[4e1]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[497]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[4a6]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[4a7]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[4a2]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[4e3]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[4ee]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[4e4]"></a>SDMMC_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[494]"></a>SDMMC_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[4e5]"></a>SDMMC_Init_Mount</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.SDMMC_Init_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SDMMC_Init_Mount &rArr; f_mount &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49f]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[4ed]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[4d2]"></a>SDMMC_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[4f0]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[4e7]"></a>SDRAM_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, sdram.o(i.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e8]"></a>SDRAM_Send_Cmd</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sdram.o(i.SDRAM_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDRAM_Send_Cmd &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[367]"></a>SD_initialize</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; BSP_SD_InitEx &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.constdata)
</UL>
<P><STRONG><a name="[36b]"></a>SD_ioctl</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, sd_diskio_dma_rtos.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo &rArr; BSP_SD_GetCardInfoEx
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.constdata)
</UL>
<P><STRONG><a name="[369]"></a>SD_read</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, sd_diskio_dma_rtos.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_read &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.constdata)
</UL>
<P><STRONG><a name="[368]"></a>SD_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd_diskio_dma_rtos.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; BSP_SD_GetCardStateEx &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.constdata)
</UL>
<P><STRONG><a name="[36a]"></a>SD_write</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, sd_diskio_dma_rtos.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_write &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.constdata)
</UL>
<P><STRONG><a name="[4f5]"></a>Stm32_Clock_Init</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[448]"></a>TIM3_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer.o(i.TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
</UL>

<P><STRONG><a name="[4aa]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>ime_pinyin::compare_spl(const void*, const void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spellingtrie.o(i._ZN10ime_pinyin11compare_splEPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ime_pinyin::compare_spl(const void*, const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie9constructEPKcjjfh)
</UL>
<P><STRONG><a name="[511]"></a>ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)</STRONG> (Thumb, 530 bytes, Stack size 88 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch10extend_dmiEPNS_11DictExtParaEPNS_13DictMatchInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::put_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id(unsigned short) const
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::is_cached(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_instance()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::fill_dmi(ime_pinyin::DictMatchInfo*, unsigned short*, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned char, unsigned char)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>

<P><STRONG><a name="[53a]"></a>ime_pinyin::MatrixSearch::flush_cache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch11flush_cacheEv))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::close()
</UL>

<P><STRONG><a name="[51a]"></a>ime_pinyin::MatrixSearch::is_split_at(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch11is_split_atEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ime_pinyin::MatrixSearch::is_split_at(unsigned short) &rArr; ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>

<P><STRONG><a name="[512]"></a>ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch12extend_dmi_cEPNS_11DictExtParaEPNS_13DictMatchInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id(unsigned short) const
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::fill_dmi(ime_pinyin::DictMatchInfo*, unsigned short*, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned char, unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[51c]"></a>ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool)</STRONG> (Thumb, 1264 bytes, Stack size 40 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch12reset_searchEjbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool) &rArr; ime_pinyin::MatrixSearch::add_char(char) &rArr; ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char(char)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search0()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
</UL>

<P><STRONG><a name="[51f]"></a>ime_pinyin::MatrixSearch::reset_search()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch12reset_searchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ime_pinyin::MatrixSearch::reset_search() &rArr; ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_reset_search
</UL>

<P><STRONG><a name="[8de]"></a>ime_pinyin::MatrixSearch::set_max_lens(unsigned, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch12set_max_lensEjj))
<BR><BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_set_max_lens
</UL>

<P><STRONG><a name="[520]"></a>ime_pinyin::MatrixSearch::free_resource()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch13free_resourceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_pointers_to_null()
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::~MatrixSearch()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::close()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
</UL>

<P><STRONG><a name="[523]"></a>ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned)</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch13get_candidateEjPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned) &rArr; ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool) &rArr; ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; utf16_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncpy
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_get_candidate
</UL>

<P><STRONG><a name="[525]"></a>ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch13get_lemma_strEjPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; utf16_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncpy
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::is_composing_lemma(unsigned)
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::is_system_lemma(unsigned)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::is_user_lemma(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[51d]"></a>ime_pinyin::MatrixSearch::reset_search0()</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch13reset_search0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::init(const char*, const char*)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool)
</UL>

<P><STRONG><a name="[52a]"></a>ime_pinyin::MatrixSearch::alloc_resource()</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch14alloc_resourceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::DictTrie()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::align_to_unsigned(unsigned)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::SpellingParser()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::init(const char*, const char*)
</UL>

<P><STRONG><a name="[530]"></a>ime_pinyin::MatrixSearch::extend_mtrx_nd(ime_pinyin::MatrixNode*, ime_pinyin::LmaPsbItem*, unsigned, unsigned short, unsigned)</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch14extend_mtrx_ndEPNS_10MatrixNodeEPNS_10LmaPsbItemEjtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::extend_mtrx_nd(ime_pinyin::MatrixNode*, ime_pinyin::LmaPsbItem*, unsigned, unsigned short, unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>

<P><STRONG><a name="[524]"></a>ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool)</STRONG> (Thumb, 278 bytes, Stack size 232 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch14get_candidate0EPtjS1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool) &rArr; ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; utf16_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncpy
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_candidates()
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[531]"></a>ime_pinyin::MatrixSearch::add_char_qwerty()</STRONG> (Thumb, 1020 bytes, Stack size 72 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch15add_char_qwertyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::half_to_full(unsigned short, unsigned short*) const
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id(unsigned short) const
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::get_splid_by_str(const char*, unsigned short, bool*)
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_mtrx_nd(ime_pinyin::MatrixNode*, ime_pinyin::LmaPsbItem*, unsigned, unsigned short, unsigned)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::is_split_at(unsigned short)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char(char)
</UL>

<P><STRONG><a name="[534]"></a>ime_pinyin::MatrixSearch::get_spl_start_id()</STRONG> (Thumb, 1046 bytes, Stack size 16 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch16get_spl_start_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::get_spl_start_id() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
</UL>

<P><STRONG><a name="[535]"></a>ime_pinyin::MatrixSearch::prepare_add_char(char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch16prepare_add_charEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ime_pinyin::MatrixSearch::prepare_add_char(char) &rArr; ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char(char)
</UL>

<P><STRONG><a name="[8dc]"></a>ime_pinyin::MatrixSearch::get_candidate_num()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch17get_candidate_numEv))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_search
</UL>

<P><STRONG><a name="[536]"></a>ime_pinyin::MatrixSearch::prepare_candidates()</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch18prepare_candidatesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::prepare_candidates() &rArr; ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
</UL>

<P><STRONG><a name="[522]"></a>ime_pinyin::MatrixSearch::reset_pointers_to_null()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch22reset_pointers_to_nullEv))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::MatrixSearch()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
</UL>

<P><STRONG><a name="[538]"></a>ime_pinyin::MatrixSearch::init(const char*, const char*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch4initEPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ime_pinyin::MatrixSearch::init(const char*, const char*) &rArr; ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
</UL>

<P><STRONG><a name="[539]"></a>ime_pinyin::MatrixSearch::close()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::MatrixSearch::close() &rArr; ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::flush_cache()
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_close_decoder
</UL>

<P><STRONG><a name="[53b]"></a>ime_pinyin::MatrixSearch::search(const char*, unsigned)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch6searchEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::search(const char*, unsigned) &rArr; ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool) &rArr; ime_pinyin::MatrixSearch::add_char(char) &rArr; ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char(char)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_candidates()
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_spl_start_id()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_search
</UL>

<P><STRONG><a name="[51e]"></a>ime_pinyin::MatrixSearch::add_char(char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8add_charEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::add_char(char) &rArr; ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_add_char(char)
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool)
</UL>

<P><STRONG><a name="[516]"></a>ime_pinyin::MatrixSearch::fill_dmi(ime_pinyin::DictMatchInfo*, unsigned short*, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8fill_dmiEPNS_13DictMatchInfoEPtttthbhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::MatrixSearch::fill_dmi(ime_pinyin::DictMatchInfo*, unsigned short*, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[537]"></a>ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)</STRONG> (Thumb, 618 bytes, Stack size 64 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strcmp
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_candidates()
</UL>

<P><STRONG><a name="[53d]"></a>ime_pinyin::MatrixSearch::MatrixSearch()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearchC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::MatrixSearch::MatrixSearch() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_cpinstance()
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_pointers_to_null()
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
</UL>

<P><STRONG><a name="[fff]"></a>ime_pinyin::MatrixSearch::MatrixSearch__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearchC1Ev), UNUSED)

<P><STRONG><a name="[53f]"></a>ime_pinyin::MatrixSearch::~MatrixSearch()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearchD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::MatrixSearch::~MatrixSearch() &rArr; ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_close_decoder
</UL>

<P><STRONG><a name="[1000]"></a>ime_pinyin::MatrixSearch::~MatrixSearch__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, matrixsearch.o(i._ZN10ime_pinyin12MatrixSearchD1Ev), UNUSED)

<P><STRONG><a name="[540]"></a>ime_pinyin::SpellingTrie::get_instance()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie12get_instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::SpellingTrie()
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_cpinstance()
</UL>

<P><STRONG><a name="[542]"></a>ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie13load_spl_trieEP11_rom_file_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*) &rArr; ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fread
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[545]"></a>ime_pinyin::SpellingTrie::szm_enable_ym(bool)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie13szm_enable_ymEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ime_pinyin::SpellingTrie::szm_enable_ym(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_yunmu_char(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::SpellingTrie()
</UL>

<P><STRONG><a name="[53e]"></a>ime_pinyin::SpellingTrie::get_cpinstance()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie14get_cpinstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::DictTrie()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::DictList()
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::SpellingParser()
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::MatrixSearch()
</UL>

<P><STRONG><a name="[547]"></a>ime_pinyin::SpellingTrie::szm_enable_shm(bool)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie14szm_enable_shmEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ime_pinyin::SpellingTrie::szm_enable_shm(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_shengmu_char(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::SpellingTrie()
</UL>

<P><STRONG><a name="[569]"></a>ime_pinyin::SpellingTrie::get_spelling_num()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie16get_spelling_numEv))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
</UL>

<P><STRONG><a name="[551]"></a>ime_pinyin::SpellingTrie::is_same_spl_char(char, char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, splparser.o(i._ZN10ime_pinyin12SpellingTrie16is_same_spl_charEcc))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&)
</UL>

<P><STRONG><a name="[54f]"></a>ime_pinyin::SpellingTrie::is_valid_spl_char(char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, splparser.o(i._ZN10ime_pinyin12SpellingTrie17is_valid_spl_charEc))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>

<P><STRONG><a name="[549]"></a>ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)</STRONG> (Thumb, 1226 bytes, Stack size 96 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie26construct_spellings_subsetEjjjPNS_12SpellingNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*) &rArr;  ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_is_enabled(char) const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_szm_char(char) const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
</UL>

<P><STRONG><a name="[54c]"></a>ime_pinyin::SpellingTrie::build_f2h()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie9build_f2hEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ime_pinyin::SpellingTrie::build_f2h() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
</UL>

<P><STRONG><a name="[544]"></a>ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrie9constructEPKcjjfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::build_f2h()
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)
</UL>

<P><STRONG><a name="[541]"></a>ime_pinyin::SpellingTrie::SpellingTrie()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrieC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ime_pinyin::SpellingTrie::SpellingTrie() &rArr; ime_pinyin::SpellingTrie::szm_enable_shm(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_enable_shm(bool)
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_enable_ym(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_instance()
</UL>

<P><STRONG><a name="[1001]"></a>ime_pinyin::SpellingTrie::SpellingTrie__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, spellingtrie.o(i._ZN10ime_pinyin12SpellingTrieC1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>ime_pinyin::cmp_hanzis_1(const void*, const void*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_1EPKvS1_))
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a4]"></a>ime_pinyin::cmp_hanzis_2(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_2EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_2(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a5]"></a>ime_pinyin::cmp_hanzis_3(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_3EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_3(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a6]"></a>ime_pinyin::cmp_hanzis_4(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_4EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_4(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a7]"></a>ime_pinyin::cmp_hanzis_5(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_5EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_5(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a8]"></a>ime_pinyin::cmp_hanzis_6(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_6EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_6(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[a9]"></a>ime_pinyin::cmp_hanzis_7(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_7EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_7(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[aa]"></a>ime_pinyin::cmp_hanzis_8(const void*, const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin12cmp_hanzis_8EPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ime_pinyin::cmp_hanzis_8(const void*, const void*) &rArr; utf16_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictlist.o(i._ZN10ime_pinyin8DictListC1Ev)
</UL>
<P><STRONG><a name="[528]"></a>ime_pinyin::is_user_lemma(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin13is_user_lemmaEj))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[54e]"></a>ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&)</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, splparser.o(i._ZN10ime_pinyin14SpellingParser14splstr_to_idxsEPKctPtS3_tRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&) &rArr; ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_valid_spl_char(char)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_same_spl_char(char, char)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::get_splid_by_str(const char*, unsigned short, bool*)
</UL>

<P><STRONG><a name="[532]"></a>ime_pinyin::SpellingParser::get_splid_by_str(const char*, unsigned short, bool*)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, splparser.o(i._ZN10ime_pinyin14SpellingParser16get_splid_by_strEPKctPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::SpellingParser::get_splid_by_str(const char*, unsigned short, bool*) &rArr; ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&) &rArr; ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>

<P><STRONG><a name="[51b]"></a>ime_pinyin::SpellingParser::is_valid_to_parse(char)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, splparser.o(i._ZN10ime_pinyin14SpellingParser17is_valid_to_parseEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ime_pinyin::SpellingParser::is_valid_to_parse(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_valid_spl_char(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_add_char(char)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::is_split_at(unsigned short)
</UL>

<P><STRONG><a name="[52d]"></a>ime_pinyin::SpellingParser::SpellingParser()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, splparser.o(i._ZN10ime_pinyin14SpellingParserC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::SpellingParser::SpellingParser() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_cpinstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
</UL>

<P><STRONG><a name="[1002]"></a>ime_pinyin::SpellingParser::SpellingParser__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, splparser.o(i._ZN10ime_pinyin14SpellingParserC1Ev), UNUSED)

<P><STRONG><a name="[527]"></a>ime_pinyin::is_system_lemma(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin15is_system_lemmaEj))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[9e]"></a>ime_pinyin::cmp_lpi_with_psb(const void*, const void*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin16cmp_lpi_with_psbEPKvS1_))
<BR>[Address Reference Count : 2]<UL><LI> matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch10extend_dmiEPNS_11DictExtParaEPNS_13DictMatchInfoE)
<LI> matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
</UL>
<P><STRONG><a name="[52e]"></a>ime_pinyin::align_to_unsigned(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin17align_to_unsignedEj))
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
</UL>

<P><STRONG><a name="[a0]"></a>ime_pinyin::cmp_lpsi_with_str(const void*, const void*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, searchutility.o(i._ZN10ime_pinyin17cmp_lpsi_with_strEPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ime_pinyin::cmp_lpsi_with_str(const void*, const void*) &rArr; utf16_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
</UL>
<P><STRONG><a name="[a1]"></a>ime_pinyin::cmp_lpi_with_hanzi(const void*, const void*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin18cmp_lpi_with_hanziEPKvS1_))
<BR>[Address Reference Count : 1]<UL><LI> matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch8get_lpisEPKtjPNS_10LmaPsbItemEjS2_b)
</UL>
<P><STRONG><a name="[529]"></a>ime_pinyin::is_composing_lemma(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, searchutility.o(i._ZN10ime_pinyin18is_composing_lemmaEj))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[9f]"></a>ime_pinyin::cmp_lpi_with_unified_psb(const void*, const void*)</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, searchutility.o(i._ZN10ime_pinyin24cmp_lpi_with_unified_psbEPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ime_pinyin::cmp_lpi_with_unified_psb(const void*, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> matrixsearch.o(i._ZN10ime_pinyin12MatrixSearch18prepare_candidatesEv)
</UL>
<P><STRONG><a name="[552]"></a>ime_pinyin::NGram::load_ngram(_rom_file_t*)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ngram.o(i._ZN10ime_pinyin5NGram10load_ngramEP11_rom_file_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ime_pinyin::NGram::load_ngram(_rom_file_t*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fread
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[567]"></a>ime_pinyin::NGram::get_uni_psb(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ngram.o(i._ZN10ime_pinyin5NGram11get_uni_psbEj))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*)
</UL>

<P><STRONG><a name="[555]"></a>ime_pinyin::NGram::get_instance()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ngram.o(i._ZN10ime_pinyin5NGram12get_instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::NGram()
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*)
</UL>

<P><STRONG><a name="[556]"></a>ime_pinyin::NGram::NGram()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ngram.o(i._ZN10ime_pinyin5NGramC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
</UL>

<P><STRONG><a name="[1003]"></a>ime_pinyin::NGram::NGram__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ngram.o(i._ZN10ime_pinyin5NGramC1Ev), UNUSED)

<P><STRONG><a name="[517]"></a>ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*))</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mystdlib.o(i._ZN10ime_pinyin7myqsortEPvjjPFiPKvS2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::prepare_candidates()
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[557]"></a>ime_pinyin::DictList::free_resource()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dictlist.o(i._ZN10ime_pinyin8DictList13free_resourceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::~DictList()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::load_list(_rom_file_t*)
</UL>

<P><STRONG><a name="[565]"></a>ime_pinyin::DictList::get_lemma_str(unsigned, unsigned short*, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, dictlist.o(i._ZN10ime_pinyin8DictList13get_lemma_strEjPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ime_pinyin::DictList::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[558]"></a>ime_pinyin::DictList::alloc_resource(unsigned, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dictlist.o(i._ZN10ime_pinyin8DictList14alloc_resourceEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ime_pinyin::DictList::alloc_resource(unsigned, unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::load_list(_rom_file_t*)
</UL>

<P><STRONG><a name="[559]"></a>ime_pinyin::DictList::load_list(_rom_file_t*)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, dictlist.o(i._ZN10ime_pinyin8DictList9load_listEP11_rom_file_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::DictList::load_list(_rom_file_t*) &rArr; ime_pinyin::DictList::alloc_resource(unsigned, unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fread
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::alloc_resource(unsigned, unsigned)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::free_resource()
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[55a]"></a>ime_pinyin::DictList::DictList()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dictlist.o(i._ZN10ime_pinyin8DictListC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::DictList::DictList() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_cpinstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1004]"></a>ime_pinyin::DictList::DictList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dictlist.o(i._ZN10ime_pinyin8DictListC1Ev), UNUSED)

<P><STRONG><a name="[55b]"></a>ime_pinyin::DictList::~DictList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dictlist.o(i._ZN10ime_pinyin8DictListD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ime_pinyin::DictList::~DictList() &rArr; ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::free_resource()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
</UL>

<P><STRONG><a name="[1005]"></a>ime_pinyin::DictList::~DictList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dictlist.o(i._ZN10ime_pinyin8DictListD1Ev), UNUSED)

<P><STRONG><a name="[371]"></a>ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie11extend_dictEtPKNS_11DictExtParaEPNS_10LmaPsbItemEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*) &rArr; ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*) &rArr; ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[55c]"></a>ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie12extend_dict0EtPKNS_11DictExtParaEPNS_10LmaPsbItemEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*) &rArr; ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id_yunmu(unsigned short) const
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::is_cached(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_instance()
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[55d]"></a>ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)</STRONG> (Thumb, 458 bytes, Stack size 104 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie12extend_dict1EtPKNS_11DictExtParaEPNS_10LmaPsbItemEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*) &rArr; ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_homo_idx_buf_offset(const ime_pinyin::LmaNodeGE1*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[55e]"></a>ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)</STRONG> (Thumb, 494 bytes, Stack size 104 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie12extend_dict2EtPKNS_11DictExtParaEPNS_10LmaPsbItemEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*) &rArr; ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_homo_idx_buf_offset(const ime_pinyin::LmaNodeGE1*)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_son_offset(const ime_pinyin::LmaNodeGE1*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[566]"></a>ime_pinyin::DictTrie::get_lemma_id(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie12get_lemma_idEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ime_pinyin::DictTrie::get_lemma_id(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*)
</UL>

<P><STRONG><a name="[564]"></a>ime_pinyin::DictTrie::free_resource(bool)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie13free_resourceEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ime_pinyin::DictTrie::free_resource(bool) &rArr; ime_pinyin::DictList::~DictList() &rArr; ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::~DictList()
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::~DictTrie()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
</UL>

<P><STRONG><a name="[373]"></a>ime_pinyin::DictTrie::get_lemma_str(unsigned, unsigned short*, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie13get_lemma_strEjPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ime_pinyin::DictTrie::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; ime_pinyin::DictList::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::get_lemma_str(unsigned, unsigned short*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[563]"></a>ime_pinyin::DictTrie::get_son_offset(const ime_pinyin::LmaNodeGE1*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie14get_son_offsetEPKNS_10LmaNodeGE1E))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[560]"></a>ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie15fill_lpi_bufferEPNS_10LmaPsbItemEjPNS_10LmaNodeLE0E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, ime_pinyin::LmaNodeLE0*) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lemma_id(unsigned)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_uni_psb(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[562]"></a>ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie15fill_lpi_bufferEPNS_10LmaPsbItemEjjPNS_10LmaNodeGE1Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ime_pinyin::DictTrie::fill_lpi_buffer(ime_pinyin::LmaPsbItem*, unsigned, unsigned, ime_pinyin::LmaNodeGE1*, unsigned short) &rArr; ime_pinyin::NGram::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lemma_id(unsigned)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_uni_psb(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[370]"></a>ime_pinyin::DictTrie::reset_milestones(unsigned short, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie16reset_milestonesEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ime_pinyin::DictTrie::reset_milestones(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::DictTrie()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[561]"></a>ime_pinyin::DictTrie::get_homo_idx_buf_offset(const ime_pinyin::LmaNodeGE1*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie23get_homo_idx_buf_offsetEPKNS_10LmaNodeGE1E))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict2(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict1(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[372]"></a>ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)</STRONG> (Thumb, 1362 bytes, Stack size 1704 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie8get_lpisEPKttPNS_10LmaPsbItemEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_homo_idx_buf_offset(const ime_pinyin::LmaNodeGE1*)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_son_offset(const ime_pinyin::LmaNodeGE1*)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lemma_id(unsigned)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id_yunmu(unsigned short) const
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::half_to_full(unsigned short, unsigned short*) const
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_half_id(unsigned short) const
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_uni_psb(unsigned)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[568]"></a>ime_pinyin::DictTrie::load_dict(_rom_file_t*)</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie9load_dictEP11_rom_file_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::load_dict(_rom_file_t*) &rArr; ime_pinyin::DictTrie::free_resource(bool) &rArr; ime_pinyin::DictList::~DictList() &rArr; ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fread
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_spelling_num()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_instance()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[36f]"></a>ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrie9load_dictEPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned) &rArr; ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*) &rArr; ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fopen
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fclose
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::load_ngram(_rom_file_t*)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_instance()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::DictList()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::load_list(_rom_file_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[52c]"></a>ime_pinyin::DictTrie::DictTrie()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrieC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::reset_milestones(unsigned short, unsigned short)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_cpinstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
</UL>

<P><STRONG><a name="[1006]"></a>ime_pinyin::DictTrie::DictTrie__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrieC1Ev), UNUSED)

<P><STRONG><a name="[36e]"></a>ime_pinyin::DictTrie::~DictTrie__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrieD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ime_pinyin::DictTrie::~DictTrie__deallocating() &rArr; ime_pinyin::DictTrie::~DictTrie() &rArr; ime_pinyin::DictTrie::free_resource(bool) &rArr; ime_pinyin::DictList::~DictList() &rArr; ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::~DictTrie()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[36d]"></a>ime_pinyin::DictTrie::~DictTrie()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrieD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ime_pinyin::DictTrie::~DictTrie() &rArr; ime_pinyin::DictTrie::free_resource(bool) &rArr; ime_pinyin::DictList::~DictList() &rArr; ime_pinyin::DictList::free_resource() &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::~DictTrie__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dicttrie.o(.constdata__ZTVN10ime_pinyin8DictTrieE)
</UL>
<P><STRONG><a name="[1007]"></a>ime_pinyin::DictTrie::~DictTrie__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dicttrie.o(i._ZN10ime_pinyin8DictTrieD1Ev), UNUSED)

<P><STRONG><a name="[513]"></a>ime_pinyin::LpiCache::get_instance()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCache12get_instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::LpiCache::get_instance() &rArr; ime_pinyin::LpiCache::LpiCache() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::LpiCache()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[519]"></a>ime_pinyin::LpiCache::get_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCache9get_cacheEtPNS_10LmaPsbItemEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ime_pinyin::LpiCache::get_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[514]"></a>ime_pinyin::LpiCache::is_cached(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCache9is_cachedEt))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[518]"></a>ime_pinyin::LpiCache::put_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCache9put_cacheEtPNS_10LmaPsbItemEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ime_pinyin::LpiCache::put_cache(unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[56c]"></a>ime_pinyin::LpiCache::LpiCache()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCacheC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::LpiCache::LpiCache() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_instance()
</UL>

<P><STRONG><a name="[1008]"></a>ime_pinyin::LpiCache::LpiCache__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lpicache.o(i._ZN10ime_pinyin8LpiCacheC1Ev), UNUSED)

<P><STRONG><a name="[56d]"></a>AGGENVGcontext::AGGENVGcontext()</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[1009]"></a>AGGENVGcontext::AGGENVGcontext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextC1Ev), UNUSED)

<P><STRONG><a name="[504]"></a>AGGENVGcontext::~AGGENVGcontext()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AGGENVGcontext::~AGGENVGcontext() &rArr; agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::~stroke()
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::~pod_vector()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDelete(void*)
</UL>

<P><STRONG><a name="[100a]"></a>AGGENVGcontext::~AGGENVGcontext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextD1Ev), UNUSED)

<P><STRONG><a name="[ef9]"></a>agge::raw_bitmap::row_ptr(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmap7row_ptrEj))
<BR><BR>[Called By]<UL><LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>

<P><STRONG><a name="[e2a]"></a>agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmapC1EjjjNS_14bits_per_pixelEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[100b]"></a>agge::raw_bitmap::raw_bitmap__sub_object(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmapC1EjjjNS_14bits_per_pixelEPh), UNUSED)

<P><STRONG><a name="[f74]"></a>void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_14pixel16_bgr565ENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[4fc]"></a>agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[100c]"></a>agge::pixel32_rgba::pixel32_rgba__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ehhhh), UNUSED)

<P><STRONG><a name="[1b4]"></a>agge::pixel32_rgba::pixel32_rgba()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev))
<BR>[Address Reference Count : 24]<UL><LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_)
</UL>
<P><STRONG><a name="[100d]"></a>agge::pixel32_rgba::pixel32_rgba__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev), UNUSED)

<P><STRONG><a name="[ef5]"></a>agge::nanovg_vertex::iterator::vertex(float*, float*)</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iterator6vertexEPfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::nanovg_vertex::iterator::vertex(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[e66]"></a>agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iteratorC1EP9NVGvertexi))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[100e]"></a>agge::nanovg_vertex::iterator::iterator__sub_object(NVGvertex*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iteratorC1EP9NVGvertexi), UNUSED)

<P><STRONG><a name="[f89]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_12pixel32_bgraEEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[f8d]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_14pixel16_bgr565EEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[f8b]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaES1_EEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[584]"></a>agge::precise_delta::next()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge13precise_delta4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[583]"></a>agge::precise_delta::multiply(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge13precise_delta8multiplyEi))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[57e]"></a>agge::precise_delta::precise_delta(int, int)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vector_rasterizer.o(i._ZN4agge13precise_deltaC1Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::precise_delta::precise_delta(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[100f]"></a>agge::precise_delta::precise_delta__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, vector_rasterizer.o(i._ZN4agge13precise_deltaC1Eii), UNUSED)

<P><STRONG><a name="[573]"></a>agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge15vertex_sequence12set_distanceERNS_6vertexERKNS_5pointIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>

<P><STRONG><a name="[575]"></a>agge::vector_rasterizer::extend_bounds(int, int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer13extend_boundsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::vector_rasterizer::extend_bounds(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_min&lang;int&rang;(T1&, T1)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_max&lang;int&rang;(T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[578]"></a>agge::vector_rasterizer::line(int, int, int, int)</STRONG> (Thumb, 540 bytes, Stack size 144 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer4lineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::precise_delta(int, int)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::multiply(int)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::next()
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
</UL>

<P><STRONG><a name="[585]"></a>agge::vector_rasterizer::sort(bool)</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer4sortEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::vector_rasterizer::sort(bool) &rArr; agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::operator [](unsigned)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::end()
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[57f]"></a>agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer5hlineERPNS0_4cellERNS_13precise_deltaEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::multiply(int)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::next()
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[4ff]"></a>agge::vector_rasterizer::reset()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[56f]"></a>agge::vector_rasterizer::vector_rasterizer()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[1010]"></a>agge::vector_rasterizer::vector_rasterizer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizerC1Ev), UNUSED)

<P><STRONG><a name="[375]"></a>agge::caps::butt::~butt__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge4caps4buttD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::caps::butt::~butt__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[374]"></a>agge::caps::butt::~butt()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps4buttD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[1011]"></a>agge::caps::butt::~butt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps4buttD1Ev), UNUSED)

<P><STRONG><a name="[574]"></a>agge::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, math.o(i._ZN4agge4sqrtEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
<LI><a href="#[fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[fb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[fb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[378]"></a>agge::joins::bevel::~bevel__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge5joins5bevelD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::joins::bevel::~bevel__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[377]"></a>agge::joins::bevel::~bevel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5bevelD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[1012]"></a>agge::joins::bevel::~bevel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5bevelD1Ev), UNUSED)

<P><STRONG><a name="[e38]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1013]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[e32]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1014]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[e2f]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1015]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[e35]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1016]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[5a1]"></a>agge::iround(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6iroundEf))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>

<P><STRONG><a name="[591]"></a>agge::muldiv(int, int, int)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN4agge6muldivEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::muldiv(int, int, int) &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>

<P><STRONG><a name="[593]"></a>agge::stroke::add_vertex(float, float, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stroke.o(i._ZN4agge6stroke10add_vertexEffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = agge::stroke::add_vertex(float, float, int) &rArr; void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[ef7]"></a>agge::stroke::remove_all()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke10remove_allEv))
<BR><BR>[Called By]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[595]"></a>agge::stroke::close_polygon()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stroke.o(i._ZN4agge6stroke13close_polygonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::stroke::close_polygon() &rArr; agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::empty() const
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>

<P><STRONG><a name="[37a]"></a>agge::stroke::cap::~cap__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge6stroke3capD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::cap::~cap__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
</UL>
<P><STRONG><a name="[37b]"></a>agge::stroke::join::~join__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge6stroke4joinD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::join::~join__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
</UL>
<P><STRONG><a name="[e65]"></a>agge::stroke::width(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke5widthEf))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[597]"></a>agge::stroke::vertex(float*, float*)</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, stroke.o(i._ZN4agge6stroke6vertexEPfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::stroke::vertex(float*, float*) &rArr; agge::stroke::prepare()
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::set_state(int)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[59a]"></a>agge::stroke::prepare()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stroke.o(i._ZN4agge6stroke7prepareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::stroke::prepare()
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::size() const
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::set_state(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[599]"></a>agge::stroke::set_state(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke9set_stateEi))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[56e]"></a>agge::stroke::stroke()</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge6strokeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::stroke::stroke() &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::capacity() const
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[1017]"></a>agge::stroke::stroke__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge6strokeC1Ev), UNUSED)

<P><STRONG><a name="[572]"></a>agge::stroke::~stroke()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stroke.o(i._ZN4agge6strokeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[1018]"></a>agge::stroke::~stroke__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, stroke.o(i._ZN4agge6strokeD1Ev), UNUSED)

<P><STRONG><a name="[f87]"></a>unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge7pixel_aINS_12pixel32_rgbaEEEhRKT_h))
<BR><BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a0]"></a>agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN4agge7scalingIiE6scale1EffRiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::iround(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
</UL>

<P><STRONG><a name="[515]"></a>ime_pinyin::SpellingTrie::is_half_id(unsigned short) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie10is_half_idEt))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi_c(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*)
</UL>

<P><STRONG><a name="[54a]"></a>ime_pinyin::SpellingTrie::is_szm_char(char) const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie11is_szm_charEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ime_pinyin::SpellingTrie::is_szm_char(char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_shengmu_char(char) const
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_yunmu_char(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
</UL>

<P><STRONG><a name="[533]"></a>ime_pinyin::SpellingTrie::half_to_full(unsigned short, unsigned short*) const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie12half_to_fullEtPt))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::add_char_qwerty()
</UL>

<P><STRONG><a name="[546]"></a>ime_pinyin::SpellingTrie::is_yunmu_char(char) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie13is_yunmu_charEc))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_szm_char(char) const
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_enable_ym(bool)
</UL>

<P><STRONG><a name="[54b]"></a>ime_pinyin::SpellingTrie::szm_is_enabled(char) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie14szm_is_enabledEc))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
</UL>

<P><STRONG><a name="[548]"></a>ime_pinyin::SpellingTrie::is_shengmu_char(char) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie15is_shengmu_charEc))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_szm_char(char) const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_enable_shm(bool)
</UL>

<P><STRONG><a name="[55f]"></a>ime_pinyin::SpellingTrie::is_half_id_yunmu(unsigned short) const</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie16is_half_id_yunmuEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ime_pinyin::SpellingTrie::is_half_id_yunmu(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::get_lpis(const unsigned short*, unsigned short, ime_pinyin::LmaPsbItem*, unsigned)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::extend_dict0(unsigned short, const ime_pinyin::DictExtPara*, ime_pinyin::LmaPsbItem*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[550]"></a>ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, spellingtrie.o(i._ZNK10ime_pinyin12SpellingTrie18if_valid_id_updateEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ime_pinyin::SpellingTrie::if_valid_id_update(unsigned short*) const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::szm_is_enabled(char) const
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::is_yunmu_char(char) const
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingParser::splstr_to_idxs(const char*, unsigned short, unsigned short*, unsigned short*, unsigned short, bool&)
</UL>

<P><STRONG><a name="[e2c]"></a>agge::raw_bitmap::width() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge10raw_bitmap5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e2d]"></a>agge::raw_bitmap::height() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge10raw_bitmap6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[586]"></a>agge::vector_rasterizer::empty() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[f00]"></a>agge::vector_rasterizer::min_y() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge17vector_rasterizer5min_yEv))
<BR><BR>[Called By]<UL><LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[579]"></a>agge::vector_rasterizer::width() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer5widthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::vector_rasterizer::width() const
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[57a]"></a>agge::vector_rasterizer::height() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer6heightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::vector_rasterizer::height() const
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[f01]"></a>agge::vector_rasterizer::operator [](int) const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZNK4agge17vector_rasterizerixEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::vector_rasterizer::operator [](int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[376]"></a>agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stroke_features.o(i._ZNK4agge4caps4butt4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[379]"></a>agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, stroke_features.o(i._ZNK4agge5joins5bevel4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[5a4]"></a>std::ceil(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZSt4ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ceil(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5a6]"></a>std::floor(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZSt5floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::floor(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[521]"></a>operator delete[] (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::~stroke()
<LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::build_f2h()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::~pod_vector()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[505]"></a>operator delete (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_close_decoder
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDelete(void*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::~cap__deallocating()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel__deallocating()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt__deallocating()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::~DictTrie__deallocating()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::free_resource()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::~join__deallocating()
</UL>

<P><STRONG><a name="[52f]"></a>operator new[] (unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator new[] (unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::LpiCache()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::build_f2h()
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct_spellings_subset(unsigned, unsigned, unsigned, ime_pinyin::SpellingNode*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>

<P><STRONG><a name="[52b]"></a>operator new(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::LpiCache::get_instance()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::get_instance()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::get_instance()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::construct(const char*, unsigned, unsigned, float, unsigned char)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::alloc_resource()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[405]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[5ba]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[f84]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[36c]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
<LI> dicttrie.o(.constdata__ZTVN10ime_pinyin12AtomDictBaseE)
<LI> nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
</UL>
<P><STRONG><a name="[5a8]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[5aa]"></a>__hardfp_acos</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_acos
</UL>

<P><STRONG><a name="[5ae]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__acosf
</UL>

<P><STRONG><a name="[5b2]"></a>__hardfp_asin</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_asin
</UL>

<P><STRONG><a name="[5b5]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_atan
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[5b6]"></a>__hardfp_atan2</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_vector_angle
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
</UL>

<P><STRONG><a name="[5b9]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__atan2f
</UL>

<P><STRONG><a name="[5bd]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_number
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_number
</UL>

<P><STRONG><a name="[5bf]"></a>__hardfp_ceil</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
<LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ceil
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceill
</UL>

<P><STRONG><a name="[5a5]"></a>__hardfp_ceilf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>

<P><STRONG><a name="[1019]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[5be]"></a>__hardfp_ceill</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ceill.o(i.__hardfp_ceill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_ceill &rArr; __hardfp_ceil
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
</UL>

<P><STRONG><a name="[5c0]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_sin_out
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_next
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cos
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
</UL>

<P><STRONG><a name="[5c4]"></a>__hardfp_cosf</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
</UL>

<P><STRONG><a name="[5c6]"></a>__hardfp_exp</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_exp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_exp
</UL>

<P><STRONG><a name="[7e1]"></a>__hardfp_floor</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_fraction_nr
<LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_round
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_floor
</UL>

<P><STRONG><a name="[5a7]"></a>__hardfp_floorf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
</UL>

<P><STRONG><a name="[5c8]"></a>__hardfp_fmod</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, fmod.o(i.__hardfp_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp_fmod &rArr; _drem &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_int
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_double
</UL>

<P><STRONG><a name="[5ca]"></a>__hardfp_ldexp</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_convert
</UL>

<P><STRONG><a name="[5cc]"></a>__hardfp_log</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[5ce]"></a>__hardfp_log10</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log10
</UL>

<P><STRONG><a name="[5d0]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_pow_out
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_pow_inout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_pow_in
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_inout
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_in
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_to_ldr
</UL>

<P><STRONG><a name="[5d1]"></a>__hardfp_sin</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_sin_inout
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_inout
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_elastic_in
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_next
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sin
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
</UL>

<P><STRONG><a name="[5d2]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
</UL>

<P><STRONG><a name="[5d3]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_circular_out
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_circular_inout
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_circular_in
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sqrt
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
</UL>

<P><STRONG><a name="[590]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sqrtf
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getAverageScale
</UL>

<P><STRONG><a name="[5d4]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tan
</UL>

<P><STRONG><a name="[5d6]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tanf
</UL>

<P><STRONG><a name="[5c1]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5c3]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5ac]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5c2]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5d5]"></a>__kernel_tan</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_tan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[5cd]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[3]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5b7]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[5ab]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5c7]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5b3]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[5b0]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[5bc]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[5b1]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[5bb]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[410]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[5c5]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[418]"></a>__support_ldexp</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3cc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5d7]"></a>align_v_type_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.align_v_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = align_v_type_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
</UL>

<P><STRONG><a name="[1b5]"></a>app_bar_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, app_bar.o(i.app_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = app_bar_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_bar.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[5dd]"></a>application_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, window_main.o(i.application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = application_init &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>

<P><STRONG><a name="[5e6]"></a>arc_info_next</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, bsvg_draw.o(i.arc_info_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arc_info_next &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_arc_path
</UL>

<P><STRONG><a name="[5eb]"></a>asset_type_find_by_value</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.asset_type_find_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = asset_type_find_by_value &rArr; find_item_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item_by_value
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[5ed]"></a>assets_init</STRONG> (Thumb, 608 bytes, Stack size 8 bytes, app_main.o(i.assets_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = assets_init &rArr; tk_init_assets &rArr; tk_add_font &rArr; font_stb_create &rArr; stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>

<P><STRONG><a name="[5ee]"></a>assets_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, assets_manager.o(i.assets_manager))
<BR><BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_destroy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_init
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_get_assets_manager
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_init
</UL>

<P><STRONG><a name="[5ef]"></a>assets_manager_add</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = assets_manager_add &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_init
</UL>

<P><STRONG><a name="[5f3]"></a>assets_manager_clear_cache</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, assets_manager.o(i.assets_manager_clear_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = assets_manager_clear_cache &rArr; darray_remove_all
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove_all
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
</UL>

<P><STRONG><a name="[5f5]"></a>assets_manager_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = assets_manager_create &rArr; assets_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[5f8]"></a>assets_manager_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = assets_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_destroy
</UL>

<P><STRONG><a name="[5fa]"></a>assets_manager_destroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = assets_manager_destroy &rArr; assets_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_set
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_deinit
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[5fc]"></a>assets_manager_find_in_cache</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, assets_manager.o(i.assets_manager_find_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assets_manager_find_in_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[5f7]"></a>assets_manager_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = assets_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_create
</UL>

<P><STRONG><a name="[605]"></a>assets_manager_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, assets_manager.o(i.assets_manager_load))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[600]"></a>assets_manager_ref</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, assets_manager.o(i.assets_manager_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_type_find_by_value
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_locale_info
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_asset
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_load_theme_obj
</UL>

<P><STRONG><a name="[5fb]"></a>assets_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, assets_manager.o(i.assets_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_destroy
<LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[606]"></a>assets_manager_unref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = assets_manager_unref &rArr; asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_deinit
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
</UL>

<P><STRONG><a name="[5b8]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[60c]"></a>bitmap_alloc_data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bitmap.o(i.bitmap_alloc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
</UL>

<P><STRONG><a name="[60f]"></a>bitmap_create_ex</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bitmap.o(i.bitmap_create_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bitmap_create_ex &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_prepare_image
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create_image
</UL>

<P><STRONG><a name="[60e]"></a>bitmap_destroy</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bitmap_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_cache_destroy
<LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_open_destroy
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_destroy
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_destroy
</UL>

<P><STRONG><a name="[612]"></a>bitmap_get_bpp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, bitmap.o(i.bitmap_get_bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[613]"></a>bitmap_get_bpp_of_format</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bitmap.o(i.bitmap_get_bpp_of_format))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_resize
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[60d]"></a>bitmap_get_line_length</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_get_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[614]"></a>bitmap_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bitmap.o(i.bitmap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>

<P><STRONG><a name="[619]"></a>bitmap_init_bgr565</STRONG> (Thumb, 74 bytes, Stack size 36 bytes, bitmap.o(i.bitmap_init_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bitmap_init_bgr565
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
</UL>

<P><STRONG><a name="[617]"></a>bitmap_init_bgra8888</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bitmap.o(i.bitmap_init_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitmap_init_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
</UL>

<P><STRONG><a name="[615]"></a>bitmap_init_from_rgba</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bitmap.o(i.bitmap_init_from_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bitmap_init_from_rgba &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba_data_is_opaque
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_rgba8888
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_bgra8888
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_bgr565
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>

<P><STRONG><a name="[618]"></a>bitmap_init_rgba8888</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bitmap.o(i.bitmap_init_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitmap_init_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
</UL>

<P><STRONG><a name="[610]"></a>bitmap_set_line_length</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bitmap.o(i.bitmap_set_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>

<P><STRONG><a name="[62b]"></a>blend_image_bgr565_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_bgr565.o(i.blend_image_bgr565_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = blend_image_bgr565_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[62e]"></a>blend_image_bgr565_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_bgr565_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[631]"></a>blend_image_bgr565_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_bgr565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_bgr565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[634]"></a>blend_image_bgr888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_bgr565.o(i.blend_image_bgr888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgr888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[637]"></a>blend_image_bgr888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_bgr888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgr888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[63a]"></a>blend_image_bgr888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_bgr888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgr888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[63d]"></a>blend_image_bgra8888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_bgra8888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgra8888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[640]"></a>blend_image_bgra8888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_bgra8888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgra8888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[643]"></a>blend_image_bgra8888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_bgra8888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgra8888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[646]"></a>blend_image_rgb565_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_bgr565.o(i.blend_image_rgb565_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = blend_image_rgb565_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[649]"></a>blend_image_rgb565_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_rgb565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = blend_image_rgb565_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[64c]"></a>blend_image_rgb565_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_rgb565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[64f]"></a>blend_image_rgba8888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_rgba8888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_rgba8888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[652]"></a>blend_image_rgba8888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_rgba8888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_rgba8888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[655]"></a>blend_image_rgba8888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_rgba8888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_rgba8888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[664]"></a>bsvg_draw</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, bsvg_draw.o(i.bsvg_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = bsvg_draw &rArr; bsvg_visit &rArr; bsvg_visit_path &rArr; svg_path_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_scale
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_visit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[66c]"></a>bsvg_draw_path</STRONG> (Thumb, 1304 bytes, Stack size 48 bytes, bsvg_draw.o(i.bsvg_draw_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bsvg_draw_path &rArr; bsvg_draw_arc_path &rArr; arc_info_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_quad_to
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_move_to
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_line_to
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_close_path
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_bezier_to
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_arc_path
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_on_path
</UL>

<P><STRONG><a name="[66d]"></a>bsvg_draw_shape</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, bsvg_draw.o(i.bsvg_draw_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = bsvg_draw_shape &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rounded_rect
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_move_to
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_line_to
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_ellipse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_close_path
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_arc
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_on_shape
</UL>

<P><STRONG><a name="[66b]"></a>bsvg_draw_shape_end</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, bsvg_draw.o(i.bsvg_draw_shape_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsvg_draw_shape_end &rArr; bsvg_draw_set_line_join &rArr; vgcanvas_set_line_join
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_stroke
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_width
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_fill
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_set_line_join
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_set_line_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_on_path
</UL>

<P><STRONG><a name="[899]"></a>bsvg_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsvg.o(i.bsvg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsvg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[667]"></a>bsvg_visit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsvg.o(i.bsvg_visit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = bsvg_visit &rArr; bsvg_visit_path &rArr; svg_path_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_shape_size
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_visit_path
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
</UL>

<P><STRONG><a name="[680]"></a>bsvg_visit_path</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsvg.o(i.bsvg_visit_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = bsvg_visit_path &rArr; svg_path_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_path_size
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_visit
</UL>

<P><STRONG><a name="[685]"></a>button_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.button_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_repeat
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_enable_long_press
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_remove_timer
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_repeat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop
</UL>

<P><STRONG><a name="[1b6]"></a>button_create</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, button.o(i.button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = button_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create_button
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>button_group_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, button_group.o(i.button_group_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = button_group_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button_group.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[691]"></a>button_set_enable_long_press</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button.o(i.button_set_enable_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = button_set_enable_long_press &rArr; button_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_prop
</UL>

<P><STRONG><a name="[693]"></a>button_set_repeat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, button.o(i.button_set_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = button_set_repeat &rArr; button_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_prop
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
</UL>

<P><STRONG><a name="[695]"></a>calibration_win_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibration_win.o(i.calibration_win_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calibration_win_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_create
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_event
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_invalidate
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_get_current_point
</UL>

<P><STRONG><a name="[243]"></a>calibration_win_create</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, calibration_win.o(i.calibration_win_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = calibration_win_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> calibration_win.o(.constdata)
</UL>
<P><STRONG><a name="[6a5]"></a>candidates_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, candidates.o(i.candidates_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = candidates_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_set_prop
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_paint_self
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_paint_children
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_event
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_destroy_default
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_invalidate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_get_prop
</UL>

<P><STRONG><a name="[176]"></a>candidates_create</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, candidates.o(i.candidates_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = candidates_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_on
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_always_scrollable
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_create
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> candidates.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[6c1]"></a>canvas_begin_frame</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, canvas.o(i.canvas_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = canvas_begin_frame &rArr; canvas_set_clip_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_begin_frame
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_normal
</UL>

<P><STRONG><a name="[6a1]"></a>canvas_draw_hline</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, canvas.o(i.canvas_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = canvas_draw_hline &rArr; canvas_draw_hline_impl &rArr; lcd_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[6d2]"></a>canvas_draw_icon</STRONG> (Thumb, 294 bytes, Stack size 104 bytes, canvas.o(i.canvas_draw_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = canvas_draw_icon &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon_in_rect
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_cursor
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
</UL>

<P><STRONG><a name="[6d4]"></a>canvas_draw_icon_in_rect</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, canvas.o(i.canvas_draw_icon_in_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = canvas_draw_icon_in_rect &rArr; canvas_draw_icon &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
</UL>

<P><STRONG><a name="[6d3]"></a>canvas_draw_image</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, canvas.o(i.canvas_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_do_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_w
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_h
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_down
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_y
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_x
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_center
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_draw_images
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[6d6]"></a>canvas_draw_image_center</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, canvas.o(i.canvas_draw_image_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = canvas_draw_image_center &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6d7]"></a>canvas_draw_image_ex</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, canvas.o(i.canvas_draw_image_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = canvas_draw_image_ex &rArr; canvas_draw_image_patch9 &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_w
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_h
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_down
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_y
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_x
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_center
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_paint_self
</UL>

<P><STRONG><a name="[6e0]"></a>canvas_draw_image_patch3_x</STRONG> (Thumb, 324 bytes, Stack size 120 bytes, canvas.o(i.canvas_draw_image_patch3_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = canvas_draw_image_patch3_x &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6e2]"></a>canvas_draw_image_patch3_x_scale_y</STRONG> (Thumb, 322 bytes, Stack size 120 bytes, canvas.o(i.canvas_draw_image_patch3_x_scale_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = canvas_draw_image_patch3_x_scale_y &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6e1]"></a>canvas_draw_image_patch3_y</STRONG> (Thumb, 326 bytes, Stack size 120 bytes, canvas.o(i.canvas_draw_image_patch3_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = canvas_draw_image_patch3_y &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6e3]"></a>canvas_draw_image_patch3_y_scale_x</STRONG> (Thumb, 314 bytes, Stack size 112 bytes, canvas.o(i.canvas_draw_image_patch3_y_scale_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = canvas_draw_image_patch3_y_scale_x &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6df]"></a>canvas_draw_image_patch9</STRONG> (Thumb, 808 bytes, Stack size 136 bytes, canvas.o(i.canvas_draw_image_patch9))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = canvas_draw_image_patch9 &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6dc]"></a>canvas_draw_image_repeat</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, canvas.o(i.canvas_draw_image_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = canvas_draw_image_repeat &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6dd]"></a>canvas_draw_image_repeat_x</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, canvas.o(i.canvas_draw_image_repeat_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = canvas_draw_image_repeat_x &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6de]"></a>canvas_draw_image_repeat_y</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, canvas.o(i.canvas_draw_image_repeat_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = canvas_draw_image_repeat_y &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6d8]"></a>canvas_draw_image_scale</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, canvas.o(i.canvas_draw_image_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = canvas_draw_image_scale &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6d9]"></a>canvas_draw_image_scale_down</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, canvas.o(i.canvas_draw_image_scale_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = canvas_draw_image_scale_down &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
</UL>

<P><STRONG><a name="[6db]"></a>canvas_draw_image_scale_h</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, canvas.o(i.canvas_draw_image_scale_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = canvas_draw_image_scale_h &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6da]"></a>canvas_draw_image_scale_w</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, canvas.o(i.canvas_draw_image_scale_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = canvas_draw_image_scale_w &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
</UL>

<P><STRONG><a name="[6cd]"></a>canvas_draw_text</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, canvas.o(i.canvas_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_text
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self_ellipses
</UL>

<P><STRONG><a name="[69f]"></a>canvas_draw_text_in_rect</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, canvas.o(i.canvas_draw_text_in_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = canvas_draw_text_in_rect &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_baseline
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_on_line
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_tips_text
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
</UL>

<P><STRONG><a name="[6a2]"></a>canvas_draw_vline</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, canvas.o(i.canvas_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = canvas_draw_vline &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_caret
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[6ec]"></a>canvas_end_frame</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, canvas.o(i.canvas_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = canvas_end_frame &rArr; canvas_draw_fps &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_end_frame
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
</UL>
<BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[dd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_end_frame
</UL>

<P><STRONG><a name="[6cb]"></a>canvas_fill_rect</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, canvas.o(i.canvas_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_on_paint_self
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_mask
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_on_paint_self
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_rect
</UL>

<P><STRONG><a name="[6f0]"></a>canvas_get_clip_rect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, canvas.o(i.canvas_get_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canvas_get_clip_rect &rArr; lcd_get_clip_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
</UL>

<P><STRONG><a name="[6f2]"></a>canvas_get_height</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvas.o(i.canvas_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = canvas_get_height &rArr; lcd_get_height
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
</UL>

<P><STRONG><a name="[6f4]"></a>canvas_get_vgcanvas</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, canvas.o(i.canvas_get_vgcanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_text_baseline
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_text_align
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_clip_rect
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
</UL>

<P><STRONG><a name="[6f9]"></a>canvas_get_width</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvas.o(i.canvas_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = canvas_get_width &rArr; lcd_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
</UL>

<P><STRONG><a name="[6fb]"></a>canvas_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, canvas.o(i.canvas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = canvas_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_profile_create
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_init_canvas
</UL>

<P><STRONG><a name="[6a4]"></a>canvas_measure_text</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, canvas.o(i.canvas_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_measure_text
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text_default
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_measure_text
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_multi_line_layout_line
<LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_measure_text
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_char_width
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self_ellipses
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_calc_child_width
</UL>

<P><STRONG><a name="[6ff]"></a>canvas_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canvas.o(i.canvas_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = canvas_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
</UL>

<P><STRONG><a name="[b33]"></a>canvas_restore</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canvas.o(i.canvas_restore))
<BR><BR>[Called By]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
</UL>

<P><STRONG><a name="[b31]"></a>canvas_save</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canvas.o(i.canvas_save))
<BR><BR>[Called By]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
</UL>

<P><STRONG><a name="[6c4]"></a>canvas_set_clip_rect</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, canvas.o(i.canvas_set_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = canvas_set_clip_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_clip_rect
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_width
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_height
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect_with_offset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
</UL>

<P><STRONG><a name="[6c9]"></a>canvas_set_fill_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, canvas.o(i.canvas_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canvas_set_fill_color &rArr; lcd_set_fill_color
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_on_paint_self
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_mask
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_on_paint_self
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_rect
</UL>

<P><STRONG><a name="[6b9]"></a>canvas_set_font</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, canvas.o(i.canvas_set_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_font_size
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_font_name
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[dfd]"></a>canvas_set_fps</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canvas.o(i.canvas_set_fps))
<BR><BR>[Called By]<UL><LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_fps
</UL>

<P><STRONG><a name="[6c2]"></a>canvas_set_global_alpha</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, canvas.o(i.canvas_set_global_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canvas_set_global_alpha &rArr; lcd_set_global_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_global_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prev_global_alpha_h
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_next_global_alpha_v
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
</UL>

<P><STRONG><a name="[6a0]"></a>canvas_set_stroke_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, canvas.o(i.canvas_set_stroke_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canvas_set_stroke_color &rArr; lcd_set_stroke_color
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_stroke_color
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_caret
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_rect
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[8b0]"></a>canvas_set_text_align</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, canvas.o(i.canvas_set_text_align))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
</UL>

<P><STRONG><a name="[6c8]"></a>canvas_set_text_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, canvas.o(i.canvas_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canvas_set_text_color &rArr; lcd_set_text_color
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_text_color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
</UL>

<P><STRONG><a name="[70b]"></a>canvas_stroke_rect</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, canvas.o(i.canvas_stroke_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = canvas_stroke_rect &rArr; canvas_stroke_rect_impl &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_on_paint_self
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_rect
</UL>

<P><STRONG><a name="[6e4]"></a>canvas_translate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, canvas.o(i.canvas_translate))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
</UL>

<P><STRONG><a name="[6e5]"></a>canvas_untranslate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, canvas.o(i.canvas_untranslate))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
</UL>

<P><STRONG><a name="[181]"></a>canvas_widget_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, canvas_widget.o(i.canvas_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = canvas_widget_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canvas_widget.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[70f]"></a>check_button_cast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, check_button.o(i.check_button_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_button_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create_radio
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_get_prop
</UL>

<P><STRONG><a name="[1bf]"></a>check_button_create</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, check_button.o(i.check_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = check_button_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
</UL>
<BR>[Address Reference Count : 2]<UL><LI> check_button.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>check_button_create_radio</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, check_button.o(i.check_button_create_radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = check_button_create_radio &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
</UL>
<BR>[Address Reference Count : 2]<UL><LI> check_button.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[713]"></a>check_button_set_value</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, check_button.o(i.check_button_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = check_button_set_value &rArr; check_button_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_prop
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
</UL>

<P><STRONG><a name="[71a]"></a>children_layouter_create</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, children_layouter_parser.o(i.children_layouter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = children_layouter_create &rArr; children_layouter_create_old &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_children_layout
</UL>

<P><STRONG><a name="[71c]"></a>children_layouter_create_new</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, children_layouter_parser.o(i.children_layouter_create_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = children_layouter_create_new &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create
</UL>

<P><STRONG><a name="[71d]"></a>children_layouter_create_old</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, children_layouter_parser.o(i.children_layouter_create_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = children_layouter_create_old &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_has_more
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_skip_to_num
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_set_param
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_create
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create
</UL>

<P><STRONG><a name="[be]"></a>children_layouter_default_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, children_layouter_default.o(i.children_layouter_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = children_layouter_default_create &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_builtins.o(i.children_layouter_register_builtins)
</UL>
<P><STRONG><a name="[d6a]"></a>children_layouter_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, children_layouter.o(i.children_layouter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = children_layouter_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_children_layout
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[748]"></a>children_layouter_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, children_layouter_factory.o(i.children_layouter_factory))
<BR><BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_builtins
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_parser_on_name
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_ext_builtins
</UL>

<P><STRONG><a name="[733]"></a>children_layouter_factory_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, children_layouter_factory.o(i.children_layouter_factory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = children_layouter_factory_create &rArr; children_layouter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[735]"></a>children_layouter_factory_create_layouter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, children_layouter_factory.o(i.children_layouter_factory_create_layouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = children_layouter_factory_create_layouter &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_parser_on_name
</UL>

<P><STRONG><a name="[738]"></a>children_layouter_factory_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, children_layouter_factory.o(i.children_layouter_factory_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = children_layouter_factory_destroy &rArr; children_layouter_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[739]"></a>children_layouter_factory_register</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, children_layouter_factory.o(i.children_layouter_factory_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = children_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_builtins
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_ext_builtins
</UL>

<P><STRONG><a name="[ceb]"></a>children_layouter_factory_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, children_layouter_factory.o(i.children_layouter_factory_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[984]"></a>children_layouter_layout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, children_layouter.o(i.children_layouter_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = children_layouter_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_layout_children
</UL>

<P><STRONG><a name="[bf]"></a>children_layouter_list_view_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, children_layouter_list_view.o(i.children_layouter_list_view_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = children_layouter_list_view_create &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_widgets.o(i.children_layouter_register_ext_builtins)
</UL>
<P><STRONG><a name="[74a]"></a>children_layouter_register_builtins</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, children_layouter_builtins.o(i.children_layouter_register_builtins))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = children_layouter_register_builtins &rArr; children_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[725]"></a>children_layouter_set_param</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, children_layouter.o(i.children_layouter_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = children_layouter_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_set_param_str
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
</UL>

<P><STRONG><a name="[749]"></a>children_layouter_set_param_str</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, children_layouter.o(i.children_layouter_set_param_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = children_layouter_set_param_str &rArr; children_layouter_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_parser_on_param
</UL>

<P><STRONG><a name="[d84]"></a>children_layouter_to_string</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, children_layouter.o(i.children_layouter_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = children_layouter_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>

<P><STRONG><a name="[ce4]"></a>clip_board</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clip_board.o(i.clip_board))
<BR><BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[756]"></a>clip_board_default_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clip_board_default.o(i.clip_board_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clip_board_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[ce5]"></a>clip_board_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clip_board.o(i.clip_board_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clip_board_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[759]"></a>clip_board_get_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, clip_board.o(i.clip_board_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clip_board_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_get_text
</UL>

<P><STRONG><a name="[758]"></a>clip_board_get_text</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, clip_board.o(i.clip_board_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clip_board_get_text &rArr; clip_board_get_data
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
</UL>

<P><STRONG><a name="[ce6]"></a>clip_board_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clip_board.o(i.clip_board_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[75b]"></a>clip_board_set_data</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, clip_board.o(i.clip_board_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clip_board_set_data
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set_text
</UL>

<P><STRONG><a name="[75a]"></a>clip_board_set_text</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, clip_board.o(i.clip_board_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clip_board_set_text &rArr; clip_board_set_data
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set_data
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
</UL>

<P><STRONG><a name="[75c]"></a>color_component_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, color_component.o(i.color_component_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_component_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_color
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_v
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_s
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_h
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_sv
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_h
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_type
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_destroy
</UL>

<P><STRONG><a name="[16a]"></a>color_component_create</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, color_component.o(i.color_component_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = color_component_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create_image
</UL>
<BR>[Address Reference Count : 2]<UL><LI> color_component.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[75e]"></a>color_component_get_h</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, color_component.o(i.color_component_get_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_component_get_h &rArr; color_component_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[75f]"></a>color_component_get_s</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, color_component.o(i.color_component_get_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_component_get_s &rArr; color_component_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[760]"></a>color_component_get_v</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, color_component.o(i.color_component_get_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_component_get_v &rArr; color_component_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[763]"></a>color_component_set_color</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, color_component.o(i.color_component_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = color_component_set_color &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[767]"></a>color_hex_str</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, color.o(i.color_hex_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[683]"></a>color_init</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, color.o(i.color_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = color_init
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_point_color
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_mask
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_caret
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_on_paint_self
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builder_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[768]"></a>color_parse</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, color_parser.o(i.color_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_bg_color
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
</UL>

<P><STRONG><a name="[771]"></a>color_picker_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, color_picker.o(i.color_picker_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_picker_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_create
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_v
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_sv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_s
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_r
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_h
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_g
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_b
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_init_if_not_inited
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_get_prop
</UL>

<P><STRONG><a name="[169]"></a>color_picker_create</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, color_picker.o(i.color_picker_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = color_picker_create &rArr; color_picker_set_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> color_picker.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[772]"></a>color_picker_set_color</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, color_picker.o(i.color_picker_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_create
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_prop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[787]"></a>color_tile_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, color_tile.o(i.color_tile_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_tile_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_on_paint_self
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_get_prop
</UL>

<P><STRONG><a name="[1c5]"></a>color_tile_create</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, color_tile.o(i.color_tile_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = color_tile_create &rArr; color_tile_set_border_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_bg_color
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> color_tile.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[788]"></a>color_tile_set_bg_color</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, color_tile.o(i.color_tile_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = color_tile_set_bg_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
</UL>

<P><STRONG><a name="[789]"></a>color_tile_set_border_color</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, color_tile.o(i.color_tile_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = color_tile_set_border_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_hex_str
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
</UL>

<P><STRONG><a name="[785]"></a>color_tile_set_value</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, color_tile.o(i.color_tile_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = color_tile_set_value &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_hex_str
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_bg_color
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[1c9]"></a>column_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, column.o(i.column_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = column_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> column.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[78a]"></a>combo_box_append_option</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, combo_box.o(i.combo_box_append_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = combo_box_append_option &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
</UL>

<P><STRONG><a name="[78b]"></a>combo_box_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, combo_box.o(i.combo_box_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = combo_box_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_open_window
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_reset_options
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_option
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_find_option
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_count_options
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_append_option
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_sync_index_to_value
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_prop
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_self
</UL>

<P><STRONG><a name="[78d]"></a>combo_box_count_options</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_count_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = combo_box_count_options &rArr; combo_box_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
</UL>

<P><STRONG><a name="[240]"></a>combo_box_create</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, combo_box.o(i.combo_box_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = combo_box_create &rArr; combo_box_create_self &rArr; edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[795]"></a>combo_box_find_option</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_find_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = combo_box_find_option &rArr; combo_box_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_value
</UL>

<P><STRONG><a name="[796]"></a>combo_box_get_option</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = combo_box_get_option &rArr; combo_box_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_sync_index_to_value
</UL>

<P><STRONG><a name="[798]"></a>combo_box_item_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, combo_box_item.o(i.combo_box_item_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = combo_box_item_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_value
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked_only
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
</UL>

<P><STRONG><a name="[1d1]"></a>combo_box_item_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, combo_box_item.o(i.combo_box_item_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = combo_box_item_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup_items
</UL>
<BR>[Address Reference Count : 2]<UL><LI> combo_box_item.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[799]"></a>combo_box_item_set_checked</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, combo_box_item.o(i.combo_box_item_set_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = combo_box_item_set_checked &rArr; combo_box_item_set_checked_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked_only
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_prop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
</UL>

<P><STRONG><a name="[79b]"></a>combo_box_item_set_value</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, combo_box_item.o(i.combo_box_item_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = combo_box_item_set_value &rArr; combo_box_item_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_prop
</UL>

<P><STRONG><a name="[7a3]"></a>combo_box_parse_options</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, combo_box.o(i.combo_box_parse_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = combo_box_parse_options &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_has_more
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_reset_options
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_append_option
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
</UL>

<P><STRONG><a name="[79e]"></a>combo_box_reset_options</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_reset_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = combo_box_reset_options &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_destroy
</UL>

<P><STRONG><a name="[7a4]"></a>combo_box_set_open_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_set_open_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = combo_box_set_open_window &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
</UL>

<P><STRONG><a name="[7a5]"></a>combo_box_set_selected_index</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_set_selected_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = combo_box_set_selected_index &rArr; combo_box_set_selected_index_ex &rArr; widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_value
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
</UL>

<P><STRONG><a name="[7a6]"></a>combo_box_set_value</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = combo_box_set_value &rArr; combo_box_set_selected_index &rArr; combo_box_set_selected_index_ex &rArr; widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_find_option
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
</UL>

<P><STRONG><a name="[765]"></a>convertHSVtoRGB</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rgb_and_hsv.o(i.convertHSVtoRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convertHSVtoRGB &rArr; convertHSVtoRGB_
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB_
</UL>
<BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_v
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_sv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_s
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_h
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_sv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_h
</UL>

<P><STRONG><a name="[7a9]"></a>convertHSVtoRGB_</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, rgb_and_hsv.o(i.convertHSVtoRGB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = convertHSVtoRGB_
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
</UL>

<P><STRONG><a name="[764]"></a>convertRGBtoHSV</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, rgb_and_hsv.o(i.convertRGBtoHSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = convertRGBtoHSV
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_v
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_sv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_s
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_h
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_color
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_sv
</UL>

<P><STRONG><a name="[7ab]"></a>darray_clear</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, darray.o(i.darray_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = darray_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>

<P><STRONG><a name="[7aa]"></a>darray_create</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, darray.o(i.darray_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = darray_create &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
</UL>

<P><STRONG><a name="[5f9]"></a>darray_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, darray.o(i.darray_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_clear
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_deinit
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_deinit
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_deinit
<LI><a href="#[d79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_deinit
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_destroy
<LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_first_focusable_widget_in_window
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_deinit
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_deinit
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_deinit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_destroy
</UL>

<P><STRONG><a name="[7ac]"></a>darray_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, darray.o(i.darray_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = darray_destroy &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
</UL>

<P><STRONG><a name="[736]"></a>darray_find</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, darray.o(i.darray_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_lookup
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_update_specific
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_lookup
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create_widget
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_create_layouter
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_create_layouter
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_create_animator
</UL>

<P><STRONG><a name="[7af]"></a>darray_find_index</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, darray.o(i.darray_find_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = darray_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>

<P><STRONG><a name="[5ff]"></a>darray_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, darray.o(i.darray_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_init
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_init
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_init
<LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_init
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_create
<LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_first_focusable_widget_in_window
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_init
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_init
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_init
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
</UL>

<P><STRONG><a name="[db8]"></a>darray_pop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, darray.o(i.darray_pop))
<BR><BR>[Called By]<UL><LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_get
</UL>

<P><STRONG><a name="[5f2]"></a>darray_push</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, darray.o(i.darray_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_add_font
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_children_for_layout
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
<LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_register
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_visit_focusable
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_register
<LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_register
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_register
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
</UL>

<P><STRONG><a name="[7b0]"></a>darray_remove</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, darray.o(i.darray_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = darray_remove &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove_index
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
</UL>

<P><STRONG><a name="[5f4]"></a>darray_remove_all</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, darray.o(i.darray_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = darray_remove_all
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_clear_cache
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_unload_unused
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_unload_bitmap
</UL>

<P><STRONG><a name="[7b1]"></a>darray_remove_index</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, darray.o(i.darray_remove_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = darray_remove_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove
</UL>

<P><STRONG><a name="[7b2]"></a>date_time_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, date_time.o(i.date_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = date_time_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_str
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
<LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_reset_time
</UL>

<P><STRONG><a name="[bd]"></a>default_destroy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utils.o(i.default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = default_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 5]<UL><LI> widget_factory.o(i.widget_factory_init)
<LI> window_animator_factory.o(i.window_animator_factory_init)
<LI> children_layouter_factory.o(i.children_layouter_factory_init)
<LI> dialog_highlighter_factory.o(i.dialog_highlighter_factory_init)
<LI> self_layouter_factory.o(i.self_layouter_factory_init)
</UL>
<P><STRONG><a name="[d21]"></a>default_ui_loader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui_loader_default.o(i.default_ui_loader))
<BR><BR>[Called By]<UL><LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
</UL>

<P><STRONG><a name="[7b4]"></a>delay_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[425]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>

<P><STRONG><a name="[4e9]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[7b8]"></a>dialog_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dialog.o(i.dialog_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dialog_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_set_prop
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_on_destroy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_on_add_child
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_get_prop
</UL>

<P><STRONG><a name="[1df]"></a>dialog_client_create</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, dialog_client.o(i.dialog_client_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dialog_client_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dialog_client.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>dialog_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dialog.o(i.dialog_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = dialog_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dialog.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[7bb]"></a>dialog_highlighter_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dialog_highlighter.o(i.dialog_highlighter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dialog_highlighter_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_create
</UL>

<P><STRONG><a name="[cc]"></a>dialog_highlighter_default_create</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dialog_highlighter_default.o(i.dialog_highlighter_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dialog_highlighter_default_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_builtins.o(i.dialog_highlighter_register_builtins)
</UL>
<P><STRONG><a name="[7bf]"></a>dialog_highlighter_destroy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dialog_highlighter.o(i.dialog_highlighter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dialog_highlighter_destroy &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_destroy_fbo
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_on_destroy
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_on_dialog_destroy
</UL>

<P><STRONG><a name="[dd1]"></a>dialog_highlighter_draw</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dialog_highlighter.o(i.dialog_highlighter_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dialog_highlighter_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_paint_children
<LI><a href="#[dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_draw_prev_window
</UL>

<P><STRONG><a name="[7cb]"></a>dialog_highlighter_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory))
<BR><BR>[Called By]<UL><LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_register_builtins
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[7c2]"></a>dialog_highlighter_factory_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dialog_highlighter_factory_create &rArr; dialog_highlighter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[7c4]"></a>dialog_highlighter_factory_create_highlighter</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_create_highlighter))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dialog_highlighter_factory_create_highlighter &rArr; func_call_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
</UL>

<P><STRONG><a name="[7c7]"></a>dialog_highlighter_factory_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dialog_highlighter_factory_destroy &rArr; dialog_highlighter_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[7c8]"></a>dialog_highlighter_factory_register</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dialog_highlighter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_register_builtins
</UL>

<P><STRONG><a name="[cea]"></a>dialog_highlighter_factory_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[dc5]"></a>dialog_highlighter_is_dynamic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dialog_highlighter.o(i.dialog_highlighter_is_dynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dialog_highlighter_is_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
</UL>

<P><STRONG><a name="[dfc]"></a>dialog_highlighter_prepare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dialog_highlighter.o(i.dialog_highlighter_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dialog_highlighter_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
</UL>

<P><STRONG><a name="[7ca]"></a>dialog_highlighter_register_builtins</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dialog_highlighter_builtins.o(i.dialog_highlighter_register_builtins))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dialog_highlighter_register_builtins &rArr; dialog_highlighter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[7cc]"></a>dialog_highlighter_set_bg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dialog_highlighter.o(i.dialog_highlighter_set_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dialog_highlighter_set_bg &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
</UL>

<P><STRONG><a name="[7cd]"></a>dialog_modal</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dialog.o(i.dialog_modal))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dialog_modal &rArr; idle_add &rArr; idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_run
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_timing_window
</UL>

<P><STRONG><a name="[7d1]"></a>dialog_quit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dialog.o(i.dialog_quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = dialog_quit &rArr; is_dialog_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_quit
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog_opened
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ok
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cancle
</UL>

<P><STRONG><a name="[1e1]"></a>dialog_title_create</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, dialog_title.o(i.dialog_title_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dialog_title_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dialog_title.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[7d4]"></a>digit_clock_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, digit_clock.o(i.digit_clock_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = digit_clock_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_format
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_on_destroy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_get_prop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_create
</UL>

<P><STRONG><a name="[178]"></a>digit_clock_create</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, digit_clock.o(i.digit_clock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = digit_clock_create &rArr; digit_clock_update_time &rArr; digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
</UL>
<BR>[Address Reference Count : 2]<UL><LI> digit_clock.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[7d7]"></a>digit_clock_format_time</STRONG> (Thumb, 366 bytes, Stack size 96 bytes, digit_clock.o(i.digit_clock_format_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_wday
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_month
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_char
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
</UL>

<P><STRONG><a name="[7de]"></a>digit_clock_set_format</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, digit_clock.o(i.digit_clock_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = digit_clock_set_format &rArr; digit_clock_update_time &rArr; digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_prop
</UL>

<P><STRONG><a name="[860]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[9c9]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[85f]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[c6f]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[7e2]"></a>dragger_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dragger.o(i.dragger_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dragger_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_set_range
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_set_prop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_move
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_get_prop
</UL>

<P><STRONG><a name="[1e3]"></a>dragger_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dragger.o(i.dragger_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dragger_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dragger.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[7e4]"></a>dragger_set_range</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, dragger.o(i.dragger_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dragger_set_range &rArr; dragger_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
</UL>

<P><STRONG><a name="[c8]"></a>dummy_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.dummy_destroy))
<BR>[Address Reference Count : 2]<UL><LI> darray.o(i.darray_init)
<LI> slist.o(i.slist_init)
</UL>
<P><STRONG><a name="[b38]"></a>easing_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, easing.o(i.easing_get))
<BR><BR>[Called By]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_create
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
</UL>

<P><STRONG><a name="[7e5]"></a>easing_type_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.easing_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = easing_type_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>

<P><STRONG><a name="[794]"></a>edit_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, edit.o(i.edit_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = edit_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_paint_self
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_self
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_text_limit
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_input_tips
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_focus
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_valid_value
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_caret
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_pointer_up_cleanup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_password_visible
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_inc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_dec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_clear
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_number
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_hook_children_button
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_do_input_char
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create_self
</UL>

<P><STRONG><a name="[7f1]"></a>edit_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, edit.o(i.edit_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = edit_clear &rArr; text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_clear
</UL>

<P><STRONG><a name="[200]"></a>edit_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, edit.o(i.edit_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = edit_create &rArr; edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
</UL>
<BR>[Address Reference Count : 2]<UL><LI> edit.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[793]"></a>edit_create_ex</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, edit.o(i.edit_create_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_text_limit
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_status
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_self
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create_self
</UL>

<P><STRONG><a name="[7f7]"></a>edit_dec</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, edit.o(i.edit_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = edit_dec &rArr; edit_add_float &rArr; wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_trim_float_zero
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_int
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_dec
</UL>

<P><STRONG><a name="[777]"></a>edit_get_int</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, edit.o(i.edit_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = edit_get_int &rArr; wstr_to_int &rArr; wstr_get_utf8 &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[201]"></a>edit_get_prop</STRONG> (Thumb, 808 bytes, Stack size 24 bytes, edit.o(i.edit_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = edit_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_wstr
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_prop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spin_box.o(.constdata)
<LI> edit.o(.constdata)
</UL>
<P><STRONG><a name="[7fc]"></a>edit_inc</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, edit.o(i.edit_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = edit_inc &rArr; edit_add_float &rArr; wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_trim_float_zero
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_int
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_inc
</UL>

<P><STRONG><a name="[800]"></a>edit_is_valid_value</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, edit.o(i.edit_is_valid_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = edit_is_valid_value &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[203]"></a>edit_on_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, edit.o(i.edit_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = edit_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_destroy
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_destroy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spin_box.o(.constdata)
<LI> edit.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>edit_on_event</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, edit.o(i.edit_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
<LI>Call Chain = edit_on_event &rArr; edit_on_key_down &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_drag
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_click
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_valid_value
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_clear
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_status
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_pointer_up_cleanup
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_commit_str
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spin_box.o(.constdata)
<LI> combo_box.o(.constdata)
<LI> edit.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>edit_on_paint_self</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, edit.o(i.edit_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = edit_on_paint_self &rArr; text_edit_paint &rArr; text_edit_do_paint &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spin_box.o(.constdata)
<LI> combo_box.o(.constdata)
<LI> edit.o(.constdata)
</UL>
<P><STRONG><a name="[816]"></a>edit_set_focus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, edit.o(i.edit_set_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = edit_set_focus &rArr; widget_set_focused &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
</UL>

<P><STRONG><a name="[818]"></a>edit_set_input_tips</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, edit.o(i.edit_set_input_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = edit_set_input_tips &rArr; text_edit_set_tips &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_tips
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
</UL>

<P><STRONG><a name="[783]"></a>edit_set_int</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, edit.o(i.edit_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = edit_set_int &rArr; wstr_from_int &rArr; tk_itoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[810]"></a>edit_set_password_visible</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, edit.o(i.edit_set_password_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = edit_set_password_visible &rArr; text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_mask_char
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_mask
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_password_visible
</UL>

<P><STRONG><a name="[202]"></a>edit_set_prop</STRONG> (Thumb, 910 bytes, Stack size 32 bytes, edit.o(i.edit_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = edit_set_prop &rArr; wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_find
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_input_tips
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_focus
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_status
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spin_box.o(.constdata)
<LI> edit.o(.constdata)
</UL>
<P><STRONG><a name="[7f4]"></a>edit_set_text_limit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, edit.o(i.edit_set_text_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edit_set_text_limit &rArr; edit_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
</UL>

<P><STRONG><a name="[820]"></a>emitter_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, emitter.o(i.emitter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emitter_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_init
</UL>

<P><STRONG><a name="[822]"></a>emitter_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, emitter.o(i.emitter_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emitter_deinit &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_item_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_destroy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_destroy
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_destroy
</UL>

<P><STRONG><a name="[824]"></a>emitter_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, emitter.o(i.emitter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emitter_destroy &rArr; emitter_deinit &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_deinit
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[782]"></a>emitter_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emitter.o(i.emitter_disable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[825]"></a>emitter_dispatch</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, emitter.o(i.emitter_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove_item
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_time_elapse
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop
<LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_before_children
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_before_children
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_before_children
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_before_children
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_before_children
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_destroy
</UL>

<P><STRONG><a name="[786]"></a>emitter_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emitter.o(i.emitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[821]"></a>emitter_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, emitter.o(i.emitter_init))
<BR><BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_create
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_create
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
</UL>

<P><STRONG><a name="[827]"></a>emitter_off</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, emitter.o(i.emitter_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_off
<LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_off
</UL>

<P><STRONG><a name="[829]"></a>emitter_off_by_ctx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, emitter.o(i.emitter_off_by_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emitter_off_by_ctx &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_destroy
</UL>

<P><STRONG><a name="[82a]"></a>emitter_off_by_func</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, emitter.o(i.emitter_off_by_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = emitter_off_by_func &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_off_by_func
</UL>

<P><STRONG><a name="[82b]"></a>emitter_on</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, emitter.o(i.emitter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_on
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_on
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
</UL>

<P><STRONG><a name="[826]"></a>emitter_remove_item</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, emitter.o(i.emitter_remove_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
</UL>

<P><STRONG><a name="[a35]"></a>eval_default_hooks</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, expr_eval.o(i.eval_default_hooks))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_func
</UL>

<P><STRONG><a name="[82c]"></a>eval_execute</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, expr_eval.o(i.eval_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_init
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[609]"></a>event_init</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, event.o(i.event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = event_init &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_repeat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_long_press
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked_only
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_move
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_init
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_value
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_screen_saver_timer
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_top_window_changed
<LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_time_elapse
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_end
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awtk_mem_on_out_of_memory
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_request_close_window
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_destroy
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_value
<LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index_only
<LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value_only
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_value
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_angle
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_dispatch_event
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
</UL>

<P><STRONG><a name="[831]"></a>event_queue_create</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, event_queue.o(i.event_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_queue_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
</UL>

<P><STRONG><a name="[832]"></a>event_queue_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, event_queue.o(i.event_queue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_queue_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
</UL>

<P><STRONG><a name="[833]"></a>event_queue_recv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, event_queue.o(i.event_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = event_queue_recv &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_recv_event
</UL>

<P><STRONG><a name="[834]"></a>event_queue_send</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, event_queue.o(i.event_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = event_queue_send &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_queue_event
</UL>

<P><STRONG><a name="[5e8]"></a>expr_value_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, expr_eval.o(i.expr_value_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = expr_value_clear &rArr; expr_value_set_number &rArr; expr_str_clear &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_clear
</UL>

<P><STRONG><a name="[83f]"></a>expr_value_get_number</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, expr_eval.o(i.expr_value_get_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tan
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_string
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sqrt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sin
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_round
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_number
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log10
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_if
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_floor
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_exp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cos
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ceil
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_atan
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_asin
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_acos
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
</UL>

<P><STRONG><a name="[83d]"></a>expr_value_get_string</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, expr_eval.o(i.expr_value_get_string))
<BR><BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
</UL>

<P><STRONG><a name="[840]"></a>expr_value_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, expr_eval.o(i.expr_value_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = expr_value_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
</UL>

<P><STRONG><a name="[7b3]"></a>expr_value_set_number</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, expr_eval.o(i.expr_value_set_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = expr_value_set_number &rArr; expr_str_clear &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tan
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_strlen
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_string
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sqrt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_sin
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_round
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_number
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log10
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_log
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_floor
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_exp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cos
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ceil
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_atan
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_asin
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_acos
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_number
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_variable
</UL>

<P><STRONG><a name="[83e]"></a>expr_value_set_string</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, expr_eval.o(i.expr_value_set_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = expr_value_set_string &rArr; expr_value_append_string &rArr; expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_append_string
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_toupper
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tolower
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_string
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_path
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
</UL>

<P><STRONG><a name="[4e6]"></a>f_mount</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_mount &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init_Mount
</UL>

<P><STRONG><a name="[5b4]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[847]"></a>ff_cre_syncobj</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[846]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ff_del_syncobj &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[84c]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[84e]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[850]"></a>fill_abgr8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_abgr8888.o(i.fill_abgr8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_abgr8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[852]"></a>fill_argb8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_argb8888.o(i.fill_argb8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_argb8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[854]"></a>fill_bgr565_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgr565.o(i.fill_bgr565_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_bgr565_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[856]"></a>fill_bgr888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgr888.o(i.fill_bgr888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_bgr888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[858]"></a>fill_bgra8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgra8888.o(i.fill_bgra8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_bgra8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[85c]"></a>fill_rgb565_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_rgb565.o(i.fill_rgb565_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_rgb565_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[85d]"></a>fill_rgba8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_rgba8888.o(i.fill_rgba8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[5d8]"></a>find_item</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, enums.o(i.find_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_find
<LI><a href="#[de1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_closable_type_find
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_type_find
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_type_find
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_type_find
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_v_type_find
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_default_paint_find
</UL>

<P><STRONG><a name="[5ec]"></a>find_item_by_value</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, enums.o(i.find_item_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_item_by_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_type_find_by_value
</UL>

<P><STRONG><a name="[d9]"></a>font_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, font.o(i.font_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = font_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_manager.o(i.font_manager_init)
</UL>
<P><STRONG><a name="[6e9]"></a>font_get_baseline</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, font.o(i.font_get_baseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = font_get_baseline
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
</UL>

<P><STRONG><a name="[6e8]"></a>font_get_glyph</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, font.o(i.font_get_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = font_get_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text_default
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_impl
</UL>

<P><STRONG><a name="[869]"></a>font_loader_load</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, font_loader.o(i.font_loader_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = font_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
</UL>

<P><STRONG><a name="[d00]"></a>font_loader_stb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, font_loader_stb.o(i.font_loader_stb))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[9a5]"></a>font_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, font_manager.o(i.font_manager))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_add_font
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_init_canvas
</UL>

<P><STRONG><a name="[862]"></a>font_manager_add_font</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, font_manager.o(i.font_manager_add_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = font_manager_add_font &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_add_font
</UL>

<P><STRONG><a name="[863]"></a>font_manager_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, font_manager.o(i.font_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = font_manager_create &rArr; font_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[865]"></a>font_manager_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, font_manager.o(i.font_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = font_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_destroy
</UL>

<P><STRONG><a name="[866]"></a>font_manager_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, font_manager.o(i.font_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = font_manager_destroy &rArr; font_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[707]"></a>font_manager_get_font</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, font_manager.o(i.font_manager_get_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_lookup
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_add_font
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
</UL>

<P><STRONG><a name="[864]"></a>font_manager_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, font_manager.o(i.font_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = font_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_create
</UL>

<P><STRONG><a name="[868]"></a>font_manager_load</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, font_manager.o(i.font_manager_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[867]"></a>font_manager_lookup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, font_manager.o(i.font_manager_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = font_manager_lookup &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[cf7]"></a>font_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font_manager.o(i.font_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[861]"></a>font_match</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, font.o(i.font_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = font_match
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_cmp
</UL>

<P><STRONG><a name="[86a]"></a>font_stb_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, font_loader_stb.o(i.font_stb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = font_stb_create &rArr; stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_init
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontVMetrics
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_add_font
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_load
</UL>

<P><STRONG><a name="[458]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_clear
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[5a9]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[7c5]"></a>func_call_parse</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, func_call_parser.o(i.func_call_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = func_call_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_create
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>

<P><STRONG><a name="[720]"></a>func_call_parser_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, func_call_parser.o(i.func_call_parser_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func_call_parser_deinit &rArr; tokenizer_deinit &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
</UL>

<P><STRONG><a name="[71e]"></a>func_call_parser_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, func_call_parser.o(i.func_call_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = func_call_parser_init &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_parser_parse
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
</UL>

<P><STRONG><a name="[71f]"></a>func_call_parser_parse</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, func_call_parser.o(i.func_call_parser_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_has_more
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_parser_parse
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_new
</UL>

<P><STRONG><a name="[8f3]"></a>g2d_blend_image</STRONG> (Thumb, 440 bytes, Stack size 76 bytes, stm32_g2d.o(i.g2d_blend_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = g2d_blend_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
</UL>

<P><STRONG><a name="[8f7]"></a>g2d_copy_image</STRONG> (Thumb, 380 bytes, Stack size 68 bytes, stm32_g2d.o(i.g2d_copy_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = g2d_copy_image
</UL>
<BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
</UL>

<P><STRONG><a name="[8fa]"></a>g2d_fill_rect</STRONG> (Thumb, 286 bytes, Stack size 52 bytes, stm32_g2d.o(i.g2d_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = g2d_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
</UL>

<P><STRONG><a name="[90d]"></a>g2d_rotate_image</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_g2d.o(i.g2d_rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = g2d_rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
</UL>

<P><STRONG><a name="[888]"></a>get_time_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform.o(i.get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_s
</UL>

<P><STRONG><a name="[88a]"></a>gif_image_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gif_image.o(i.gif_image_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gif_image_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_timer
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_destroy
</UL>

<P><STRONG><a name="[180]"></a>gif_image_create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gif_image.o(i.gif_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gif_image_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_init
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gif_image.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[875]"></a>glyph_cache_add</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, glyph_cache.o(i.glyph_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = glyph_cache_add &rArr; glyph_cache_get_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_get_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
</UL>

<P><STRONG><a name="[86f]"></a>glyph_cache_deinit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, glyph_cache.o(i.glyph_cache_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = glyph_cache_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_destroy
</UL>

<P><STRONG><a name="[86b]"></a>glyph_cache_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, glyph_cache.o(i.glyph_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = glyph_cache_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>

<P><STRONG><a name="[871]"></a>glyph_cache_lookup</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, glyph_cache.o(i.glyph_cache_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = glyph_cache_lookup &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
</UL>

<P><STRONG><a name="[874]"></a>glyph_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, font.o(i.glyph_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = glyph_clone &rArr; glyph_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_create
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
</UL>

<P><STRONG><a name="[892]"></a>glyph_create</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, font.o(i.glyph_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = glyph_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_clone
</UL>

<P><STRONG><a name="[7b7]"></a>glyph_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, font.o(i.glyph_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = glyph_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_glyph
</UL>

<P><STRONG><a name="[204]"></a>grid_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, grid.o(i.grid_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = grid_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> grid.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>grid_item_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, grid_item.o(i.grid_item_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = grid_item_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> grid_item.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>group_box_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, group_box.o(i.group_box_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = group_box_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> group_box.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[893]"></a>guage_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guage.o(i.guage_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guage_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_image
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_draw_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_paint_self
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_destroy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_get_prop
</UL>

<P><STRONG><a name="[179]"></a>guage_create</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, guage.o(i.guage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = guage_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guage.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[894]"></a>guage_pointer_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guage_pointer.o(i.guage_pointer_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guage_pointer_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_create
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_angle
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_anchor_for_str
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_destroy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_load_svg_asset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_get_prop
</UL>

<P><STRONG><a name="[17a]"></a>guage_pointer_create</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, guage_pointer.o(i.guage_pointer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = guage_pointer_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guage_pointer.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[89c]"></a>guage_pointer_set_anchor_for_str</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, guage_pointer.o(i.guage_pointer_set_anchor_for_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = guage_pointer_set_anchor_for_str &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_value_is_anchor_px
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
</UL>

<P><STRONG><a name="[89f]"></a>guage_pointer_set_angle</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, guage_pointer.o(i.guage_pointer_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = guage_pointer_set_angle &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
</UL>

<P><STRONG><a name="[8a0]"></a>guage_pointer_set_image</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, guage_pointer.o(i.guage_pointer_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = guage_pointer_set_image &rArr; guage_pointer_load_svg_asset &rArr; widget_load_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_load_svg_asset
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
</UL>

<P><STRONG><a name="[89e]"></a>guage_pointer_value_is_anchor_px</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, guage_pointer.o(i.guage_pointer_value_is_anchor_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = guage_pointer_value_is_anchor_px &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_anchor_for_str
</UL>

<P><STRONG><a name="[8a1]"></a>guage_set_draw_type</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guage.o(i.guage_set_draw_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = guage_set_draw_type &rArr; guage_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
</UL>

<P><STRONG><a name="[8a2]"></a>guage_set_image</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guage.o(i.guage_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = guage_set_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
</UL>

<P><STRONG><a name="[8a4]"></a>gui_app_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_main.o(i.gui_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = gui_app_start &rArr; application_init &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_run
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ext_widgets_init
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_task
</UL>

<P><STRONG><a name="[15b]"></a>high_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.high_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = high_task &rArr; gui_app_start &rArr; application_init &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[8a8]"></a>hscroll_label_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hscroll_label.o(i.hscroll_label_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_stop
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_step
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_start
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_yoyo
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_xoffset
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_only_focus
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_lull
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_loop
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_ellipses
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_duration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_event
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_is_running
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_get_prop
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
</UL>

<P><STRONG><a name="[187]"></a>hscroll_label_create</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, hscroll_label.o(i.hscroll_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = hscroll_label_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[8b2]"></a>hscroll_label_set_duration</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_duration &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b3]"></a>hscroll_label_set_ellipses</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_ellipses))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_ellipses &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b4]"></a>hscroll_label_set_loop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_loop &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b5]"></a>hscroll_label_set_lull</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_lull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_lull &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b6]"></a>hscroll_label_set_only_focus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_only_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_only_focus &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b7]"></a>hscroll_label_set_xoffset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_xoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hscroll_label_set_xoffset &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8b8]"></a>hscroll_label_set_yoyo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_set_yoyo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_set_yoyo &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
</UL>

<P><STRONG><a name="[8ad]"></a>hscroll_label_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hscroll_label_start &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_event
</UL>

<P><STRONG><a name="[8b1]"></a>hscroll_label_step</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, hscroll_label.o(i.hscroll_label_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hscroll_label_step &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer
</UL>

<P><STRONG><a name="[8ac]"></a>hscroll_label_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hscroll_label_stop &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_event
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_destroy
</UL>

<P><STRONG><a name="[6a6]"></a>hscrollable_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hscrollable.o(i.hscrollable_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hscrollable_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_create
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
</UL>

<P><STRONG><a name="[6b1]"></a>hscrollable_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hscrollable.o(i.hscrollable_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hscrollable_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_destroy
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_destroy_default
</UL>

<P><STRONG><a name="[6ac]"></a>hscrollable_get_prop</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, hscrollable.o(i.hscrollable_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hscrollable_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_prop
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_get_prop
</UL>

<P><STRONG><a name="[6ad]"></a>hscrollable_invalidate</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, hscrollable.o(i.hscrollable_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hscrollable_invalidate &rArr; rect_intersect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_invalidate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_invalidate
</UL>

<P><STRONG><a name="[6b3]"></a>hscrollable_on_event</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, hscrollable.o(i.hscrollable_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = hscrollable_on_event &rArr; hscrollable_on_pointer_up &rArr; hscrollable_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_event_to_target_recursive
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_up
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_move
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_down
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_event
</UL>

<P><STRONG><a name="[6b5]"></a>hscrollable_on_paint_children</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, hscrollable.o(i.hscrollable_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = hscrollable_on_paint_children &rArr; widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children_default
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_children
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_paint_children
</UL>

<P><STRONG><a name="[8c2]"></a>hscrollable_scroll_to</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hscrollable.o(i.hscrollable_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hscrollable_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_fix_end_offset_default
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_up
</UL>

<P><STRONG><a name="[6a7]"></a>hscrollable_set_always_scrollable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hscrollable.o(i.hscrollable_set_always_scrollable))
<BR><BR>[Called By]<UL><LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
</UL>

<P><STRONG><a name="[6be]"></a>hscrollable_set_prop</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hscrollable.o(i.hscrollable_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = hscrollable_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_set_prop
</UL>

<P><STRONG><a name="[6bd]"></a>hscrollable_set_virtual_w</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hscrollable.o(i.hscrollable_set_virtual_w))
<BR><BR>[Called By]<UL><LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[6bc]"></a>hscrollable_set_xoffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hscrollable.o(i.hscrollable_set_xoffset))
<BR><BR>[Called By]<UL><LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[4bb]"></a>i2c_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4ba]"></a>i2c_NAck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4b9]"></a>i2c_ReadByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4b7]"></a>i2c_SendByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4b6]"></a>i2c_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4bc]"></a>i2c_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[4b8]"></a>i2c_WaitAck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[7d0]"></a>idle_add</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, idle.o(i.idle_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = idle_add &rArr; idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_add
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_idle
<LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_async
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_events
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
</UL>

<P><STRONG><a name="[8c9]"></a>idle_dispatch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, idle.o(i.idle_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = idle_dispatch &rArr; idle_manager_dispatch &rArr; idle_manager_dispatch_one &rArr; idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_step
</UL>

<P><STRONG><a name="[e6]"></a>idle_info_compare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, idle_info.o(i.idle_info_compare))
<BR>[Address Reference Count : 1]<UL><LI> idle_manager_1.o(i.idle_manager_init)
</UL>
<P><STRONG><a name="[8cb]"></a>idle_info_create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, idle_info.o(i.idle_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_append
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_add
</UL>

<P><STRONG><a name="[8ce]"></a>idle_info_init_dummy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, idle_info.o(i.idle_info_init_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = idle_info_init_dummy &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_remove
</UL>

<P><STRONG><a name="[8c7]"></a>idle_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle_manager_1.o(i.idle_manager))
<BR><BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_remove
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_dispatch
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[8c8]"></a>idle_manager_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, idle_manager_1.o(i.idle_manager_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_info_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
</UL>

<P><STRONG><a name="[8cd]"></a>idle_manager_append</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, idle_manager_1.o(i.idle_manager_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_info_create
</UL>

<P><STRONG><a name="[8d0]"></a>idle_manager_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, idle_manager_1.o(i.idle_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = idle_manager_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[8d2]"></a>idle_manager_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, idle_manager_1.o(i.idle_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = idle_manager_deinit &rArr; slist_deinit &rArr; slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_destroy
</UL>

<P><STRONG><a name="[8d4]"></a>idle_manager_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, idle_manager_1.o(i.idle_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = idle_manager_destroy &rArr; idle_manager_deinit &rArr; slist_deinit &rArr; slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[8ca]"></a>idle_manager_dispatch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, idle_manager_1.o(i.idle_manager_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = idle_manager_dispatch &rArr; idle_manager_dispatch_one &rArr; idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch_one
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_dispatch
</UL>

<P><STRONG><a name="[8d1]"></a>idle_manager_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, idle_manager_1.o(i.idle_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = idle_manager_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_create
</UL>

<P><STRONG><a name="[8d7]"></a>idle_manager_remove</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, idle_manager_1.o(i.idle_manager_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_info_init_dummy
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_remove
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch_one
</UL>

<P><STRONG><a name="[cee]"></a>idle_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, idle_manager_1.o(i.idle_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[801]"></a>idle_remove</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, idle.o(i.idle_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = idle_remove &rArr; idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_remove
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_idle_on_destroy
</UL>

<P><STRONG><a name="[8da]"></a>im_close_decoder</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pinyinime.o(i.im_close_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = im_close_decoder &rArr; ime_pinyin::MatrixSearch::~MatrixSearch() &rArr; ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::~MatrixSearch()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_destroy
</UL>

<P><STRONG><a name="[92f]"></a>im_commit_event_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, input_method.o(i.im_commit_event_init))
<BR><BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
</UL>

<P><STRONG><a name="[50d]"></a>im_get_candidate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pinyinime.o(i.im_get_candidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = im_get_candidate &rArr; ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned) &rArr; ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool) &rArr; ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; utf16_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)
</UL>

<P><STRONG><a name="[8db]"></a>im_open_decoder_rom</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pinyinime.o(i.im_open_decoder_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = im_open_decoder_rom &rArr; ime_pinyin::MatrixSearch::init(const char*, const char*) &rArr; ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::~MatrixSearch()
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::MatrixSearch()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::init(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_create
</UL>

<P><STRONG><a name="[50c]"></a>im_reset_search</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pinyinime.o(i.im_reset_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = im_reset_search &rArr; ime_pinyin::MatrixSearch::reset_search() &rArr; ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::reset_search()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_reset_input(_input_engine_t*)
</UL>

<P><STRONG><a name="[507]"></a>im_search</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pinyinime.o(i.im_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = im_search &rArr; ime_pinyin::MatrixSearch::search(const char*, unsigned) &rArr; ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool) &rArr; ime_pinyin::MatrixSearch::add_char(char) &rArr; ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::search(const char*, unsigned)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate_num()
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_input(_input_engine_t*, int)
</UL>

<P><STRONG><a name="[8dd]"></a>im_set_max_lens</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pinyinime.o(i.im_set_max_lens))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_set_max_lens
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::set_max_lens(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_create
</UL>

<P><STRONG><a name="[8df]"></a>image_animation_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, image_animation.o(i.image_animation_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_play
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_pause
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_unload_after_paint
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_sequence
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_loop
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_interval
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_image
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_format
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_delay
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_auto_play
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_unload_image
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_start_init_if_not_inited
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_destroy
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_delay_play
</UL>

<P><STRONG><a name="[17d]"></a>image_animation_create</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, image_animation.o(i.image_animation_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = image_animation_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> image_animation.o(.constdata)
</UL>
<P><STRONG><a name="[8e1]"></a>image_animation_get_image_name</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, image_animation.o(i.image_animation_get_image_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = image_animation_get_image_name &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_load_image
</UL>

<P><STRONG><a name="[8e5]"></a>image_animation_pause</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = image_animation_pause &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_off
</UL>

<P><STRONG><a name="[8e0]"></a>image_animation_play</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = image_animation_play &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_start_init_if_not_inited
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_delay_play
</UL>

<P><STRONG><a name="[8e6]"></a>image_animation_set_auto_play</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_auto_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_animation_set_auto_play &rArr; image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8e7]"></a>image_animation_set_delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_animation_set_delay &rArr; image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8e8]"></a>image_animation_set_format</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_animation_set_format &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8e9]"></a>image_animation_set_image</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_animation_set_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8ea]"></a>image_animation_set_interval</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_animation_set_interval &rArr; image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8eb]"></a>image_animation_set_loop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_animation_set_loop &rArr; image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8ec]"></a>image_animation_set_sequence</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_animation_set_sequence &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8ed]"></a>image_animation_set_unload_after_paint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_set_unload_after_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_animation_set_unload_after_paint &rArr; image_animation_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[8e4]"></a>image_animation_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, image_animation.o(i.image_animation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = image_animation_update &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_restart
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_update
</UL>

<P><STRONG><a name="[88c]"></a>image_base_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, image_base.o(i.image_base_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_base_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_need_transform
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_destroy
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_rotation
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_image
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
</UL>

<P><STRONG><a name="[2c8]"></a>image_base_get_prop</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, image_base.o(i.image_base_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = image_base_get_prop &rArr; value_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_prop
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mutable_image.o(.constdata)
<LI> svg_image.o(.constdata)
<LI> gif_image.o(.constdata)
</UL>
<P><STRONG><a name="[88b]"></a>image_base_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, image_base.o(i.image_base_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_base_init &rArr; image_base_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_create
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_create
</UL>

<P><STRONG><a name="[20c]"></a>image_base_on_destroy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, image_base.o(i.image_base_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = image_base_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_destroy
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_destroy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>image_base_on_event</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, image_base.o(i.image_base_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = image_base_on_event &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 4]<UL><LI> image.o(.constdata)
<LI> mutable_image.o(.constdata)
<LI> svg_image.o(.constdata)
<LI> gif_image.o(.constdata)
</UL>
<P><STRONG><a name="[8f0]"></a>image_base_set_image</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_base.o(i.image_base_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_base_set_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
</UL>

<P><STRONG><a name="[2c9]"></a>image_base_set_prop</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, image_base.o(i.image_base_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = image_base_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_image
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mutable_image.o(.constdata)
<LI> svg_image.o(.constdata)
<LI> gif_image.o(.constdata)
</UL>
<P><STRONG><a name="[8f1]"></a>image_base_set_rotation</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, image_base.o(i.image_base_set_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = image_base_set_rotation &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_off
</UL>

<P><STRONG><a name="[8f2]"></a>image_blend</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, image_g2d.o(i.image_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = image_blend &rArr; soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_blend_image
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
</UL>

<P><STRONG><a name="[8f5]"></a>image_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, image.o(i.image_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_draw_type
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_prop
</UL>

<P><STRONG><a name="[8f6]"></a>image_copy</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, image_g2d.o(i.image_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = image_copy &rArr; soft_copy_image &rArr; tk_pixel_copy &rArr; tk_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_copy_image
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
</UL>

<P><STRONG><a name="[207]"></a>image_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, image.o(i.image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = image_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_init
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> image.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[8a3]"></a>image_draw_type_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.image_draw_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = image_draw_type_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
</UL>

<P><STRONG><a name="[8f9]"></a>image_fill</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, image_g2d.o(i.image_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>

<P><STRONG><a name="[8fd]"></a>image_loader_load</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, image_loader.o(i.image_loader_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = image_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_load_image
</UL>

<P><STRONG><a name="[8fc]"></a>image_loader_load_image</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, image_loader.o(i.image_loader_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = image_loader_load_image &rArr; image_loader_load
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
</UL>

<P><STRONG><a name="[cff]"></a>image_loader_register</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, image_loader.o(i.image_loader_register))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[cfe]"></a>image_loader_stb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, image_loader_stb.o(i.image_loader_stb))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[607]"></a>image_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image_manager.o(i.image_manager))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_cursor
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_cursor
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awtk_mem_on_out_of_memory
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[8ff]"></a>image_manager_add</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, image_manager.o(i.image_manager_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = image_manager_add &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_s
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
</UL>

<P><STRONG><a name="[901]"></a>image_manager_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, image_manager.o(i.image_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = image_manager_create &rArr; image_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[903]"></a>image_manager_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, image_manager.o(i.image_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = image_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_destroy
</UL>

<P><STRONG><a name="[904]"></a>image_manager_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, image_manager.o(i.image_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = image_manager_destroy &rArr; image_manager_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[905]"></a>image_manager_get_bitmap</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, image_manager.o(i.image_manager_get_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_exprs
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_cursor
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_cursor
</UL>

<P><STRONG><a name="[907]"></a>image_manager_get_bitmap_exprs</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, image_manager.o(i.image_manager_get_bitmap_exprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
</UL>

<P><STRONG><a name="[902]"></a>image_manager_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image_manager.o(i.image_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = image_manager_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_create
</UL>

<P><STRONG><a name="[909]"></a>image_manager_lookup</STRONG> (Thumb, 92 bytes, Stack size 104 bytes, image_manager.o(i.image_manager_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = image_manager_lookup &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_s
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
</UL>

<P><STRONG><a name="[cf6]"></a>image_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image_manager.o(i.image_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[90a]"></a>image_manager_unload_bitmap</STRONG> (Thumb, 36 bytes, Stack size 96 bytes, image_manager.o(i.image_manager_unload_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = image_manager_unload_bitmap &rArr; darray_remove_all
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove_all
</UL>
<BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_image
</UL>

<P><STRONG><a name="[608]"></a>image_manager_unload_unused</STRONG> (Thumb, 38 bytes, Stack size 96 bytes, image_manager.o(i.image_manager_unload_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = image_manager_unload_unused &rArr; darray_remove_all
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove_all
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_s
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awtk_mem_on_out_of_memory
</UL>

<P><STRONG><a name="[90b]"></a>image_manager_update_specific</STRONG> (Thumb, 70 bytes, Stack size 104 bytes, image_manager.o(i.image_manager_update_specific))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = image_manager_update_specific &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[88e]"></a>image_need_transform</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, image_base.o(i.image_need_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_need_transform &rArr; image_base_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
</UL>

<P><STRONG><a name="[90c]"></a>image_rotate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, image_g2d.o(i.image_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = image_rotate &rArr; soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
</UL>

<P><STRONG><a name="[90f]"></a>image_set_draw_type</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, image.o(i.image_set_draw_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = image_set_draw_type &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
</UL>

<P><STRONG><a name="[88f]"></a>image_transform</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, image_base.o(i.image_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = image_transform &rArr; vgcanvas_translate
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_scale
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
</UL>

<P><STRONG><a name="[910]"></a>image_value_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, image_value.o(i.image_value_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_value_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_create
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_value
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_image
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_format
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_destroy
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_get_prop
</UL>

<P><STRONG><a name="[182]"></a>image_value_create</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, image_value.o(i.image_value_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = image_value_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> image_value.o(.constdata)
</UL>
<P><STRONG><a name="[913]"></a>image_value_set_format</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_value.o(i.image_value_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_value_set_format &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
</UL>

<P><STRONG><a name="[914]"></a>image_value_set_image</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_value.o(i.image_value_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_value_set_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
</UL>

<P><STRONG><a name="[915]"></a>image_value_set_value</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, image_value.o(i.image_value_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = image_value_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
</UL>

<P><STRONG><a name="[916]"></a>indicator_default_paint_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, slide_indicator.o(i.indicator_default_paint_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = indicator_default_paint_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[976]"></a>init_linebreak</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, linebreak.o(i.init_linebreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_linebreak
</UL>
<BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_break_check
</UL>

<P><STRONG><a name="[e01]"></a>init_wordbreak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wordbreak.o(i.init_wordbreak))
<BR><BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_break_check
</UL>

<P><STRONG><a name="[91b]"></a>input_device_status_on_input_event</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, input_device_status.o(i.input_device_status_on_input_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = input_device_status_on_input_event &rArr; widget_on_keydown &rArr; widget_on_keydown_impl &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_rotate
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_target
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_key_target
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_update_key_status
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_shift_key
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_init_wheel_event
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_init_pointer_event
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_init_key_event
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_input_event
</UL>

<P><STRONG><a name="[929]"></a>input_engine_create</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, input_engine_pinyin.o(i.input_engine_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = input_engine_create &rArr; im_open_decoder_rom &rArr; ime_pinyin::MatrixSearch::init(const char*, const char*) &rArr; ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_set_max_lens
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_open_decoder_rom
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_create
</UL>

<P><STRONG><a name="[92a]"></a>input_engine_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, input_engine_pinyin.o(i.input_engine_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = input_engine_destroy &rArr; im_close_decoder &rArr; ime_pinyin::MatrixSearch::~MatrixSearch() &rArr; ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_close_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_destroy
</UL>

<P><STRONG><a name="[92b]"></a>input_engine_input</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, input_engine.o(i.input_engine_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = input_engine_input &rArr; str_append_char &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_char
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key
</UL>

<P><STRONG><a name="[92e]"></a>input_engine_reset_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, input_engine.o(i.input_engine_reset_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = input_engine_reset_input
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
</UL>

<P><STRONG><a name="[6a8]"></a>input_method</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, input_method.o(i.input_method))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method_on_window_open
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key_only
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method_on_window_open
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_action_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_destroy_default
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_button_click
</UL>

<P><STRONG><a name="[6ae]"></a>input_method_commit_text</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, input_method.o(i.input_method_commit_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = input_method_commit_text &rArr; input_method_commit_text_ex &rArr; input_method_dispatch_candidates &rArr; input_method_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_button_click
</UL>

<P><STRONG><a name="[92d]"></a>input_method_commit_text_ex</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, input_method.o(i.input_method_commit_text_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = input_method_commit_text_ex &rArr; input_method_dispatch_candidates &rArr; input_method_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_to_widget
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_commit_event_init
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_reset_input
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text
</UL>

<P><STRONG><a name="[931]"></a>input_method_create</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, input_method_creator.o(i.input_method_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = input_method_create &rArr; input_method_default_create &rArr; input_engine_create &rArr; im_open_decoder_rom &rArr; ime_pinyin::MatrixSearch::init(const char*, const char*) &rArr; ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[932]"></a>input_method_default_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, input_method_creator.o(i.input_method_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = input_method_default_create &rArr; input_engine_create &rArr; im_open_decoder_rom &rArr; ime_pinyin::MatrixSearch::init(const char*, const char*) &rArr; ime_pinyin::MatrixSearch::alloc_resource() &rArr; ime_pinyin::DictTrie::DictTrie() &rArr; ime_pinyin::SpellingTrie::get_cpinstance() &rArr; ime_pinyin::SpellingTrie::get_instance() &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_init
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_create
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_create
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_create
</UL>

<P><STRONG><a name="[106]"></a>input_method_default_destroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, input_method_creator.o(i.input_method_default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = input_method_default_destroy &rArr; input_engine_destroy &rArr; im_close_decoder &rArr; ime_pinyin::MatrixSearch::~MatrixSearch() &rArr; ime_pinyin::MatrixSearch::free_resource() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_deinit
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_destroy
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_method_default_create)
</UL>
<P><STRONG><a name="[cf2]"></a>input_method_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, input_method.o(i.input_method_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_method_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[939]"></a>input_method_dispatch</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, input_method.o(i.input_method_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = input_method_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
</UL>

<P><STRONG><a name="[93a]"></a>input_method_dispatch_action</STRONG> (Thumb, 74 bytes, Stack size 88 bytes, input_method.o(i.input_method_dispatch_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = input_method_dispatch_action &rArr; input_method_commit_text &rArr; input_method_commit_text_ex &rArr; input_method_dispatch_candidates &rArr; input_method_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_to_widget
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
</UL>

<P><STRONG><a name="[6b0]"></a>input_method_dispatch_candidates</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, input_method.o(i.input_method_dispatch_candidates))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = input_method_dispatch_candidates &rArr; input_method_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_button_click
</UL>

<P><STRONG><a name="[93b]"></a>input_method_dispatch_key</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, input_method.o(i.input_method_dispatch_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = input_method_dispatch_key &rArr; input_method_dispatch_key_only &rArr; input_method_dispatch_to_widget &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key_only
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_input
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
</UL>

<P><STRONG><a name="[930]"></a>input_method_dispatch_to_widget</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, input_method.o(i.input_method_dispatch_to_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = input_method_dispatch_to_widget &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text_ex
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key_only
</UL>

<P><STRONG><a name="[6b2]"></a>input_method_off</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, input_method.o(i.input_method_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = input_method_off &rArr; emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_destroy_default
</UL>

<P><STRONG><a name="[6a9]"></a>input_method_on</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, input_method.o(i.input_method_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = input_method_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
</UL>

<P><STRONG><a name="[805]"></a>input_method_request</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, input_method.o(i.input_method_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = input_method_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method_on_window_open
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method_on_window_open
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
</UL>

<P><STRONG><a name="[cf3]"></a>input_method_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, input_method.o(i.input_method_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[81d]"></a>input_type_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.input_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_type_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
</UL>

<P><STRONG><a name="[941]"></a>is_line_breakable</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, linebreak.o(i.is_line_breakable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = is_line_breakable &rArr; set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks_utf32
</UL>
<BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_break_check
</UL>

<P><STRONG><a name="[93d]"></a>key_event_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, events.o(i.key_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = key_event_init &rArr; event_init &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key_only
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[94a]"></a>keyboard_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(i.keyboard_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyboard_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_destroy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_action_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
</UL>

<P><STRONG><a name="[936]"></a>keyboard_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyboard.o(i.keyboard_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = keyboard_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_close_keyboard
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
</UL>

<P><STRONG><a name="[175]"></a>keyboard_create</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, keyboard.o(i.keyboard_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = keyboard_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_on
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> keyboard.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[94e]"></a>keys_type_find</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, enums.o(i.keys_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = keys_type_find &rArr; key_name_fix &rArr; tk_strncpy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_name_fix
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
</UL>

<P><STRONG><a name="[950]"></a>label_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, label.o(i.label_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_create
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_length
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_get_prop
</UL>

<P><STRONG><a name="[20d]"></a>label_create</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, label.o(i.label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = label_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> label.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[956]"></a>label_set_length</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, label.o(i.label_set_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = label_set_length &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_prop
</UL>

<P><STRONG><a name="[95b]"></a>lb_init_break_context</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, linebreak.o(i.lb_init_break_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treat_first_char
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_lb_class
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lb_prop_lang
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_lang
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks
</UL>

<P><STRONG><a name="[95e]"></a>lb_process_next_char</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, linebreak.o(i.lb_process_next_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = lb_process_next_char &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treat_first_char
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_lb_class
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lb_result_simple
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lb_result_lookup
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_lang
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks
</UL>

<P><STRONG><a name="[6c3]"></a>lcd_begin_frame</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lcd.o(i.lcd_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_begin_frame &rArr; rect_fix
</UL>
<BR>[Calls]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
</UL>

<P><STRONG><a name="[9ac]"></a>lcd_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
</UL>

<P><STRONG><a name="[6cf]"></a>lcd_draw_glyph</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd.o(i.lcd_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_glyph
</UL>

<P><STRONG><a name="[6d1]"></a>lcd_draw_hline</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lcd.o(i.lcd_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline_impl
</UL>

<P><STRONG><a name="[6c6]"></a>lcd_draw_image</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd.o(i.lcd_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_do_draw_image
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_overlap_default_draw_prev
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_prev
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_curr
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_prev
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_curr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_draw_curr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_top_draw_curr
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_right_draw_curr
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_left_draw_curr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_bottom_draw_curr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_center_scale_draw_curr
</UL>

<P><STRONG><a name="[6e6]"></a>lcd_draw_text</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lcd.o(i.lcd_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_draw_text
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
</UL>

<P><STRONG><a name="[6eb]"></a>lcd_draw_vline</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lcd.o(i.lcd_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline_impl
</UL>

<P><STRONG><a name="[6ed]"></a>lcd_end_frame</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd.o(i.lcd_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_end_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
</UL>

<P><STRONG><a name="[6ef]"></a>lcd_fill_rect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd.o(i.lcd_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect_impl
</UL>

<P><STRONG><a name="[970]"></a>lcd_flush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.lcd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[6f1]"></a>lcd_get_clip_rect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i.lcd_get_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_get_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
</UL>

<P><STRONG><a name="[9cc]"></a>lcd_get_desired_bitmap_format</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_get_desired_bitmap_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_get_desired_bitmap_format
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_prepare_image
</UL>

<P><STRONG><a name="[6f3]"></a>lcd_get_height</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.lcd_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_height
</UL>

<P><STRONG><a name="[6f5]"></a>lcd_get_vgcanvas</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_get_vgcanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_get_vgcanvas
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[6fa]"></a>lcd_get_width</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.lcd_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_width
</UL>

<P><STRONG><a name="[961]"></a>lcd_is_swappable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.lcd_is_swappable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_is_swappable
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[6fd]"></a>lcd_measure_text</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd.o(i.lcd_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_measure_text
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
</UL>

<P><STRONG><a name="[962]"></a>lcd_mem_bgr565_create_double_fb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcd_mem_bgr565.o(i.lcd_mem_bgr565_create_double_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create_double_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f769_create_lcd
</UL>

<P><STRONG><a name="[6fc]"></a>lcd_profile_create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_profile.o(i.lcd_profile_create))
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_init
</UL>

<P><STRONG><a name="[700]"></a>lcd_set_clip_rect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
</UL>

<P><STRONG><a name="[702]"></a>lcd_set_fill_color</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
</UL>

<P><STRONG><a name="[705]"></a>lcd_set_font_name</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_font_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_font_name
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
</UL>

<P><STRONG><a name="[706]"></a>lcd_set_font_size</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_font_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_font_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
</UL>

<P><STRONG><a name="[708]"></a>lcd_set_global_alpha</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_global_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_global_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_draw_curr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_center_scale_draw_curr
</UL>

<P><STRONG><a name="[709]"></a>lcd_set_stroke_color</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_stroke_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_stroke_color
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
</UL>

<P><STRONG><a name="[70a]"></a>lcd_set_text_color</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.lcd_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_text_color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
</UL>

<P><STRONG><a name="[70d]"></a>lcd_stroke_rect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd.o(i.lcd_stroke_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_stroke_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect_impl
</UL>

<P><STRONG><a name="[96f]"></a>lcd_swap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.lcd_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[971]"></a>lcd_sync</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.lcd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[dfb]"></a>lcd_take_snapshot</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(i.lcd_take_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_take_snapshot
</UL>
<BR>[Called By]<UL><LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
</UL>

<P><STRONG><a name="[975]"></a>line_break_check</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, line_break.o(i.line_break_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = line_break_check &rArr; is_line_breakable &rArr; set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_line_breakable
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_linebreak
</UL>
<BR>[Called By]<UL><LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_multi_line_layout_line
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_line_break_check
</UL>

<P><STRONG><a name="[955]"></a>line_breaker_break</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, label.o(i.line_breaker_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = line_breaker_break
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_breaker_count
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text_mlines
</UL>

<P><STRONG><a name="[953]"></a>line_breaker_count</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, label.o(i.line_breaker_count))
<BR><BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_breaker_break
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text
</UL>

<P><STRONG><a name="[977]"></a>line_number_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, line_number.o(i.line_number_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = line_number_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_create
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_get_prop
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_yoffset
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_top_margin
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_line_height
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_bottom_margin
</UL>

<P><STRONG><a name="[186]"></a>line_number_create</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, line_number.o(i.line_number_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = line_number_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> line_number.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[97a]"></a>line_number_set_bottom_margin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, line_number.o(i.line_number_set_bottom_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = line_number_set_bottom_margin &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>

<P><STRONG><a name="[97b]"></a>line_number_set_line_height</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, line_number.o(i.line_number_set_line_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = line_number_set_line_height &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>

<P><STRONG><a name="[97c]"></a>line_number_set_top_margin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, line_number.o(i.line_number_set_top_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = line_number_set_top_margin &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>

<P><STRONG><a name="[97d]"></a>line_number_set_yoffset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, line_number.o(i.line_number_set_yoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = line_number_set_yoffset &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>

<P><STRONG><a name="[97e]"></a>list_item_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, list_item.o(i.list_item_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_item_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_create
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_remove_timer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_timer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_destroy
</UL>

<P><STRONG><a name="[16e]"></a>list_item_create</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, list_item.o(i.list_item_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = list_item_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> list_item.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[73c]"></a>list_view_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, list_view.o(i.list_view_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_set_prop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_bar_value_changed
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_event
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_add_child
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_get_prop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[16c]"></a>list_view_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, list_view.o(i.list_view_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = list_view_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> list_view.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[980]"></a>list_view_h_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, list_view_h.o(i.list_view_h_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_view_h_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_set_prop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_event
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_add_child
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_get_prop
</UL>

<P><STRONG><a name="[16d]"></a>list_view_h_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, list_view_h.o(i.list_view_h_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = list_view_h_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> list_view_h.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[5fe]"></a>locale_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locale_info.o(i.locale_info))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_locale_info
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_init
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_language
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_locale
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_wday
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_month
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
</UL>

<P><STRONG><a name="[70e]"></a>locale_info_change</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, locale_info.o(i.locale_info_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = locale_info_change &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_clear_cache
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_get_assets_manager
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_init
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_locale
</UL>

<P><STRONG><a name="[992]"></a>locale_info_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, locale_info.o(i.locale_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = locale_info_create &rArr; locale_info_init &rArr; locale_info_change &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[995]"></a>locale_info_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale_info.o(i.locale_info_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = locale_info_destroy &rArr; locale_info_deinit &rArr; assets_manager_unref &rArr; asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[996]"></a>locale_info_on</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, locale_info.o(i.locale_info_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = locale_info_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_init
</UL>

<P><STRONG><a name="[cf8]"></a>locale_info_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale_info.o(i.locale_info_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[7df]"></a>locale_info_tr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, locale_info.o(i.locale_info_tr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = locale_info_tr &rArr; str_table_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_table_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_apply_tr_text_before_paint
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_wday
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_month
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
</UL>

<P><STRONG><a name="[5cf]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = log &rArr; __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[15d]"></a>low_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.low_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = low_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[3b3]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = main &rArr; GTP_Init_Panel &rArr; GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Memory_Protection
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cache_Enable
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init_Mount
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7ce]"></a>main_loop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_loop.o(i.main_loop))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;middle_task
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_measure_text
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_run
<LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_exit
</UL>

<P><STRONG><a name="[cfa]"></a>main_loop_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main_loop.o(i.main_loop_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_loop_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_exit
</UL>

<P><STRONG><a name="[99d]"></a>main_loop_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main_loop_stm32_raw.o(i.main_loop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = main_loop_init &rArr; main_loop_simple_init &rArr; window_manager_resize &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_init_canvas
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
</UL>

<P><STRONG><a name="[9a0]"></a>main_loop_post_pointer_event</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, main_loop_simple.o(i.main_loop_post_pointer_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main_loop_post_pointer_event &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_queue_event
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;middle_task
</UL>

<P><STRONG><a name="[9a1]"></a>main_loop_queue_event</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main_loop.o(i.main_loop_queue_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main_loop_queue_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_post_pointer_event
</UL>

<P><STRONG><a name="[7d3]"></a>main_loop_quit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main_loop.o(i.main_loop_quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_loop_quit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
</UL>

<P><STRONG><a name="[7cf]"></a>main_loop_run</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main_loop.o(i.main_loop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_loop_run
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_run
</UL>

<P><STRONG><a name="[9a8]"></a>main_loop_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_loop.o(i.main_loop_set))
<BR><BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
<LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_exit
</UL>

<P><STRONG><a name="[99e]"></a>main_loop_simple_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main_loop_simple.o(i.main_loop_simple_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = main_loop_simple_init &rArr; window_manager_resize &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_create
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_set
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_resize
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_create
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_init
</UL>

<P><STRONG><a name="[9a2]"></a>main_loop_simple_reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_loop_simple.o(i.main_loop_simple_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main_loop_simple_reset &rArr; canvas_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_reset
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_destroy
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_destroy
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_destroy
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_destroy
</UL>

<P><STRONG><a name="[9ae]"></a>main_loop_sleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main_loop.o(i.main_loop_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main_loop_sleep &rArr; main_loop_sleep_default &rArr; sleep_ms &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep_default
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_run
</UL>

<P><STRONG><a name="[9b2]"></a>main_loop_sleep_default</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, main_loop.o(i.main_loop_sleep_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main_loop_sleep_default &rArr; sleep_ms &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_time
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep
</UL>

<P><STRONG><a name="[9ad]"></a>main_loop_step</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main_loop.o(i.main_loop_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_loop_step
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_run
</UL>

<P><STRONG><a name="[456]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = malloc &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
</UL>

<P><STRONG><a name="[15c]"></a>middle_task</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.middle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = middle_task &rArr; GT911_OnePiontScan &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_post_pointer_event
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_OnePiontScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[9b7]"></a>mledit_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mledit.o(i.mledit_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mledit_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_create
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_wrap_word
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_max_lines
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_input_tips
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_focus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_caret
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_pointer_up_cleanup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_scroll_bar_value_changed
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_paint_self
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_destroy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_add_child
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_commit_str
</UL>

<P><STRONG><a name="[9b8]"></a>mledit_clear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mledit.o(i.mledit_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mledit_clear &rArr; text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[185]"></a>mledit_create</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mledit.o(i.mledit_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mledit_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[9c2]"></a>mledit_set_focus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mledit.o(i.mledit_set_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mledit_set_focus &rArr; widget_set_focused &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[9c3]"></a>mledit_set_input_tips</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mledit.o(i.mledit_set_input_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mledit_set_input_tips &rArr; text_edit_set_tips &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_tips
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[9c4]"></a>mledit_set_max_lines</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mledit.o(i.mledit_set_max_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mledit_set_max_lines &rArr; text_edit_set_max_rows &rArr; rows_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_max_rows
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[9c6]"></a>mledit_set_wrap_word</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mledit.o(i.mledit_set_wrap_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mledit_set_wrap_word &rArr; text_edit_set_wrap_word &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_wrap_word
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[9ca]"></a>mutable_image_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mutable_image.o(i.mutable_image_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutable_image_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_create
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_prepare_image
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_destroy
</UL>

<P><STRONG><a name="[184]"></a>mutable_image_create</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, mutable_image.o(i.mutable_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mutable_image_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_init
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mutable_image.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[9cd]"></a>named_value_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, named_value.o(i.named_value_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = named_value_deinit &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_remove_prop
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_on_destroy
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_foreach_prop
</UL>

<P><STRONG><a name="[9ce]"></a>named_value_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, named_value.o(i.named_value_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = named_value_init &rArr; named_value_set_value &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_name
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_value
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_insert_prop_at
</UL>

<P><STRONG><a name="[9cf]"></a>named_value_set_name</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, named_value.o(i.named_value_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = named_value_set_name &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_init
</UL>

<P><STRONG><a name="[9d0]"></a>named_value_set_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, named_value.o(i.named_value_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = named_value_set_value &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_equal
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
</UL>

<P><STRONG><a name="[9d5]"></a>nvgArc</STRONG> (Thumb, 752 bytes, Stack size 672 bytes, nanovg.o(i.nvgArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__mini
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxi
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_arc
</UL>

<P><STRONG><a name="[9dc]"></a>nvgArcTo</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, nanovg.o(i.nvgArcTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = nvgArcTo &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tanf
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__distPtSeg
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cross
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__atan2f
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_arc_to
</UL>

<P><STRONG><a name="[9e5]"></a>nvgBeginFrame</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nanovg.o(i.nvgBeginFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nvgBeginFrame &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setDevicePixelRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_begin_frame
</UL>

<P><STRONG><a name="[9e9]"></a>nvgBeginPath</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nanovg.o(i.nvgBeginPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvgBeginPath
</UL>
<BR>[Calls]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__clearPathCache
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_begin_path
</UL>

<P><STRONG><a name="[9eb]"></a>nvgBezierTo</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, nanovg.o(i.nvgBezierTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgBezierTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_bezier_to
</UL>

<P><STRONG><a name="[9ec]"></a>nvgClosePath</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nanovg.o(i.nvgClosePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nvgClosePath &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_close_path
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
</UL>

<P><STRONG><a name="[9ed]"></a>nvgCreateAGGE</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, nanovg_agge.o(i.nvgCreateAGGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
</UL>

<P><STRONG><a name="[d40]"></a>nvgCreateFontMem</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, nanovg.o(i.nvgCreateFontMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvgCreateFontMem
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[d3a]"></a>nvgCreateImageRaw</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, nanovg.o(i.nvgCreateImageRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvgCreateImageRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[9ee]"></a>nvgCreateInternal</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nanovg.o(i.nvgCreateInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nvgCreateInternal &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setDevicePixelRatio
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[9f5]"></a>nvgDeleteImage</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg.o(i.nvgDeleteImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgDeleteImage
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>

<P><STRONG><a name="[9ef]"></a>nvgDeleteInternal</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nanovg.o(i.nvgDeleteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvgDeleteInternal &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_destroy
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[9f2]"></a>nvgEllipse</STRONG> (Thumb, 298 bytes, Stack size 152 bytes, nanovg.o(i.nvgEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nvgEllipse &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ellipse
</UL>

<P><STRONG><a name="[9f3]"></a>nvgEndFrame</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, nanovg.o(i.nvgEndFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvgEndFrame &rArr; nvgImageSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImageSize
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteImage
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_end_frame
</UL>

<P><STRONG><a name="[9f6]"></a>nvgFill</STRONG> (Thumb, 266 bytes, Stack size 120 bytes, nanovg.o(i.nvgFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
</UL>

<P><STRONG><a name="[9fa]"></a>nvgFillColor</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgFillColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgFillColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_color
</UL>

<P><STRONG><a name="[9fc]"></a>nvgFillPaint</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgFillPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvgFillPaint &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[d3f]"></a>nvgFindFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg.o(i.nvgFindFont))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[d41]"></a>nvgFontFaceId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgFontFaceId))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[9fe]"></a>nvgFontSize</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgFontSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgFontSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font_size
</UL>

<P><STRONG><a name="[a0e]"></a>nvgGetParams</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgGetParams))
<BR><BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
</UL>

<P><STRONG><a name="[9ff]"></a>nvgGlobalAlpha</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgGlobalAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgGlobalAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_global_alpha
</UL>

<P><STRONG><a name="[a00]"></a>nvgImagePattern</STRONG> (Thumb, 134 bytes, Stack size 120 bytes, nanovg.o(i.nvgImagePattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nvgImagePattern &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBAf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[9f4]"></a>nvgImageSize</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgImageSize
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>

<P><STRONG><a name="[a03]"></a>nvgLineCap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nanovg.o(i.nvgLineCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgLineCap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_cap
</UL>

<P><STRONG><a name="[a04]"></a>nvgLineJoin</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nanovg.o(i.nvgLineJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgLineJoin
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_join
</UL>

<P><STRONG><a name="[9df]"></a>nvgLineTo</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nanovg.o(i.nvgLineTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nvgLineTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_line_to
</UL>

<P><STRONG><a name="[a05]"></a>nvgLinearGradient</STRONG> (Thumb, 274 bytes, Stack size 176 bytes, nanovg.o(i.nvgLinearGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
</UL>

<P><STRONG><a name="[a07]"></a>nvgMiterLimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgMiterLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgMiterLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_miter_limit
</UL>

<P><STRONG><a name="[a08]"></a>nvgMoveTo</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nanovg.o(i.nvgMoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nvgMoveTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_move_to
</UL>

<P><STRONG><a name="[a09]"></a>nvgQuadTo</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, nanovg.o(i.nvgQuadTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgQuadTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_quad_to
</UL>

<P><STRONG><a name="[a0f]"></a>nvgRGBA</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, nanovg.o(i.nvgRGBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvgRGBA
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_color
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[a02]"></a>nvgRGBAf</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nanovg.o(i.nvgRGBAf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvgRGBAf
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
</UL>

<P><STRONG><a name="[a0a]"></a>nvgRadialGradient</STRONG> (Thumb, 152 bytes, Stack size 168 bytes, nanovg.o(i.nvgRadialGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
</UL>

<P><STRONG><a name="[a0c]"></a>nvgRect</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, nanovg.o(i.nvgRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[a0d]"></a>nvgReinitAgge</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, nanovg_agge.o(i.nvgReinitAgge))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nvgReinitAgge &rArr; nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGetParams
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_reinit
</UL>

<P><STRONG><a name="[9e7]"></a>nvgReset</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, nanovg.o(i.nvgReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__compositeOperationState
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[a11]"></a>nvgResetTransform</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nanovg.o(i.nvgResetTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgResetTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_transform
</UL>

<P><STRONG><a name="[d38]"></a>nvgRestore</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nanovg.o(i.nvgRestore))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_restore
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[a12]"></a>nvgRotate</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, nanovg.o(i.nvgRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nvgRotate &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_rotate
</UL>

<P><STRONG><a name="[a14]"></a>nvgRoundedRect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nanovg.o(i.nvgRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nvgRoundedRect &rArr; nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_rounded_rect
</UL>

<P><STRONG><a name="[a15]"></a>nvgRoundedRectVarying</STRONG> (Thumb, 758 bytes, Stack size 264 bytes, nanovg.o(i.nvgRoundedRectVarying))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__signf
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__minf
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRect
</UL>

<P><STRONG><a name="[9e6]"></a>nvgSave</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nanovg.o(i.nvgSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgSave &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_save
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[a18]"></a>nvgScale</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nanovg.o(i.nvgScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvgScale &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformScale
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_scale
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[a1a]"></a>nvgScissor</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nanovg.o(i.nvgScissor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvgScissor
</UL>
<BR>[Calls]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clip_rect
</UL>

<P><STRONG><a name="[a1b]"></a>nvgStroke</STRONG> (Thumb, 428 bytes, Stack size 136 bytes, nanovg.o(i.nvgStroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getAverageScale
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__clampf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_stroke
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
</UL>

<P><STRONG><a name="[a1f]"></a>nvgStrokeColor</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgStrokeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgStrokeColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_color
</UL>

<P><STRONG><a name="[a20]"></a>nvgStrokePaint</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgStrokePaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvgStrokePaint &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
</UL>

<P><STRONG><a name="[a21]"></a>nvgStrokeWidth</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgStrokeWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgStrokeWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_width
</UL>

<P><STRONG><a name="[d3d]"></a>nvgText</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg.o(i.nvgText))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
</UL>

<P><STRONG><a name="[d3c]"></a>nvgTextAlign</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgTextAlign))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
</UL>

<P><STRONG><a name="[d3e]"></a>nvgTextBounds</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg.o(i.nvgTextBounds))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
</UL>

<P><STRONG><a name="[a22]"></a>nvgTransform</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, nanovg.o(i.nvgTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_transform
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_transform
</UL>

<P><STRONG><a name="[a0b]"></a>nvgTransformIdentity</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformIdentity))
<BR><BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
</UL>

<P><STRONG><a name="[a23]"></a>nvgTransformInverse</STRONG> (Thumb, 290 bytes, Stack size 4 bytes, nanovg.o(i.nvgTransformInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvgTransformInverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[9fd]"></a>nvgTransformMultiply</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformMultiply))
<BR><BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
</UL>

<P><STRONG><a name="[a2b]"></a>nvgTransformPoint</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformPoint))
<BR><BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[a13]"></a>nvgTransformPremultiply</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nanovg.o(i.nvgTransformPremultiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
</UL>

<P><STRONG><a name="[a01]"></a>nvgTransformRotate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nanovg.o(i.nvgTransformRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
</UL>

<P><STRONG><a name="[a19]"></a>nvgTransformScale</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformScale))
<BR><BR>[Called By]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
</UL>

<P><STRONG><a name="[a25]"></a>nvgTransformTranslate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformTranslate))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
</UL>

<P><STRONG><a name="[a24]"></a>nvgTranslate</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nanovg.o(i.nvgTranslate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvgTranslate &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformTranslate
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_translate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[d30]"></a>object_compare</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, object.o(i.object_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = object_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_equal
</UL>

<P><STRONG><a name="[8cc]"></a>object_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, object.o(i.object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = object_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_create
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_info_create
<LI><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_create
</UL>

<P><STRONG><a name="[877]"></a>object_default_create</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, object_default.o(i.object_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = object_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
</UL>

<P><STRONG><a name="[836]"></a>object_eval</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, object.o(i.object_eval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int64
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_double
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_dup_str
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_is_valid_name
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_execute
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
</UL>

<P><STRONG><a name="[7bc]"></a>object_get_prop</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, object.o(i.object_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = object_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
<LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_create
<LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>

<P><STRONG><a name="[8d6]"></a>object_ref</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, object.o(i.object_ref))
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
<LI><a href="#[cd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch_one
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch_one
</UL>

<P><STRONG><a name="[a45]"></a>object_set_name</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, object.o(i.object_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = object_set_name &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_name
</UL>

<P><STRONG><a name="[a46]"></a>object_set_prop</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, object.o(i.object_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop_str
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
</UL>

<P><STRONG><a name="[a47]"></a>object_set_prop_str</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, object.o(i.object_set_prop_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = object_set_prop_str &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
</UL>

<P><STRONG><a name="[e7]"></a>object_unref</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, object.o(i.object_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_deinit
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[cd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch_one
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch_one
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> idle_manager_1.o(i.idle_manager_init)
<LI> timer_manager.o(i.timer_manager_init)
</UL>
<P><STRONG><a name="[a4d]"></a>open_record_window</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, window_record.o(i.open_record_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = open_record_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_record
</UL>

<P><STRONG><a name="[a4e]"></a>open_setting_window</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, window_setting.o(i.open_setting_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = open_setting_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_setting
</UL>

<P><STRONG><a name="[a51]"></a>open_timing_window</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, window_timing.o(i.open_timing_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = open_timing_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_text_selector
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timing
</UL>

<P><STRONG><a name="[4f1]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[4f4]"></a>osKernelSysTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[4f2]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[4f3]"></a>osMessageGet</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[440]"></a>osMessagePut</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>

<P><STRONG><a name="[84a]"></a>osSemaphoreCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[84b]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[84d]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[84f]"></a>osSemaphoreWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[23d]"></a>overlay_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, overlay.o(i.overlay_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = overlay_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> overlay.o(.constdata)
</UL>
<P><STRONG><a name="[a62]"></a>pages_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pages.o(i.pages_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pages_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_on_paint_children
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_get_prop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_find_target
</UL>

<P><STRONG><a name="[211]"></a>pages_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pages.o(i.pages_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = pages_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[a65]"></a>pages_set_active</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, pages.o(i.pages_set_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = pages_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active_by_name
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_prop
</UL>

<P><STRONG><a name="[94d]"></a>pages_set_active_by_name</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pages.o(i.pages_set_active_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = pages_set_active_by_name &rArr; pages_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_set_active_page
</UL>

<P><STRONG><a name="[a67]"></a>paint_event_init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, events.o(i.paint_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = paint_event_init &rArr; event_init &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_self
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_end
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_begin
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_done
</UL>

<P><STRONG><a name="[9a4]"></a>platform_create_lcd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main_loop_stm32_raw.o(i.platform_create_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = platform_create_lcd &rArr; stm32f769_create_lcd &rArr; lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f769_create_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_init_canvas
</UL>

<P><STRONG><a name="[9a3]"></a>platform_disaptch_input</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_loop_stm32_raw.o(i.platform_disaptch_input))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_raw_dispatch
</UL>

<P><STRONG><a name="[a71]"></a>platform_prepare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform.o(i.platform_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = platform_prepare &rArr; tk_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
</UL>

<P><STRONG><a name="[c9]"></a>pointer_compare</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.pointer_compare))
<BR>[Address Reference Count : 2]<UL><LI> darray.o(i.darray_init)
<LI> slist.o(i.slist_init)
</UL>
<P><STRONG><a name="[714]"></a>pointer_event_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, events.o(i.pointer_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pointer_event_init &rArr; event_init &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_impl
<LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_impl
<LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
</UL>

<P><STRONG><a name="[91c]"></a>pointer_event_rotate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, events.o(i.pointer_event_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pointer_event_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[a73]"></a>popup_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, popup.o(i.popup_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = popup_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_set_prop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_get_prop
</UL>

<P><STRONG><a name="[217]"></a>popup_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, popup.o(i.popup_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = popup_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> popup.o(.constdata)
</UL>
<P><STRONG><a name="[a75]"></a>progress_bar_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, progress_bar.o(i.progress_bar_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = progress_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_vertical
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_value
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_show_text
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_get_prop
</UL>

<P><STRONG><a name="[21c]"></a>progress_bar_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, progress_bar.o(i.progress_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = progress_bar_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> progress_bar.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[a7c]"></a>progress_bar_set_show_text</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progress_bar.o(i.progress_bar_set_show_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_bar_set_show_text &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
</UL>

<P><STRONG><a name="[a7a]"></a>progress_bar_set_value</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, progress_bar.o(i.progress_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = progress_bar_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
</UL>

<P><STRONG><a name="[a7b]"></a>progress_bar_set_vertical</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progress_bar.o(i.progress_bar_set_vertical))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_bar_set_vertical &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
</UL>

<P><STRONG><a name="[a7d]"></a>progress_circle_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, progress_circle.o(i.progress_circle_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = progress_circle_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_value
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_unit
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_start_angle
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_show_text
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_max
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_line_width
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_counter_clock_wise
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_destroy
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_create
</UL>

<P><STRONG><a name="[17e]"></a>progress_circle_create</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, progress_circle.o(i.progress_circle_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = progress_circle_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> progress_circle.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[a7f]"></a>progress_circle_set_counter_clock_wise</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_counter_clock_wise))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_circle_set_counter_clock_wise &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a80]"></a>progress_circle_set_line_width</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_circle_set_line_width &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a81]"></a>progress_circle_set_max</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_circle_set_max &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a83]"></a>progress_circle_set_show_text</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_show_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_circle_set_show_text &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a84]"></a>progress_circle_set_start_angle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = progress_circle_set_start_angle &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a85]"></a>progress_circle_set_unit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_set_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = progress_circle_set_unit &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[a82]"></a>progress_circle_set_value</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, progress_circle.o(i.progress_circle_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = progress_circle_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
</UL>

<P><STRONG><a name="[aad]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[e0b]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[a9d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[d1b]"></a>rbuffer_has_more</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buffer.o(i.rbuffer_has_more))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d15]"></a>rbuffer_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, buffer.o(i.rbuffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d1c]"></a>rbuffer_peek_uint8</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, buffer.o(i.rbuffer_peek_uint8))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[ab0]"></a>rbuffer_read_binary</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buffer.o(i.rbuffer_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbuffer_read_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[ab1]"></a>rbuffer_read_string</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, buffer.o(i.rbuffer_read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rbuffer_read_string &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d16]"></a>rbuffer_read_uint32</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, buffer.o(i.rbuffer_read_uint32))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d1d]"></a>rbuffer_read_uint8</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, buffer.o(i.rbuffer_read_uint8))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[503]"></a>realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_str
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
</UL>

<P><STRONG><a name="[a74]"></a>rect_contains</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rect.o(i.rect_contains))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rect_contains
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
</UL>

<P><STRONG><a name="[960]"></a>rect_fix</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, rect.o(i.rect_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rect_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_begin_frame
<LI><a href="#[de3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_calc_dirty_rect
</UL>

<P><STRONG><a name="[69a]"></a>rect_init</STRONG> (Thumb, 22 bytes, Stack size 36 bytes, rect.o(i.rect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rect_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_center
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_on_line
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_border
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_remove_child
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_cursor
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_overlap_default_draw_prev
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_normal
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_icon_text_rect
<LI><a href="#[d71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_border
<LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_background
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_invalidate
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_prev
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_curr
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_prev
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_curr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_draw_curr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_top_draw_curr
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_right_draw_curr
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_left_draw_curr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_bottom_draw_curr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_center_scale_draw_curr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_menu_with_rect
<LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_tips_text
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_paint_self
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_children_rect
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_linear
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_clip_r
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_draw_images
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_paint_self
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[8af]"></a>rect_intersect</STRONG> (Thumb, 214 bytes, Stack size 68 bytes, rect.o(i.rect_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rect_intersect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
</UL>

<P><STRONG><a name="[b44]"></a>rect_merge</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, rect.o(i.rect_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rect_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_invalidate
<LI><a href="#[de3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_calc_dirty_rect
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_children_rect
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
</UL>

<P><STRONG><a name="[dc7]"></a>rect_scale</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, rect.o(i.rect_scale))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_overlap_default_draw_prev
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_prev
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_draw_curr
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_prev
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_draw_curr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_draw_curr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_top_draw_curr
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_right_draw_curr
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_left_draw_curr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_to_bottom_draw_curr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_center_scale_draw_curr
</UL>

<P><STRONG><a name="[616]"></a>rgba_data_is_opaque</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bitmap.o(i.rgba_data_is_opaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rgba_data_is_opaque
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>

<P><STRONG><a name="[ab4]"></a>rich_text_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rich_text.o(i.rich_text_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rich_text_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_text
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_prop
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_reset
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_ensure_render_node
</UL>

<P><STRONG><a name="[168]"></a>rich_text_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, rich_text.o(i.rich_text_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rich_text_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rich_text.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[ab7]"></a>rich_text_image_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rich_text_node.o(i.rich_text_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rich_text_image_create &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
</UL>

<P><STRONG><a name="[ab8]"></a>rich_text_image_destroy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rich_text_node.o(i.rich_text_image_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rich_text_image_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_node_destroy
</UL>

<P><STRONG><a name="[ab9]"></a>rich_text_is_flexable_w_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rich_text_render_node.o(i.rich_text_is_flexable_w_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rich_text_is_flexable_w_char &rArr; wcschr
</UL>
<BR>[Calls]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcschr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_tune_row
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
</UL>

<P><STRONG><a name="[abb]"></a>rich_text_line_break_check</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rich_text_render_node.o(i.rich_text_line_break_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = rich_text_line_break_check &rArr; line_break_check &rArr; is_line_breakable &rArr; set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_break_check
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_break_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
</UL>

<P><STRONG><a name="[e20]"></a>rich_text_node_append</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rich_text_node.o(i.rich_text_node_append))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_text
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
</UL>

<P><STRONG><a name="[abd]"></a>rich_text_node_destroy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rich_text_node.o(i.rich_text_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rich_text_node_destroy &rArr; rich_text_text_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_destroy
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_reset
</UL>

<P><STRONG><a name="[ac1]"></a>rich_text_parse</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, rich_text_parser.o(i.rich_text_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rich_text_parse &rArr; xml_parser_parse &rArr; xml_parser_parse_start_tag &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_set_builder
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_destroy
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_create
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_destroy
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_text
</UL>

<P><STRONG><a name="[aca]"></a>rich_text_render_node_append</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rich_text_render_node.o(i.rich_text_render_node_append))
<BR><BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
</UL>

<P><STRONG><a name="[ac7]"></a>rich_text_render_node_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rich_text_render_node.o(i.rich_text_render_node_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rich_text_render_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
</UL>

<P><STRONG><a name="[ac8]"></a>rich_text_render_node_destroy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rich_text_render_node.o(i.rich_text_render_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rich_text_render_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_reset
</UL>

<P><STRONG><a name="[ab6]"></a>rich_text_render_node_layout</STRONG> (Thumb, 916 bytes, Stack size 152 bytes, rich_text_render_node.o(i.rich_text_render_node_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = rich_text_render_node_layout &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_tune_row
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_create
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_append
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_line_break_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_ensure_render_node
</UL>

<P><STRONG><a name="[ac9]"></a>rich_text_render_node_tune_row</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rich_text_render_node.o(i.rich_text_render_node_tune_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rich_text_render_node_tune_row &rArr; rich_text_is_flexable_w_char &rArr; wcschr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_is_flexable_w_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
</UL>

<P><STRONG><a name="[acb]"></a>rich_text_set_text</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rich_text.o(i.rich_text_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rich_text_set_text &rArr; rich_text_parse &rArr; xml_parser_parse &rArr; xml_parser_parse_start_tag &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_prop
</UL>

<P><STRONG><a name="[acc]"></a>rich_text_text_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rich_text_node.o(i.rich_text_text_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rich_text_text_create &rArr; rich_text_text_create_with_len &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_text
</UL>

<P><STRONG><a name="[acd]"></a>rich_text_text_create_with_len</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, rich_text_node.o(i.rich_text_text_create_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rich_text_text_create_with_len &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create
</UL>

<P><STRONG><a name="[abe]"></a>rich_text_text_destroy</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rich_text_node.o(i.rich_text_text_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rich_text_text_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_node_destroy
</UL>

<P><STRONG><a name="[56b]"></a>rom_fclose</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rom_fs.o(i.rom_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rom_fclose &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[56a]"></a>rom_fopen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rom_fs.o(i.rom_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rom_fopen &rArr; rom_fopen_buff &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fopen_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[ace]"></a>rom_fopen_buff</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rom_fs.o(i.rom_fopen_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rom_fopen_buff &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fopen
</UL>

<P><STRONG><a name="[543]"></a>rom_fread</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rom_fs.o(i.rom_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rom_fread
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::load_ngram(_rom_file_t*)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::SpellingTrie::load_spl_trie(_rom_file_t*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::load_list(_rom_file_t*)
</UL>

<P><STRONG><a name="[acf]"></a>rotate_bgr565_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgr565.o(i.rotate_bgr565_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_bgr565_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[ad1]"></a>rotate_bgr888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgr888.o(i.rotate_bgr888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_bgr888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[ad3]"></a>rotate_bgra8888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgra8888.o(i.rotate_bgra8888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_bgra8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[ad7]"></a>rotate_rgb565_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_rgb565.o(i.rotate_rgb565_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_rgb565_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[ad8]"></a>rotate_rgba8888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_rgba8888.o(i.rotate_rgba8888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[220]"></a>row_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, row.o(i.row_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = row_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> row.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[982]"></a>scroll_bar_add_delta</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_add_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scroll_bar_add_delta &rArr; scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_event
</UL>

<P><STRONG><a name="[adc]"></a>scroll_bar_add_delta_ex</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_add_delta_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_delta
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta
</UL>

<P><STRONG><a name="[741]"></a>scroll_bar_cast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scroll_bar.o(i.scroll_bar_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_params
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta_ex
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_value_animate_end
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_up_button_clicked
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_opactiy_animate_end
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_drag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_down_button_clicked
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_get_dragger_size
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_get_prop
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_destop_get_dragger_size
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_click
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_internal
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_to_scroll_bar
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_to_scroll_view
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_bar_value_changed
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[16f]"></a>scroll_bar_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create &rArr; scroll_bar_create_mobile &rArr; scroll_bar_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_mobile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[170]"></a>scroll_bar_create_desktop</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_create_desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create_desktop &rArr; scroll_bar_create_children &rArr; widget_set_self_layout_params &rArr; widget_set_self_layout &rArr; self_layouter_create &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_desktop_self
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[316]"></a>scroll_bar_create_desktop_self</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_create_desktop_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create_desktop_self &rArr; scroll_bar_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_desktop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>scroll_bar_create_mobile</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_create_mobile))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create_mobile &rArr; scroll_bar_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scroll_bar.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[73d]"></a>scroll_bar_is_mobile</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scroll_bar.o(i.scroll_bar_is_mobile))
<BR><BR>[Called By]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_opactiy_animate_end
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[ae2]"></a>scroll_bar_scroll_delta</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_scroll_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scroll_bar_scroll_delta &rArr; scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_up_button_clicked
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_down_button_clicked
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_click
</UL>

<P><STRONG><a name="[988]"></a>scroll_bar_scroll_to</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_only
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_opacity
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta_ex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
</UL>

<P><STRONG><a name="[745]"></a>scroll_bar_set_params</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scroll_bar_set_params &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_scrollbar
</UL>

<P><STRONG><a name="[742]"></a>scroll_bar_set_value</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scroll_bar_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta_ex
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_drag
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[986]"></a>scroll_bar_set_value_only</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_set_value_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_bar_set_value_only &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_scrollbar
</UL>

<P><STRONG><a name="[73b]"></a>scroll_view_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scroll_view.o(i.scroll_view_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_virtual_h
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_create
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_update_virtual_size
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_scroll_done
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_layout_children
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_add_child
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_get_prop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_fix_end_offset_default
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_find_target
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_yslidable
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_xslidable
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_virtual_w
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_add_child
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_offset
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_to_scroll_bar
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_to_scroll_view
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_add_child
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[16b]"></a>scroll_view_create</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, scroll_view.o(i.scroll_view_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = scroll_view_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scroll_view.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[31c]"></a>scroll_view_invalidate</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, scroll_view.o(i.scroll_view_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scroll_view_invalidate &rArr; rect_intersect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[ae8]"></a>scroll_view_invalidate_self</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, scroll_view.o(i.scroll_view_invalidate_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = scroll_view_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_scroll_done
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_offset
</UL>

<P><STRONG><a name="[aee]"></a>scroll_view_scroll_to</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, scroll_view.o(i.scroll_view_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = scroll_view_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_up
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_down_abort
</UL>

<P><STRONG><a name="[743]"></a>scroll_view_set_offset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_set_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scroll_view_set_offset &rArr; scroll_view_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_layout_children
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_bar_value_changed
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[744]"></a>scroll_view_set_virtual_h</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_set_virtual_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_view_set_virtual_h &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[981]"></a>scroll_view_set_virtual_w</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_set_virtual_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_view_set_virtual_w &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
</UL>

<P><STRONG><a name="[746]"></a>scroll_view_set_xslidable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_set_xslidable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_view_set_xslidable &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[747]"></a>scroll_view_set_yslidable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_set_yslidable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_view_set_yslidable &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[af0]"></a>self_layouter_create</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, self_layouter_parser.o(i.self_layouter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = self_layouter_create &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout
</UL>

<P><STRONG><a name="[14f]"></a>self_layouter_default_create</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, self_layouter_default.o(i.self_layouter_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = self_layouter_default_create &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_builtins.o(i.self_layouter_register_builtins)
</UL>
<P><STRONG><a name="[2a7]"></a>self_layouter_default_get_param</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, self_layouter_default.o(i.self_layouter_default_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = self_layouter_default_get_param &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[72c]"></a>self_layouter_default_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, self_layouter_default.o(i.self_layouter_default_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
</UL>

<P><STRONG><a name="[2a6]"></a>self_layouter_default_layout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, self_layouter_default.o(i.self_layouter_default_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = self_layouter_default_layout &rArr; widget_layout_self_with_rect &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a8]"></a>self_layouter_default_set_param</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, self_layouter_default.o(i.self_layouter_default_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = self_layouter_default_set_param &rArr; tk_atoi &rArr; tk_strtol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>self_layouter_default_to_string</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, self_layouter_default.o(i.self_layouter_default_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = self_layouter_default_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[d6b]"></a>self_layouter_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, self_layouter.o(i.self_layouter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = self_layouter_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[af8]"></a>self_layouter_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, self_layouter_factory.o(i.self_layouter_factory))
<BR><BR>[Called By]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_register_builtins
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_parser_on_name
</UL>

<P><STRONG><a name="[af1]"></a>self_layouter_factory_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, self_layouter_factory.o(i.self_layouter_factory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = self_layouter_factory_create &rArr; self_layouter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[af3]"></a>self_layouter_factory_create_layouter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, self_layouter_factory.o(i.self_layouter_factory_create_layouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = self_layouter_factory_create_layouter &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_parser_on_name
</UL>

<P><STRONG><a name="[af4]"></a>self_layouter_factory_register</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, self_layouter_factory.o(i.self_layouter_factory_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = self_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_register_builtins
</UL>

<P><STRONG><a name="[d03]"></a>self_layouter_factory_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, self_layouter_factory.o(i.self_layouter_factory_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[d8e]"></a>self_layouter_layout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, self_layouter.o(i.self_layouter_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = self_layouter_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self
</UL>

<P><STRONG><a name="[150]"></a>self_layouter_menu_create</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, self_layouter_menu.o(i.self_layouter_menu_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = self_layouter_menu_create &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_builtins.o(i.self_layouter_register_builtins)
</UL>
<P><STRONG><a name="[2e8]"></a>self_layouter_menu_get_param</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, self_layouter_menu.o(i.self_layouter_menu_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = self_layouter_menu_get_param &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_menu.o(.constdata)
</UL>
<P><STRONG><a name="[d8f]"></a>self_layouter_menu_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, self_layouter_menu.o(i.self_layouter_menu_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_menu_with_rect
</UL>

<P><STRONG><a name="[2e7]"></a>self_layouter_menu_layout</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, self_layouter_menu.o(i.self_layouter_menu_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = self_layouter_menu_layout &rArr; widget_layout_self_get_trigger &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_menu_with_rect
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_get_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_menu.o(.constdata)
</UL>
<P><STRONG><a name="[2e9]"></a>self_layouter_menu_set_param</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, self_layouter_menu.o(i.self_layouter_menu_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = self_layouter_menu_set_param &rArr; tk_atoi &rArr; tk_strtol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_menu.o(.constdata)
</UL>
<P><STRONG><a name="[afa]"></a>self_layouter_register_builtins</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, self_layouter_builtins.o(i.self_layouter_register_builtins))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = self_layouter_register_builtins &rArr; self_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_register
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[afb]"></a>self_layouter_set_param</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, self_layouter.o(i.self_layouter_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = self_layouter_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_set_param_str
</UL>

<P><STRONG><a name="[af9]"></a>self_layouter_set_param_str</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, self_layouter.o(i.self_layouter_set_param_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = self_layouter_set_param_str &rArr; self_layouter_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_parser_on_param
</UL>

<P><STRONG><a name="[d83]"></a>self_layouter_to_string</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, self_layouter.o(i.self_layouter_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = self_layouter_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>

<P><STRONG><a name="[afd]"></a>set_linebreaks</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, linebreak.o(i.set_linebreaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_init_break_context
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks_utf32
</UL>

<P><STRONG><a name="[942]"></a>set_linebreaks_utf32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, linebreak.o(i.set_linebreaks_utf32))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_linebreaks
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_line_breakable
</UL>

<P><STRONG><a name="[b02]"></a>set_wordbreaks_utf32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wordbreak.o(i.set_wordbreaks_utf32))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = set_wordbreaks_utf32 &rArr; set_wordbreaks &rArr; set_brks_to &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_break_check
</UL>

<P><STRONG><a name="[9b4]"></a>sleep_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform.o(i.sleep_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sleep_ms &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep_default
</UL>

<P><STRONG><a name="[b03]"></a>slide_indicator_cast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, slide_indicator.o(i.slide_indicator_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slide_indicator_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_arc
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_spacing
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_size
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_max
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_margin
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_target
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_default_paint
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_auto_hide
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_y
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_x
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_destroy
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_value_changed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_up
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_down_abort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_down
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_destroy
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_reset_indicated_widget
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_linear
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_paint_self
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_layout_children
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_animate_end
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fix_anchor
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_active_indicator
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_arc_on_paint_self
</UL>

<P><STRONG><a name="[173]"></a>slide_indicator_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, slide_indicator.o(i.slide_indicator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = slide_indicator_create &rArr; slide_indicator_create_linear &rArr; slide_indicator_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_linear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>slide_indicator_create_arc</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_create_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = slide_indicator_create_arc &rArr; slide_indicator_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_internal
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b07]"></a>slide_indicator_create_internal</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, slide_indicator.o(i.slide_indicator_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = slide_indicator_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_arc
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_linear
</UL>

<P><STRONG><a name="[b06]"></a>slide_indicator_create_linear</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, slide_indicator.o(i.slide_indicator_create_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = slide_indicator_create_linear &rArr; slide_indicator_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create
</UL>

<P><STRONG><a name="[351]"></a>slide_indicator_on_destroy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = slide_indicator_on_destroy &rArr; slide_indicator_reset_indicated_widget &rArr; widget_off_by_func &rArr; emitter_off_by_func &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_reset_indicated_widget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b15]"></a>slide_indicator_set_anchor_x</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_set_anchor_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = slide_indicator_set_anchor_x &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b17]"></a>slide_indicator_set_anchor_y</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_set_anchor_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = slide_indicator_set_anchor_y &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b18]"></a>slide_indicator_set_auto_hide</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_auto_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_indicator_set_auto_hide &rArr; slide_indicator_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b19]"></a>slide_indicator_set_default_paint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_default_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_indicator_set_default_paint &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b1a]"></a>slide_indicator_set_indicated_target</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_indicated_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = slide_indicator_set_indicated_target &rArr; slide_indicator_reset_indicated_widget &rArr; widget_off_by_func &rArr; emitter_off_by_func &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_reset_indicated_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b1e]"></a>slide_indicator_set_margin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_indicator_set_margin &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b1c]"></a>slide_indicator_set_max</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_indicator_set_max &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
</UL>

<P><STRONG><a name="[b21]"></a>slide_indicator_set_size</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_indicator_set_size &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b20]"></a>slide_indicator_set_spacing</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_set_spacing))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = slide_indicator_set_spacing &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[b1d]"></a>slide_indicator_set_value</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = slide_indicator_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
</UL>

<P><STRONG><a name="[b24]"></a>slide_menu_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, slide_menu.o(i.slide_menu_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slide_menu_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_create
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_min_scale
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_align_v
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_scroll_done
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_nr
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_prop
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_delta_index
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_clip_r
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_find_target
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>

<P><STRONG><a name="[183]"></a>slide_menu_create</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = slide_menu_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_widgets.o(i.tk_ext_widgets_init)
<LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[b2b]"></a>slide_menu_fix_index</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_fix_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = slide_menu_fix_index
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_scroll_done
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_child
</UL>

<P><STRONG><a name="[b39]"></a>slide_menu_set_align_v</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_set_align_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_menu_set_align_v &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
</UL>

<P><STRONG><a name="[b3a]"></a>slide_menu_set_min_scale</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, slide_menu.o(i.slide_menu_set_min_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = slide_menu_set_min_scale &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
</UL>

<P><STRONG><a name="[b3b]"></a>slide_menu_set_value</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = slide_menu_set_value &rArr; slide_menu_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value_only
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
</UL>

<P><STRONG><a name="[b3c]"></a>slide_view_activate_next</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_activate_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = slide_view_activate_next &rArr; slide_view_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_is_loopable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_scroll_done
</UL>

<P><STRONG><a name="[b3f]"></a>slide_view_activate_prev</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_activate_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = slide_view_activate_prev &rArr; slide_view_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_is_loopable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_scroll_done
</UL>

<P><STRONG><a name="[b45]"></a>slide_view_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, slide_view.o(i.slide_view_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slide_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_vertical
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_loop
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_auto_play
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_anim_hint
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_create
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_timer_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_scroll_done
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_destroy
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prop
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_find_target
</UL>

<P><STRONG><a name="[172]"></a>slide_view_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, slide_view.o(i.slide_view_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = slide_view_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_view.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[b41]"></a>slide_view_get_next</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_view_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_is_loopable
</UL>
<BR>[Called By]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
</UL>

<P><STRONG><a name="[b42]"></a>slide_view_get_prev</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_get_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_view_get_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_is_loopable
</UL>
<BR>[Called By]<UL><LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
</UL>

<P><STRONG><a name="[b3d]"></a>slide_view_set_active</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, slide_view.o(i.slide_view_set_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = slide_view_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_prev
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_next
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
</UL>

<P><STRONG><a name="[b54]"></a>slide_view_set_anim_hint</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_set_anim_hint))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = slide_view_set_anim_hint &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
</UL>

<P><STRONG><a name="[b55]"></a>slide_view_set_auto_play</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_set_auto_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = slide_view_set_auto_play &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
</UL>

<P><STRONG><a name="[b56]"></a>slide_view_set_loop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_set_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_view_set_loop &rArr; slide_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
</UL>

<P><STRONG><a name="[b57]"></a>slide_view_set_vertical</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_set_vertical))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_view_set_vertical &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
</UL>

<P><STRONG><a name="[b59]"></a>slider_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, slider.o(i.slider_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slider_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_pointer_up_cleanup
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_prop
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_dragger_rect
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_bar_size
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_add_value
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_vertical
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_step
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_min
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_max
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_bar_size
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_inc
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_dec
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_create
</UL>

<P><STRONG><a name="[221]"></a>slider_create</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, slider.o(i.slider_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = slider_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> slider.o(.constdata)
</UL>
<P><STRONG><a name="[b5b]"></a>slider_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, slider.o(i.slider_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = slider_dec &rArr; slider_add_value &rArr; slider_set_value &rArr; slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_add_value
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
</UL>

<P><STRONG><a name="[b5e]"></a>slider_inc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, slider.o(i.slider_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = slider_inc &rArr; slider_add_value &rArr; slider_set_value &rArr; slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_add_value
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
</UL>

<P><STRONG><a name="[b62]"></a>slider_set_bar_size</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slider.o(i.slider_set_bar_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_set_bar_size &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
</UL>

<P><STRONG><a name="[b63]"></a>slider_set_max</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slider.o(i.slider_set_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_set_max &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
</UL>

<P><STRONG><a name="[b64]"></a>slider_set_min</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slider.o(i.slider_set_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_set_min &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
</UL>

<P><STRONG><a name="[b66]"></a>slider_set_step</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, slider.o(i.slider_set_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_set_step &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
</UL>

<P><STRONG><a name="[b5a]"></a>slider_set_value</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, slider.o(i.slider_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = slider_set_value &rArr; slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_add_value
</UL>

<P><STRONG><a name="[b60]"></a>slider_set_value_internal</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, slider.o(i.slider_set_value_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
</UL>

<P><STRONG><a name="[b65]"></a>slider_set_vertical</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, slider.o(i.slider_set_vertical))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_set_vertical &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
</UL>

<P><STRONG><a name="[8cf]"></a>slist_append</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, slist.o(i.slist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_node_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_append
<LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_append
</UL>

<P><STRONG><a name="[8d3]"></a>slist_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, slist.o(i.slist_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = slist_deinit &rArr; slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_remove_all
</UL>
<BR>[Called By]<UL><LI><a href="#[cd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_deinit
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_deinit
</UL>

<P><STRONG><a name="[cd9]"></a>slist_find</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, slist.o(i.slist_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = slist_find
</UL>
<BR>[Called By]<UL><LI><a href="#[cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_find
</UL>

<P><STRONG><a name="[8d8]"></a>slist_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, slist.o(i.slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_init
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_init
</UL>

<P><STRONG><a name="[8d9]"></a>slist_remove</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, slist.o(i.slist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_node_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_remove
<LI><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_remove
</UL>

<P><STRONG><a name="[b68]"></a>slist_remove_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, slist.o(i.slist_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_node_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_deinit
</UL>

<P><STRONG><a name="[8f4]"></a>soft_blend_image</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, soft_g2d.o(i.soft_blend_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>
<BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
</UL>

<P><STRONG><a name="[8f8]"></a>soft_copy_image</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, soft_g2d.o(i.soft_copy_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = soft_copy_image &rArr; tk_pixel_copy &rArr; tk_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
</UL>

<P><STRONG><a name="[8fb]"></a>soft_fill_rect</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, soft_g2d.o(i.soft_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgba8888_rect
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb565_rect
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgra8888_rect
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr888_rect
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr565_rect
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_argb8888_rect
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_abgr8888_rect
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
</UL>

<P><STRONG><a name="[90e]"></a>soft_rotate_image</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, soft_g2d.o(i.soft_rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgba8888_image
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb565_image
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgra8888_image
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr888_image
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr565_image
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
</UL>

<P><STRONG><a name="[23f]"></a>spin_box_create</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, spin_box.o(i.spin_box_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = spin_box_create &rArr; spin_box_create_self &rArr; edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_repeat
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout_params
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>spin_box_create_self</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, spin_box.o(i.spin_box_create_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = spin_box_create_self &rArr; edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spin_box.o(.constdata)
</UL>
<P><STRONG><a name="[5ad]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5af]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[12a]"></a>start_task</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8fe]"></a>stb_load_image</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, image_loader_stb.o(i.stb_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 35664 + Unknown Stack Size
<LI>Call Chain = stb_load_image &rArr; stbi_load_from_memory &rArr; stbi__load_and_postprocess_8bit &rArr; stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba_data_is_opaque
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init_from_rgba
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_gif_from_memory
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_from_memory
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_image_free
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_stb_load
</UL>

<P><STRONG><a name="[b6d]"></a>stbi_image_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi_image_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi_image_free &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>

<P><STRONG><a name="[b6c]"></a>stbi_load_from_memory</STRONG> (Thumb, 50 bytes, Stack size 216 bytes, image_loader_stb.o(i.stbi_load_from_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 35584 + Unknown Stack Size
<LI>Call Chain = stbi_load_from_memory &rArr; stbi__load_and_postprocess_8bit &rArr; stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__start_mem
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_and_postprocess_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>

<P><STRONG><a name="[b6e]"></a>stbi_load_gif_from_memory</STRONG> (Thumb, 86 bytes, Stack size 240 bytes, image_loader_stb.o(i.stbi_load_gif_from_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 35528 + Unknown Stack Size
<LI>Call Chain = stbi_load_gif_from_memory &rArr; stbi__load_gif_main &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__vertical_flip_slices
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__start_mem
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>

<P><STRONG><a name="[bf8]"></a>stbi_zlib_decode_malloc_guesssize_headerflag</STRONG> (Thumb, 100 bytes, Stack size 4104 bytes, image_loader_stb.o(i.stbi_zlib_decode_malloc_guesssize_headerflag))
<BR><BR>[Stack]<UL><LI>Max Depth = 6944 + Unknown Stack Size
<LI>Call Chain = stbi_zlib_decode_malloc_guesssize_headerflag &rArr; stbi__do_zlib &rArr; stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_zlib
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[c0c]"></a>stbtt_FindGlyphIndex</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, font_loader_stb.o(i.stbtt_FindGlyphIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = stbtt_FindGlyphIndex &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointHMetrics
<LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapSubpixel
</UL>

<P><STRONG><a name="[872]"></a>stbtt_GetCodepointBitmap</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, font_loader_stb.o(i.stbtt_GetCodepointBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = stbtt_GetCodepointBitmap &rArr; stbtt_GetCodepointBitmapSubpixel &rArr; stbtt_GetGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapSubpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
</UL>

<P><STRONG><a name="[c14]"></a>stbtt_GetCodepointBitmapSubpixel</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, font_loader_stb.o(i.stbtt_GetCodepointBitmapSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = stbtt_GetCodepointBitmapSubpixel &rArr; stbtt_GetGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmap
</UL>

<P><STRONG><a name="[873]"></a>stbtt_GetCodepointHMetrics</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt_GetCodepointHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = stbtt_GetCodepointHMetrics &rArr; stbtt_FindGlyphIndex &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
</UL>

<P><STRONG><a name="[86c]"></a>stbtt_GetFontOffsetForIndex</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt_GetFontOffsetForIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbtt_GetFontOffsetForIndex &rArr; stbtt_GetFontOffsetForIndex_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>

<P><STRONG><a name="[86e]"></a>stbtt_GetFontVMetrics</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt_GetFontVMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_GetFontVMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>

<P><STRONG><a name="[c1a]"></a>stbtt_GetGlyphBitmapBoxSubpixel</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, font_loader_stb.o(i.stbtt_GetGlyphBitmapBoxSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
</UL>

<P><STRONG><a name="[c15]"></a>stbtt_GetGlyphBitmapSubpixel</STRONG> (Thumb, 280 bytes, Stack size 96 bytes, font_loader_stb.o(i.stbtt_GetGlyphBitmapSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = stbtt_GetGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
<LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
<LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapSubpixel
</UL>

<P><STRONG><a name="[c1b]"></a>stbtt_GetGlyphBox</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, font_loader_stb.o(i.stbtt_GetGlyphBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[c16]"></a>stbtt_GetGlyphHMetrics</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt_GetGlyphHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_GetGlyphHMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointHMetrics
</UL>

<P><STRONG><a name="[c1c]"></a>stbtt_GetGlyphShape</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt_GetGlyphShape))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = stbtt_GetGlyphShape &rArr; stbtt__GetGlyphShapeT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[86d]"></a>stbtt_InitFont</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt_InitFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>

<P><STRONG><a name="[c1d]"></a>stbtt_Rasterize</STRONG> (Thumb, 154 bytes, Stack size 96 bytes, font_loader_stb.o(i.stbtt_Rasterize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = stbtt_Rasterize &rArr; stbtt__rasterize &rArr; stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>
<BR>[Called By]<UL><LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
</UL>

<P><STRONG><a name="[870]"></a>stbtt_ScaleForPixelHeight</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt_ScaleForPixelHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_ScaleForPixelHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_baseline
</UL>

<P><STRONG><a name="[a70]"></a>stm32f769_create_lcd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.stm32f769_create_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stm32f769_create_lcd &rArr; lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_bgr565_create_double_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_lcd
</UL>

<P><STRONG><a name="[731]"></a>str_append</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, str.o(i.str_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = str_append &rArr; str_append_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_with_len
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_to_string
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_to_string
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_to_string
</UL>

<P><STRONG><a name="[92c]"></a>str_append_char</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, str.o(i.str_append_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = str_append_char &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_input
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_expand_vars
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
</UL>

<P><STRONG><a name="[c49]"></a>str_append_with_len</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, str.o(i.str_append_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = str_append_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
</UL>

<P><STRONG><a name="[c4c]"></a>str_decode_xml_entity_with_len</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, str.o(i.str_decode_xml_entity_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = str_decode_xml_entity_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_text
</UL>

<P><STRONG><a name="[c4d]"></a>str_expand_vars</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, str.o(i.str_expand_vars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_char
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
</UL>
<BR>[Called By]<UL><LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_one
</UL>

<P><STRONG><a name="[c4a]"></a>str_extend</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, str.o(i.str_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_char
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_decode_xml_entity_with_len
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_with_len
</UL>

<P><STRONG><a name="[c4e]"></a>str_from_wstr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, str.o(i.str_from_wstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = str_from_wstr &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[ca7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_text
</UL>

<P><STRONG><a name="[684]"></a>str_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, str.o(i.str_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_self
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
<LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init_ex
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_create
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_create
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_create
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builder_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_create
</UL>

<P><STRONG><a name="[76e]"></a>str_replace</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, str.o(i.str_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = str_replace &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_count_sub_str
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[728]"></a>str_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, str.o(i.str_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_destroy
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_destroy
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_destroy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_destroy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_destroy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_destroy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_destroy
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_destroy
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_destroy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_destroy
</UL>

<P><STRONG><a name="[730]"></a>str_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, str.o(i.str_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_one
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_to_string
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_to_string
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_clear
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_to_string
</UL>

<P><STRONG><a name="[757]"></a>str_set_with_len</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, str.o(i.str_set_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_set_data
</UL>

<P><STRONG><a name="[76c]"></a>str_start_with</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, str.o(i.str_start_with))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = str_start_with &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[997]"></a>str_table_lookup</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, locale_info.o(i.str_table_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = str_table_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
</UL>

<P><STRONG><a name="[76d]"></a>str_to_lower</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, str.o(i.str_to_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = str_to_lower &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[732]"></a>str_trim_right</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, str.o(i.str_trim_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = str_trim_right
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_to_string
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_to_string
</UL>

<P><STRONG><a name="[c50]"></a>style_const_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, style_const.o(i.style_const_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = style_const_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_create
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory_create_style
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory_create_style_mutable
</UL>

<P><STRONG><a name="[262]"></a>style_const_get_color</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, style_const.o(i.style_const_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = style_const_get_color &rArr; style_data_get_color &rArr; style_data_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>style_const_get_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, style_const.o(i.style_const_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = style_const_get_int &rArr; style_data_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[c52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[261]"></a>style_const_get_str</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, style_const.o(i.style_const_get_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = style_const_get_str &rArr; style_data_get_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>style_const_is_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, style_const.o(i.style_const_is_valid))
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[c51]"></a>style_data_get_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, theme.o(i.style_data_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = style_data_get_color &rArr; style_data_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[c52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_get_color
</UL>

<P><STRONG><a name="[c52]"></a>style_data_get_int</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, theme.o(i.style_data_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = style_data_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_data_get_color
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_get_int
</UL>

<P><STRONG><a name="[c53]"></a>style_data_get_str</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, theme.o(i.style_data_get_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = style_data_get_str
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_get_str
</UL>

<P><STRONG><a name="[c5c]"></a>style_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, style.o(i.style_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = style_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_destroy
</UL>

<P><STRONG><a name="[d88]"></a>style_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, style_factory.o(i.style_factory))
<BR><BR>[Called By]<UL><LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>

<P><STRONG><a name="[c55]"></a>style_factory_create_style</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, style_factory.o(i.style_factory_create_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = style_factory_create_style &rArr; style_const_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>

<P><STRONG><a name="[69d]"></a>style_get_color</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, style.o(i.style_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_caret
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_on_paint_self
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
</UL>

<P><STRONG><a name="[6b8]"></a>style_get_int</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, style.o(i.style_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = style_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text_mlines
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_default
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_align_h
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_step
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_ensure_render_node
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[8ae]"></a>style_get_str</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, style.o(i.style_get_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = style_get_str
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
</UL>

<P><STRONG><a name="[951]"></a>style_is_valid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, style.o(i.style_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = style_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_self_default
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_on_paint_self
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_border
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_background
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_is_valid
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
</UL>

<P><STRONG><a name="[c5a]"></a>style_mutable_cast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, style_mutable.o(i.style_mutable_cast))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_set_value
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_reset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_is_valid
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_notify_widget_state_changed
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_destroy
</UL>

<P><STRONG><a name="[c56]"></a>style_mutable_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, style_mutable.o(i.style_mutable_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = style_mutable_create &rArr; style_const_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_style_mutable
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory_create_style_mutable
</UL>

<P><STRONG><a name="[2e1]"></a>style_mutable_get_str</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, style_mutable.o(i.style_mutable_get_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = style_mutable_get_str &rArr; style_mutable_get_widget_state &rArr; widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_get_value
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[2df]"></a>style_mutable_is_valid</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, style_mutable.o(i.style_mutable_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = style_mutable_is_valid &rArr; style_mutable_get_widget_state &rArr; widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[c5b]"></a>style_mutable_reset</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, style_mutable.o(i.style_mutable_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = style_mutable_reset &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_destroy
</UL>

<P><STRONG><a name="[2e4]"></a>style_mutable_set_value</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, style_mutable.o(i.style_mutable_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = style_mutable_set_value &rArr; style_item_set &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_add
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_set
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[c61]"></a>style_notify_widget_state_changed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, style.o(i.style_notify_widget_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = style_notify_widget_state_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_notify_widget_state_changed
</UL>

<P><STRONG><a name="[dbd]"></a>style_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, style.o(i.style_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = style_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
</UL>

<P><STRONG><a name="[933]"></a>suggest_words_create</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, suggest_words.o(i.suggest_words_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = suggest_words_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_create
</UL>

<P><STRONG><a name="[934]"></a>suggest_words_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, suggest_words.o(i.suggest_words_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = suggest_words_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_destroy
</UL>

<P><STRONG><a name="[6af]"></a>suggest_words_find</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, suggest_words.o(i.suggest_words_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = suggest_words_find &rArr; suggest_words_update &rArr; wbuffer_write_string &rArr; wbuffer_write_binary &rArr; wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_find_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_button_click
</UL>

<P><STRONG><a name="[c66]"></a>svg_image_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, svg_image.o(i.svg_image_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svg_image_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_create
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_destroy
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
</UL>

<P><STRONG><a name="[17f]"></a>svg_image_create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, svg_image.o(i.svg_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svg_image_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_init
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> svg_image.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[681]"></a>svg_path_size</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, svg_path.o(i.svg_path_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = svg_path_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_visit_path
</UL>

<P><STRONG><a name="[67f]"></a>svg_shape_size</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, svg_shape.o(i.svg_shape_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = svg_shape_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_visit
</UL>

<P><STRONG><a name="[c68]"></a>switch_cast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, switch.o(i.switch_cast))
<BR><BR>[Called By]<UL><LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_create
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_scroll_done
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_get_prop
</UL>

<P><STRONG><a name="[17c]"></a>switch_create</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, switch.o(i.switch_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = switch_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> switch.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[c6e]"></a>switch_set_value</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, switch.o(i.switch_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = switch_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_scroll_done
</UL>

<P><STRONG><a name="[242]"></a>system_bar_create</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, system_bar.o(i.system_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = system_bar_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> system_bar.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>system_bar_on_event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_bar.o(i.system_bar_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = system_bar_on_event &rArr; window_base_on_event &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bar.o(.constdata)
</UL>
<P><STRONG><a name="[704]"></a>system_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_info.o(i.system_info))
<BR><BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_is_swappable
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_exprs
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_expr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[c71]"></a>system_info_create</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, system_info.o(i.system_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = system_info_create &rArr; system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
</UL>

<P><STRONG><a name="[c73]"></a>system_info_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_info.o(i.system_info_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = system_info_deinit &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[908]"></a>system_info_eval_exprs</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, system_info.o(i.system_info_eval_exprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_one
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_exprs
<LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_expr
</UL>

<P><STRONG><a name="[6b7]"></a>system_info_fix_font_name</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, system_info.o(i.system_info_fix_font_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_info_fix_font_name
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[c75]"></a>system_info_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system_info.o(i.system_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = system_info_init &rArr; system_info_create &rArr; system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_default_font
<LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
<LI><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
</UL>

<P><STRONG><a name="[c72]"></a>system_info_set_app_info</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system_info.o(i.system_info_set_app_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_normalize_app_root
</UL>
<BR>[Called By]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
<LI><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
</UL>

<P><STRONG><a name="[c76]"></a>system_info_set_default_font</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_default_font))
<BR><BR>[Called By]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
</UL>

<P><STRONG><a name="[968]"></a>system_info_set_device_pixel_ratio</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_device_pixel_ratio))
<BR><BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[966]"></a>system_info_set_lcd_h</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_h))
<BR><BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[967]"></a>system_info_set_lcd_type</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_type))
<BR><BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[965]"></a>system_info_set_lcd_w</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_w))
<BR><BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[c78]"></a>tab_button_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tab_button.o(i.tab_button_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tab_button_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_icon
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_active_icon
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_create
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_paint_self
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_destroy
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_min_w
</UL>

<P><STRONG><a name="[229]"></a>tab_button_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, tab_button.o(i.tab_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tab_button_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tab_button.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[c7d]"></a>tab_button_group_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tab_button_group.o(i.tab_button_group_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tab_button_group_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_scrollable
<LI><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_compact
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_create
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_children
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_border
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_event
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_destroy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_invalidate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_prop
</UL>

<P><STRONG><a name="[22f]"></a>tab_button_group_create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, tab_button_group.o(i.tab_button_group_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tab_button_group_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_create
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[c82]"></a>tab_button_group_set_compact</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_set_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tab_button_group_set_compact &rArr; tab_button_group_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
</UL>

<P><STRONG><a name="[c83]"></a>tab_button_group_set_scrollable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_set_scrollable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tab_button_group_set_scrollable &rArr; tab_button_group_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
</UL>

<P><STRONG><a name="[c85]"></a>tab_button_set_active_icon</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tab_button.o(i.tab_button_set_active_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tab_button_set_active_icon &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
</UL>

<P><STRONG><a name="[c86]"></a>tab_button_set_icon</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tab_button.o(i.tab_button_set_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tab_button_set_icon &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
</UL>

<P><STRONG><a name="[c84]"></a>tab_button_set_value</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tab_button.o(i.tab_button_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = tab_button_set_value &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_index_of
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_viewport
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_pages
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_event
</UL>

<P><STRONG><a name="[23a]"></a>tab_control_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tab_control.o(i.tab_control_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tab_control_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tab_control.o(.constdata)
<LI> widget_factory.o(.constdata)
</UL>
<P><STRONG><a name="[804]"></a>text_edit_click</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = text_edit_click &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_normalize_point
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_click
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[c8d]"></a>text_edit_copy</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, text_edit.o(i.text_edit_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = text_edit_copy &rArr; str_from_wstr &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append_with_len
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set_text
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_cut
</UL>

<P><STRONG><a name="[7f6]"></a>text_edit_create</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = text_edit_create &rArr; wstr_init &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_max_rows
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_initialize_state
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_create
</UL>

<P><STRONG><a name="[c8f]"></a>text_edit_cut</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = text_edit_cut &rArr; text_edit_copy &rArr; str_from_wstr &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_cut
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
</UL>

<P><STRONG><a name="[802]"></a>text_edit_destroy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = text_edit_destroy &rArr; wstr_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_destroy
</UL>

<P><STRONG><a name="[807]"></a>text_edit_drag</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = text_edit_drag &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_normalize_point
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_drag
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[7fd]"></a>text_edit_get_cursor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, text_edit.o(i.text_edit_get_cursor))
<BR><BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
</UL>

<P><STRONG><a name="[c93]"></a>text_edit_get_state</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = text_edit_get_state &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_notify
</UL>

<P><STRONG><a name="[81e]"></a>text_edit_invert_caret_visible</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, text_edit.o(i.text_edit_invert_caret_visible))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_caret
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_caret
</UL>

<P><STRONG><a name="[80d]"></a>text_edit_key_down</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, text_edit.o(i.text_edit_key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = text_edit_key_down &rArr; wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_normalize_newline
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paste
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_get_text
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_cut
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[c8c]"></a>text_edit_layout</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[c95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_layout_info
<LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_notify
<LI><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_line
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_tips
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_mask_char
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_mask
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paste
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_drag
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_click
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_wrap_word
<LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_do_paint
</UL>

<P><STRONG><a name="[80e]"></a>text_edit_paint</STRONG> (Thumb, 156 bytes, Stack size 104 bytes, text_edit.o(i.text_edit_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = text_edit_paint &rArr; text_edit_do_paint &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_do_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_paint_self
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_paint_self
</UL>

<P><STRONG><a name="[7f9]"></a>text_edit_paste</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_paste))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = text_edit_paste &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_do_input_char
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_commit_str
</UL>

<P><STRONG><a name="[81f]"></a>text_edit_set_caret_visible</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, text_edit.o(i.text_edit_set_caret_visible))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_caret
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_caret
</UL>

<P><STRONG><a name="[7f0]"></a>text_edit_set_cursor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_clear
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[81a]"></a>text_edit_set_mask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_set_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = text_edit_set_mask &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
</UL>

<P><STRONG><a name="[81b]"></a>text_edit_set_mask_char</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_set_mask_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = text_edit_set_mask_char &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
</UL>

<P><STRONG><a name="[9c5]"></a>text_edit_set_max_rows</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_set_max_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = text_edit_set_max_rows &rArr; rows_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_destroy
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_max_lines
</UL>

<P><STRONG><a name="[9bf]"></a>text_edit_set_offset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_set_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = text_edit_set_offset &rArr; text_edit_notify &rArr; text_edit_get_state &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_scroll_bar_value_changed
</UL>

<P><STRONG><a name="[9bb]"></a>text_edit_set_on_state_changed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, text_edit.o(i.text_edit_set_on_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = text_edit_set_on_state_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_add_child
</UL>

<P><STRONG><a name="[819]"></a>text_edit_set_tips</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_set_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = text_edit_set_tips &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_input_tips
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_input_tips
</UL>

<P><STRONG><a name="[9c7]"></a>text_edit_set_wrap_word</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_set_wrap_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = text_edit_set_wrap_word &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_wrap_word
</UL>

<P><STRONG><a name="[ca0]"></a>text_selector_append_option</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, text_selector.o(i.text_selector_append_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = text_selector_append_option &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_range_options_ex
</UL>

<P><STRONG><a name="[ca1]"></a>text_selector_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, text_selector.o(i.text_selector_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = text_selector_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_visible_nr
<LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_text
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_reset_options
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[ca7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_text
<LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_value
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
<LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_create
<LI><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_count_options
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_scroll_done
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_destroy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_value
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_value
</UL>

<P><STRONG><a name="[ca2]"></a>text_selector_count_options</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_count_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = text_selector_count_options &rArr; text_selector_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_up
</UL>

<P><STRONG><a name="[17b]"></a>text_selector_create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, text_selector.o(i.text_selector_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = text_selector_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> text_selector.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[ca3]"></a>text_selector_get_option</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = text_selector_get_option &rArr; text_selector_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[ca7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_text
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_value
</UL>

<P><STRONG><a name="[ca4]"></a>text_selector_get_option_by_text</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, text_selector.o(i.text_selector_get_option_by_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = text_selector_get_option_by_text &rArr; wstr_set_utf8 &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcscmp
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_text
</UL>

<P><STRONG><a name="[ca6]"></a>text_selector_get_option_by_value</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_get_option_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = text_selector_get_option_by_value &rArr; text_selector_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_value
</UL>

<P><STRONG><a name="[ca7]"></a>text_selector_get_text</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = text_selector_get_text &rArr; str_from_wstr &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
</UL>

<P><STRONG><a name="[adb]"></a>text_selector_get_value</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = text_selector_get_value &rArr; text_selector_get_option &rArr; text_selector_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_text_selector
</UL>

<P><STRONG><a name="[cb0]"></a>text_selector_parse_options</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, text_selector.o(i.text_selector_parse_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = text_selector_parse_options &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_has_more
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_deinit
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_reset_options
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
</UL>

<P><STRONG><a name="[ca8]"></a>text_selector_reset_options</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_reset_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = text_selector_reset_options &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_destroy
</UL>

<P><STRONG><a name="[cb1]"></a>text_selector_set_options</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, text_selector.o(i.text_selector_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = text_selector_set_options &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_sscanf
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_range_options_ex
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
</UL>

<P><STRONG><a name="[cb5]"></a>text_selector_set_selected_index</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_set_selected_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = text_selector_set_selected_index &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[ca3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_sync_yoffset_with_selected_index
<LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index_only
</UL>
<BR>[Called By]<UL><LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_text
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_value
</UL>

<P><STRONG><a name="[cb3]"></a>text_selector_set_text</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = text_selector_set_text &rArr; text_selector_set_selected_index &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
</UL>

<P><STRONG><a name="[afe]"></a>text_selector_set_value</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = text_selector_set_value &rArr; text_selector_set_selected_index &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[ca6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_value
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_text_selector
</UL>

<P><STRONG><a name="[cb4]"></a>text_selector_set_visible_nr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_set_visible_nr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = text_selector_set_visible_nr &rArr; text_selector_sync_yoffset_with_selected_index &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_sync_yoffset_with_selected_index
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
</UL>

<P><STRONG><a name="[cf4]"></a>theme</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, theme.o(i.theme))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
</UL>

<P><STRONG><a name="[cb8]"></a>theme_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, theme.o(i.theme_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = theme_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[cb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_load_theme_obj
</UL>

<P><STRONG><a name="[cbb]"></a>theme_deinit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, theme.o(i.theme_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_destroy
</UL>

<P><STRONG><a name="[cba]"></a>theme_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, theme.o(i.theme_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = theme_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[cbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[cbc]"></a>theme_find_style</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, theme.o(i.theme_find_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = theme_find_style
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
</UL>

<P><STRONG><a name="[cb9]"></a>theme_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, theme.o(i.theme_init))
<BR><BR>[Called By]<UL><LI><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_create
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
</UL>

<P><STRONG><a name="[cf5]"></a>theme_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, theme.o(i.theme_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[cbd]"></a>time_clock_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, time_clock.o(i.time_clock_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_clock_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_second_image
<LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_second
<LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_minute_image
<LI><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_minute
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_image
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_hour_image
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_hour
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_bg_image
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_timer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_paint_self
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_destroy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_get_prop
</UL>

<P><STRONG><a name="[177]"></a>time_clock_create</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, time_clock.o(i.time_clock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = time_clock_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
<LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_reset_time
</UL>
<BR>[Address Reference Count : 2]<UL><LI> time_clock.o(.constdata)
<LI> ext_widgets.o(i.tk_ext_widgets_init)
</UL>
<P><STRONG><a name="[cc1]"></a>time_clock_set_bg_image</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_bg_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_clock_set_bg_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc2]"></a>time_clock_set_hour</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_clock_set_hour &rArr; time_clock_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc3]"></a>time_clock_set_hour_image</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_hour_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_clock_set_hour_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc4]"></a>time_clock_set_image</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_clock_set_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc5]"></a>time_clock_set_minute</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_minute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_clock_set_minute &rArr; time_clock_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc6]"></a>time_clock_set_minute_image</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_minute_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_clock_set_minute_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc7]"></a>time_clock_set_second</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_clock_set_second &rArr; time_clock_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[cc8]"></a>time_clock_set_second_image</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_set_second_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = time_clock_set_second_image &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
</UL>

<P><STRONG><a name="[188]"></a>time_now_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time_now.o(i.time_now_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_post_pointer_event
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_impl
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_lookup
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_add
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep_default
<LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_fps
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> awtk_global.o(i.tk_init_internal)
</UL>
<P><STRONG><a name="[900]"></a>time_now_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, time_now.o(i.time_now_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = time_now_s &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_unload_unused
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_lookup
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
</UL>

<P><STRONG><a name="[5e3]"></a>timer_add</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timer_1.o(i.timer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_add
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_start_or_reset_screen_saver_timer
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_events
<LI><a href="#[d59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_update
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_create
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_auto_play
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_play
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_timer
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_start_init_if_not_inited
</UL>

<P><STRONG><a name="[9af]"></a>timer_dispatch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_1.o(i.timer_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = timer_dispatch &rArr; timer_manager_dispatch &rArr; timer_manager_dispatch_one &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ccb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_step
</UL>

<P><STRONG><a name="[167]"></a>timer_info_compare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_info.o(i.timer_info_compare))
<BR>[Address Reference Count : 1]<UL><LI> timer_manager.o(i.timer_manager_init)
</UL>
<P><STRONG><a name="[ccc]"></a>timer_info_create</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, timer_info.o(i.timer_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[ccd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_append
</UL>
<BR>[Called By]<UL><LI><a href="#[cca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_add
</UL>

<P><STRONG><a name="[cce]"></a>timer_info_init_dummy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, timer_info.o(i.timer_info_init_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_info_init_dummy &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_remove
<LI><a href="#[cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_find
</UL>

<P><STRONG><a name="[ccf]"></a>timer_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer_1.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_init &rArr; timer_manager_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_create
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
<LI><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[cc9]"></a>timer_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_manager.o(i.timer_manager))
<BR><BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_time
<LI><a href="#[cdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_now
<LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_modify
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_dispatch
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[cca]"></a>timer_manager_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer_manager.o(i.timer_manager_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>

<P><STRONG><a name="[ccd]"></a>timer_manager_append</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, timer_manager.o(i.timer_manager_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_create
</UL>

<P><STRONG><a name="[cd0]"></a>timer_manager_create</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer_manager.o(i.timer_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_manager_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[cd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[cd3]"></a>timer_manager_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_manager.o(i.timer_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_manager_deinit &rArr; slist_deinit &rArr; slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_destroy
</UL>

<P><STRONG><a name="[cd4]"></a>timer_manager_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer_manager.o(i.timer_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer_manager_destroy &rArr; timer_manager_deinit &rArr; slist_deinit &rArr; slist_remove_all &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[cd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[ccb]"></a>timer_manager_dispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer_manager.o(i.timer_manager_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_manager_dispatch &rArr; timer_manager_dispatch_one &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_update_time
<LI><a href="#[cd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch_one
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_dispatch
</UL>

<P><STRONG><a name="[cd8]"></a>timer_manager_find</STRONG> (Thumb, 44 bytes, Stack size 96 bytes, timer_manager.o(i.timer_manager_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = timer_manager_find &rArr; timer_info_init_dummy &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_init_dummy
<LI><a href="#[cd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_find
</UL>
<BR>[Called By]<UL><LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_modify
</UL>

<P><STRONG><a name="[cd2]"></a>timer_manager_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer_manager.o(i.timer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_manager_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_create
</UL>

<P><STRONG><a name="[cdc]"></a>timer_manager_next_time</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_manager.o(i.timer_manager_next_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_manager_next_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_time
</UL>

<P><STRONG><a name="[cd7]"></a>timer_manager_remove</STRONG> (Thumb, 44 bytes, Stack size 96 bytes, timer_manager.o(i.timer_manager_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_info_init_dummy
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[cd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch_one
</UL>

<P><STRONG><a name="[cd1]"></a>timer_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_manager.o(i.timer_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[cda]"></a>timer_modify</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timer_1.o(i.timer_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = timer_modify &rArr; timer_manager_find &rArr; timer_info_init_dummy &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_find
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
<LI><a href="#[cdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_now
</UL>
<BR>[Called By]<UL><LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_start_or_reset_screen_saver_timer
</UL>

<P><STRONG><a name="[9b3]"></a>timer_next_time</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_1.o(i.timer_next_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_next_time &rArr; timer_manager_next_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_next_time
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep_default
</UL>

<P><STRONG><a name="[cdb]"></a>timer_now</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer_1.o(i.timer_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_now
</UL>
<BR>[Calls]<UL><LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_modify
</UL>

<P><STRONG><a name="[690]"></a>timer_remove</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer_1.o(i.timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_remove
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_remove_timer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_timer_on_destroy
<LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_deinit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_remove_timer
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_destroy
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_auto_play
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_destroy
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_pause
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_destroy
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_stop
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_destroy
</UL>

<P><STRONG><a name="[554]"></a>tk_alloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mem.o(i.tk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_create
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_wstrdup
<LI><a href="#[d0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_alloc
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
<LI><a href="#[db5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_create_widget
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_create
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_create
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::load_ngram(_rom_file_t*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::load_dict(_rom_file_t*)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::alloc_resource(unsigned, unsigned)
</UL>

<P><STRONG><a name="[a6f]"></a>tk_atob</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(i.tk_atob))
<BR><BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
</UL>

<P><STRONG><a name="[89d]"></a>tk_atof</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.tk_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watof
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_y
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_x
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_anchor_for_str
</UL>

<P><STRONG><a name="[724]"></a>tk_atoi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utils.o(i.tk_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tk_atoi &rArr; tk_strtol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watoi
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_set_param
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_set_param
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[5f6]"></a>tk_calloc</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mem.o(i.tk_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_append_option
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_init
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_create
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_create
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_on
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_create
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_create
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fopen_buff
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_create
<LI><a href="#[cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_create
<LI><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_create
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_create
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_create
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create
<LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_register
<LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_create
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
<LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_create
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_create
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_create
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_create
<LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_create
<LI><a href="#[d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_create
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_create
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_create
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_create
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_create
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_create
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_create
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_node_create
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_register
<LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_register
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_create
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_add
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_add
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_register
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_register
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_create
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_create
</UL>

<P><STRONG><a name="[ce1]"></a>tk_deinit_internal</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, awtk_global.o(i.tk_deinit_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tk_deinit_internal &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_set
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_destroy
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager
<LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_set
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_destroy
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_set
<LI><a href="#[cf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_destroy
<LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_set
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_destroy
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
<LI><a href="#[cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_set
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_destroy
<LI><a href="#[cc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager
<LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_set
<LI><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_destroy
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme
<LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_deinit
<LI><a href="#[cd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_set
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory
<LI><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_set
<LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_destroy
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager
<LI><a href="#[ce9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_set
<LI><a href="#[ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_destroy
<LI><a href="#[ce7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory
<LI><a href="#[ced]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_set
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_destroy
<LI><a href="#[cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_destroy
<LI><a href="#[cee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_set
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_destroy
<LI><a href="#[cea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_set
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_destroy
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set
<LI><a href="#[ce5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_destroy
<LI><a href="#[ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board
<LI><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_set
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_destroy
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_exit
</UL>

<P><STRONG><a name="[cf9]"></a>tk_exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, awtk_global.o(i.tk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tk_exit &rArr; tk_deinit_internal &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_set
<LI><a href="#[cfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_destroy
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_run
</UL>

<P><STRONG><a name="[8a6]"></a>tk_ext_widgets_init</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, ext_widgets.o(i.tk_ext_widgets_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tk_ext_widgets_init &rArr; children_layouter_register_ext_builtins &rArr; children_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_register
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_ext_builtins
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>

<P><STRONG><a name="[553]"></a>tk_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mem.o(i.tk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_destroy
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_deinit
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_open_window
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_reset_options
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_append_option
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_destroy
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_reset
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_destroy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_on_destroy
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_deinit
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_destroy
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_destroy
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_destroy
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_destroy
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_item_destroy
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_destroy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_cache_destroy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_destroy
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_fclose
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_destroy
<LI><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_destroy
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_destroy
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_icon
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_active_icon
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_destroy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_on_destroy
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_destroy
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_destroy
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_destroy
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_cursor
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_destroy
<LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_open_destroy
<LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_destroy
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_destroy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_destroy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_close_keyboard
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_destroy
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_create
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_destroy
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_destroy
<LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_destroy
<LI><a href="#[cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_destroy
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_destroy
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_destroy
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_destroy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_destroy
<LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_zlib_decode_malloc_guesssize_headerflag
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_image_free
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_load
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_to_ldr
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__free_jpeg_components
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__expand_png_palette
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_16_to_8
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_destroy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_destroy
<LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapSubpixel
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_cleanup
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_get_glyph
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_destroy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_glyph
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_destroy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_destroy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_destroy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_destroy_widget
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_deinit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_on_destroy
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_destroy
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_node_destroy
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_reset
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_destroy
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_destroy
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_destroy
<LI><a href="#[e1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_pop_font
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_destroy
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_destroy
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_create
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_destroy
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_destroy
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_on_destroy
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_destroy
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_reset_options
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_destroy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_destroy
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_target
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_destroy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_destroy
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_destroy
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::NGram::load_ngram(_rom_file_t*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::~DictTrie()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictTrie::free_resource(bool)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::DictList::free_resource()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_destroy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_destroy
</UL>

<P><STRONG><a name="[cfc]"></a>tk_ftoa</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, utils.o(i.tk_ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tk_ftoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
</UL>

<P><STRONG><a name="[8a5]"></a>tk_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, awtk_global.o(i.tk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tk_init &rArr; main_loop_init &rArr; main_loop_simple_init &rArr; window_manager_resize &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_prepare
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_init
<LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>

<P><STRONG><a name="[5f0]"></a>tk_init_assets</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, awtk_global.o(i.tk_init_assets))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tk_init_assets &rArr; tk_add_font &rArr; font_stb_create &rArr; stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[cb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_init
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme
<LI><a href="#[cdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_add_font
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_init
</UL>

<P><STRONG><a name="[cfd]"></a>tk_init_internal</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, awtk_global.o(i.tk_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tk_init_internal &rArr; window_manager_create &rArr; window_manager_init &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_set
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_create
<LI><a href="#[cf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_set
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_create
<LI><a href="#[cf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_set
<LI><a href="#[cf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_set
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_create
<LI><a href="#[cff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_register
<LI><a href="#[d07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_set_on_out_of_memory
<LI><a href="#[cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_set
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_create
<LI><a href="#[ccf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_set
<LI><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_create
<LI><a href="#[ce3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set
<LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create
<LI><a href="#[cf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_set
<LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_create
<LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_register_builtins
<LI><a href="#[ce9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_set
<LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_create
<LI><a href="#[ced]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_set
<LI><a href="#[d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_create
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_register_builtins
<LI><a href="#[d03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_set
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_create
<LI><a href="#[cee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_set
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_create
<LI><a href="#[d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_loader_stb
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_register_builtins
<LI><a href="#[cea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_set
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create
<LI><a href="#[ce6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_set
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_default_create
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_register_builtins
<LI><a href="#[ceb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_set
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_create
<LI><a href="#[cfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_stb
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
</UL>

<P><STRONG><a name="[a3f]"></a>tk_is_valid_name</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, utils.o(i.tk_is_valid_name))
<BR><BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[95a]"></a>tk_itoa</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(i.tk_itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tk_itoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_int
</UL>

<P><STRONG><a name="[a72]"></a>tk_mem_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mem.o(i.tk_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_prepare
</UL>

<P><STRONG><a name="[cde]"></a>tk_mem_on_out_of_memory</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mem.o(i.tk_mem_on_out_of_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_mem_on_out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>

<P><STRONG><a name="[d07]"></a>tk_mem_set_on_out_of_memory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mem.o(i.tk_mem_set_on_out_of_memory))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[d08]"></a>tk_memcpy16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utils.o(i.tk_memcpy16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_memcpy16
</UL>
<BR>[Called By]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>

<P><STRONG><a name="[d09]"></a>tk_memcpy32</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utils.o(i.tk_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>

<P><STRONG><a name="[74d]"></a>tk_memset16</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, utils.o(i.tk_memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[74f]"></a>tk_memset24</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, utils.o(i.tk_memset24))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tk_memset24
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[74e]"></a>tk_memset32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, utils.o(i.tk_memset32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tk_memset32
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[9a6]"></a>tk_mutex_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mutex_null.o(i.tk_mutex_create))
<BR><BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
</UL>

<P><STRONG><a name="[9ab]"></a>tk_mutex_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mutex_null.o(i.tk_mutex_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
</UL>

<P><STRONG><a name="[9a9]"></a>tk_mutex_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mutex_null.o(i.tk_mutex_lock))
<BR><BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_recv_event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_queue_event
</UL>

<P><STRONG><a name="[9aa]"></a>tk_mutex_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mutex_null.o(i.tk_mutex_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_recv_event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_queue_event
</UL>

<P><STRONG><a name="[b6a]"></a>tk_pixel_copy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, utils.o(i.tk_pixel_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_pixel_copy &rArr; tk_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[d09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memcpy32
<LI><a href="#[d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memcpy16
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
</UL>

<P><STRONG><a name="[d3b]"></a>tk_pointer_from_int</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utils.o(i.tk_pointer_from_int))
<BR><BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_idle
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[d39]"></a>tk_pointer_to_int</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.tk_pointer_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[7ae]"></a>tk_realloc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mem.o(i.tk_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_extend_capacity
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_extend
<LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zexpand
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_extend
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_extend
</UL>

<P><STRONG><a name="[603]"></a>tk_replace_locale</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, utils.o(i.tk_replace_locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tk_replace_locale &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
</UL>

<P><STRONG><a name="[8a7]"></a>tk_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, awtk_global.o(i.tk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tk_run &rArr; tk_exit &rArr; tk_deinit_internal &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_run
<LI><a href="#[cf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_start
</UL>

<P><STRONG><a name="[723]"></a>tk_skip_to_num</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, utils.o(i.tk_skip_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
</UL>

<P><STRONG><a name="[602]"></a>tk_snprintf</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, utils.o(i.tk_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_hex_str
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout_params
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_itoa
<LI><a href="#[cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ftoa
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_to_string
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_to_string
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_double
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_range_options_ex
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_to_string
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_image_name
</UL>

<P><STRONG><a name="[76b]"></a>tk_sscanf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, utils.o(i.tk_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_rgba
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_hex
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
</UL>

<P><STRONG><a name="[a39]"></a>tk_str_cmp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, utils.o(i.tk_str_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_str_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_find
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_compare
</UL>

<P><STRONG><a name="[703]"></a>tk_str_copy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, utils.o(i.tk_str_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_text_baseline
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_text_align
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_input_tips
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_set_prop
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_name
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_animation
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_name
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_image
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_name
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_unit
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_format
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_second_image
<LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_minute_image
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_image
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_hour_image
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_bg_image
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_anim_hint
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_target
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_internal
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_image
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_format
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_input_tips
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_sequence
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_image
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_format
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_image
</UL>

<P><STRONG><a name="[d0a]"></a>tk_str_start_with</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, utils.o(i.tk_str_start_with))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tk_str_start_with &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
</UL>

<P><STRONG><a name="[78c]"></a>tk_strdup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utils.o(i.tk_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_open_window
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_append_option
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_icon
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_active_icon
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_normalize_app_root
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_dup_str
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_cursor
<LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_push_font
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_create
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[73a]"></a>tk_strncpy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utils.o(i.tk_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tk_strncpy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_name_fix
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[cfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_register
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create_animator
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_create
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_name
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_register
<LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_register
<LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_add
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_add
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_register
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_register
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_image_name
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_load_image
</UL>

<P><STRONG><a name="[d0b]"></a>tk_strndup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utils.o(i.tk_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>

<P><STRONG><a name="[cdf]"></a>tk_strtol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils.o(i.tk_strtol))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tk_strtol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
</UL>

<P><STRONG><a name="[d2e]"></a>tk_watob</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(i.tk_watob))
<BR><BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
</UL>

<P><STRONG><a name="[d0c]"></a>tk_watof</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, utils.o(i.tk_watof))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
</UL>

<P><STRONG><a name="[d0d]"></a>tk_watoi</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, utils.o(i.tk_watoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
</UL>

<P><STRONG><a name="[d0e]"></a>tk_wstrdup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, utils.o(i.tk_wstrdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tk_wstrdup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
</UL>

<P><STRONG><a name="[727]"></a>tokenizer_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tokenizer.o(i.tokenizer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tokenizer_deinit &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[726]"></a>tokenizer_has_more</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tokenizer.o(i.tokenizer_has_more))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[721]"></a>tokenizer_init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tokenizer.o(i.tokenizer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_init
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[d10]"></a>tokenizer_init_ex</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, tokenizer.o(i.tokenizer_init_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_init
</UL>

<P><STRONG><a name="[722]"></a>tokenizer_next</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tokenizer.o(i.tokenizer_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_has_more
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
<LI><a href="#[d11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_skip_separator
<LI><a href="#[d12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_skip_non_separator
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_parse_options
</UL>

<P><STRONG><a name="[151]"></a>ub_get_next_char_utf32</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, unibreakdef.o(i.ub_get_next_char_utf32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ub_get_next_char_utf32 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> linebreak.o(i.set_linebreaks_utf32)
<LI> wordbreak.o(i.set_wordbreaks_utf32)
</UL>
<P><STRONG><a name="[b01]"></a>ub_is_extended_pictographic</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, emojidef.o(i.ub_is_extended_pictographic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ub_is_extended_pictographic
</UL>
<BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
</UL>

<P><STRONG><a name="[d13]"></a>ui_builder_default</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ui_builder_default.o(i.ui_builder_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ui_builder_default &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
</UL>

<P><STRONG><a name="[d1f]"></a>ui_builder_on_end</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui_builder.o(i.ui_builder_on_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_builder_on_end
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d17]"></a>ui_builder_on_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui_builder.o(i.ui_builder_on_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_builder_on_start
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d1e]"></a>ui_builder_on_widget_end</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_builder.o(i.ui_builder_on_widget_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_builder_on_widget_end
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d19]"></a>ui_builder_on_widget_prop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ui_builder.o(i.ui_builder_on_widget_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_builder_on_widget_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d1a]"></a>ui_builder_on_widget_prop_end</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_builder.o(i.ui_builder_on_widget_prop_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_builder_on_widget_prop_end
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d18]"></a>ui_builder_on_widget_start</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ui_builder.o(i.ui_builder_on_widget_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_builder_on_widget_start
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_default
</UL>

<P><STRONG><a name="[d22]"></a>ui_loader_load</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ui_loader.o(i.ui_loader_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
</UL>

<P><STRONG><a name="[25a]"></a>ui_loader_load_default</STRONG> (Thumb, 270 bytes, Stack size 96 bytes, ui_loader_default.o(i.ui_loader_load_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ui_loader_load_default &rArr; rbuffer_read_string &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_uint8
<LI><a href="#[d16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_uint32
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_string
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_read_binary
<LI><a href="#[d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_peek_uint8
<LI><a href="#[d15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_init
<LI><a href="#[d1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuffer_has_more
<LI><a href="#[d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_widget_start
<LI><a href="#[d1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_widget_prop_end
<LI><a href="#[d19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_widget_prop
<LI><a href="#[d1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_widget_end
<LI><a href="#[d17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_start
<LI><a href="#[d1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_on_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_loader_default.o(.constdata)
</UL>
<P><STRONG><a name="[d20]"></a>ui_loader_load_widget</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ui_loader.o(i.ui_loader_load_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ui_loader_load_widget &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[d21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ui_loader
<LI><a href="#[d22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load
<LI><a href="#[d13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default
</UL>
<BR>[Called By]<UL><LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_name
</UL>

<P><STRONG><a name="[d25]"></a>unichar_to_utf8</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, utf8.o(i.unichar_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unichar_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[d24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_to_utf8
</UL>

<P><STRONG><a name="[53c]"></a>utf16_strcmp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, utf16char.o(i.utf16_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utf16_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_lpsi_with_str(const void*, const void*)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lpis(const unsigned short*, unsigned, ime_pinyin::LmaPsbItem*, unsigned, const unsigned short*, bool)
</UL>

<P><STRONG><a name="[54d]"></a>utf16_strncmp</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, utf16char.o(i.utf16_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utf16_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_8(const void*, const void*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_7(const void*, const void*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_6(const void*, const void*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_5(const void*, const void*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_4(const void*, const void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_3(const void*, const void*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::cmp_hanzis_2(const void*, const void*)
</UL>

<P><STRONG><a name="[526]"></a>utf16_strncpy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, utf16char.o(i.utf16_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utf16_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[d24]"></a>utf16_to_utf8</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, utf8.o(i.utf16_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unichar_to_utf8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
</UL>

<P><STRONG><a name="[50e]"></a>utf8_from_utf16</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, utf8.o(i.utf8_from_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[d24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watoi
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watof
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_get_utf8
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_button_click
</UL>

<P><STRONG><a name="[d26]"></a>utf8_get_char</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, utf8.o(i.utf8_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
</UL>

<P><STRONG><a name="[6ca]"></a>utf8_to_utf16</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, utf8.o(i.utf8_to_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = utf8_to_utf16 &rArr; utf8_get_char
</UL>
<BR>[Calls]<UL><LI><a href="#[d26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_commit_str
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create_with_len
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_wday
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_translate_month
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
</UL>

<P><STRONG><a name="[a87]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a8f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[a9c]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[a89]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[a88]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a8b]"></a>vPortEnterCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a8d]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a98]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[e07]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a90]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[a60]"></a>vQueueDelete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[d27]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[aa8]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[7b6]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;middle_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_task
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_task
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_run
</UL>

<P><STRONG><a name="[b6b]"></a>vTaskDelete</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[aac]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[d2a]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[d28]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[d2b]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[e0c]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[999]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
<LI><a href="#[d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[d2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a92]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3b9]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[694]"></a>value_bool</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, value.o(i.value_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[d2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watob
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atob
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_prop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_prop
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_prop
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_bool
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_set_prop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_prop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_end
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_fullscreen
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_prop
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_keyboard
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_set_param
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_set_prop
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_set_prop
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_set_param
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[a3c]"></a>value_copy</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, value.o(i.value_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = value_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_get_prop
</UL>

<P><STRONG><a name="[9d2]"></a>value_deep_copy</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, value.o(i.value_deep_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = value_deep_copy &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_ref
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_copy
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_wstrdup
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_value
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_set
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_add
</UL>

<P><STRONG><a name="[a36]"></a>value_double</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, value.o(i.value_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = value_double &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
</UL>

<P><STRONG><a name="[a40]"></a>value_dup_str</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, value.o(i.value_dup_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = value_dup_str &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[9d1]"></a>value_equal</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, value.o(i.value_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = value_equal &rArr; wcscmp &rArr; wcs_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcscmp
<LI><a href="#[d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_compare
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_value
</UL>

<P><STRONG><a name="[81c]"></a>value_float</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, value.o(i.value_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watof
<LI><a href="#[d31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[d32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_prop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_double
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_name
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
</UL>

<P><STRONG><a name="[d2f]"></a>value_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.value_init))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_wstr
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint8
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_pointer
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int64
<LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int32
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_double
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_dup_str
</UL>

<P><STRONG><a name="[692]"></a>value_int</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, value.o(i.value_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[d0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_watoi
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_prop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_prop
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_set_prop
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_prop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_prop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_prop
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_prop
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint16
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_value
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_set_param
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_create
<LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
<LI><a href="#[c95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_layout_info
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_set_prop
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_set_prop
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_prop
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_set_param
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_prop
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_prop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
</UL>

<P><STRONG><a name="[d56]"></a>value_pointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, value.o(i.value_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window_theme
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
<LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_get
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
</UL>

<P><STRONG><a name="[837]"></a>value_reset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, value.o(i.value_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_value
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_deinit
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_reset
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_set
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_add
</UL>

<P><STRONG><a name="[688]"></a>value_set_bool</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop_default_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_get_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_prop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_get_prop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_get_prop
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_prop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_fullscreen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get_prop
<LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_bool
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_get_param
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_get_prop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_get_prop
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_get_prop
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_get_prop
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_get_prop
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prop
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_get_param
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_get_prop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_prop
</UL>

<P><STRONG><a name="[a43]"></a>value_set_double</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, value.o(i.value_set_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = value_set_double
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[7fa]"></a>value_set_float</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, value.o(i.value_set_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = value_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_update
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_get_prop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_prop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_get_prop
</UL>

<P><STRONG><a name="[687]"></a>value_set_int</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, value.o(i.value_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop_default_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_prop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_prop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_get_prop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_get_prop
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_prop
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_prop
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_int
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_update
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_get_param
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_get_param
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create_old
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_get_param
<LI><a href="#[c95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_layout_info
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_get_prop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_get_prop
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_get_prop
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_get_prop
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_get_prop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_get_prop
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prop
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_get_param
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_prop
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_get_prop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_get_prop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_prop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_get_prop
</UL>

<P><STRONG><a name="[d33]"></a>value_set_int32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>

<P><STRONG><a name="[a44]"></a>value_set_int64</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, value.o(i.value_set_int64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = value_set_int64
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[d34]"></a>value_set_pointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
</UL>

<P><STRONG><a name="[712]"></a>value_set_str</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_prop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_get_prop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_get_prop
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_str
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_get_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_prop
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_widget_prop
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop_str
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_set_param_str
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_set_param_str
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_get_prop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_get_prop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_prop
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_get_prop
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_get_prop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_prop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_get_prop
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_get_prop
</UL>

<P><STRONG><a name="[61b]"></a>value_set_uint32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_get_prop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_get_prop
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_get_prop
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_get_prop
</UL>

<P><STRONG><a name="[a76]"></a>value_set_uint8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_uint8
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_get_prop
</UL>

<P><STRONG><a name="[7fb]"></a>value_set_wstr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_wstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_wstr
</UL>
<BR>[Calls]<UL><LI><a href="#[d2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_get_prop
</UL>

<P><STRONG><a name="[72f]"></a>value_str</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, value.o(i.value_str))
<BR><BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_prop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_prop
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_set_prop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_prop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_prop
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_var
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_prop
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_str
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_set_param
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_set_param
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_get_variable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_set_param
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_prop
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_prop
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_prop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_prop
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_prop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_prop
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_prop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_prop
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_prop
</UL>

<P><STRONG><a name="[b1f]"></a>value_uint16</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, value.o(i.value_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = value_uint16 &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
</UL>

<P><STRONG><a name="[61d]"></a>value_uint32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, value.o(i.value_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = value_uint32 &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_prop
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_prop
</UL>

<P><STRONG><a name="[e05]"></a>value_wstr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, value.o(i.value_wstr))
<BR><BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
</UL>

<P><STRONG><a name="[8c0]"></a>velocity_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, velocity.o(i.velocity_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = velocity_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_down
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_down
<LI><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_down
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_down
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_down
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_down
</UL>

<P><STRONG><a name="[8c1]"></a>velocity_update</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, velocity.o(i.velocity_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_init
<LI><a href="#[d36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_do_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_up
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_move
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_down
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_up
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_move
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_down
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_up
<LI><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_move
<LI><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_down
<LI><a href="#[c6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_up
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_move
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_down
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_move
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_down
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_move
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_down
</UL>

<P><STRONG><a name="[678]"></a>vgcanvas_arc</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, vgcanvas.o(i.vgcanvas_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[676]"></a>vgcanvas_begin_path</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_begin_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_begin_path
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rounded_rect
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_ellipse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[66a]"></a>vgcanvas_bezier_to</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, vgcanvas.o(i.vgcanvas_bezier_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_bezier_to
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_arc_path
</UL>

<P><STRONG><a name="[6f6]"></a>vgcanvas_clip_rect</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vgcanvas.o(i.vgcanvas_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vgcanvas_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[671]"></a>vgcanvas_close_path</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_close_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_close_path
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
</UL>

<P><STRONG><a name="[973]"></a>vgcanvas_create</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = vgcanvas_create &rArr; nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
</UL>

<P><STRONG><a name="[969]"></a>vgcanvas_destroy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vgcanvas_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_destroy
</UL>

<P><STRONG><a name="[7c1]"></a>vgcanvas_destroy_fbo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_destroy_fbo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_destroy_fbo
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
</UL>

<P><STRONG><a name="[890]"></a>vgcanvas_draw_icon</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, vgcanvas.o(i.vgcanvas_draw_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vgcanvas_draw_icon &rArr; vgcanvas_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
</UL>

<P><STRONG><a name="[89a]"></a>vgcanvas_draw_image</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, vgcanvas.o(i.vgcanvas_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_icon
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[679]"></a>vgcanvas_ellipse</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vgcanvas.o(i.vgcanvas_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_ellipse &rArr; vgcanvas_begin_path
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
</UL>

<P><STRONG><a name="[67c]"></a>vgcanvas_fill</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[66f]"></a>vgcanvas_line_to</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_line_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_line_to
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[66e]"></a>vgcanvas_move_to</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_move_to
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[a7e]"></a>vgcanvas_paint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
</UL>

<P><STRONG><a name="[670]"></a>vgcanvas_quad_to</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vgcanvas.o(i.vgcanvas_quad_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vgcanvas_quad_to
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
</UL>

<P><STRONG><a name="[974]"></a>vgcanvas_reinit</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, vgcanvas.o(i.vgcanvas_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
</UL>

<P><STRONG><a name="[668]"></a>vgcanvas_restore</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[898]"></a>vgcanvas_rotate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[677]"></a>vgcanvas_rounded_rect</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, vgcanvas.o(i.vgcanvas_rounded_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_rounded_rect &rArr; vgcanvas_begin_path
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
</UL>

<P><STRONG><a name="[665]"></a>vgcanvas_save</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_save
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[666]"></a>vgcanvas_scale</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
</UL>

<P><STRONG><a name="[67b]"></a>vgcanvas_set_fill_color</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[673]"></a>vgcanvas_set_line_cap</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_line_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_line_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_set_line_cap
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
</UL>

<P><STRONG><a name="[675]"></a>vgcanvas_set_line_join</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_line_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_line_join
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_set_line_join
</UL>

<P><STRONG><a name="[67a]"></a>vgcanvas_set_line_width</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_line_width
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[67d]"></a>vgcanvas_set_stroke_color</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_stroke_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_stroke_color
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[6f7]"></a>vgcanvas_set_text_align</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vgcanvas_set_text_align &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
</UL>

<P><STRONG><a name="[6f8]"></a>vgcanvas_set_text_baseline</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_text_baseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
</UL>

<P><STRONG><a name="[96e]"></a>vgcanvas_set_transform</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, vgcanvas.o(i.vgcanvas_set_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_set_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[67e]"></a>vgcanvas_stroke</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_stroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_stroke
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>

<P><STRONG><a name="[897]"></a>vgcanvas_translate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_translate
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[23c]"></a>view_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, view.o(i.view_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = view_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> view.o(.constdata)
</UL>
<P><STRONG><a name="[508]"></a>wbuffer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buffer.o(i.wbuffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_input(_input_engine_t*, int)
</UL>

<P><STRONG><a name="[d44]"></a>wbuffer_write_binary</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buffer.o(i.wbuffer_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wbuffer_write_binary &rArr; wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_extend_delta
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_string
</UL>

<P><STRONG><a name="[509]"></a>wbuffer_write_string</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, buffer.o(i.wbuffer_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wbuffer_write_string &rArr; wbuffer_write_binary &rArr; wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_binary
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_input(_input_engine_t*, int)
</UL>

<P><STRONG><a name="[7fe]"></a>wcs_chr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wstr.o(i.wcs_chr))
<BR><BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_valid_value
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcschr
</UL>

<P><STRONG><a name="[d45]"></a>wcs_cmp</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, wstr.o(i.wcs_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wcs_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcscmp
</UL>

<P><STRONG><a name="[d47]"></a>wcs_cpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wstr.o(i.wcs_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wcs_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcscpy
</UL>

<P><STRONG><a name="[d48]"></a>wcs_len</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wstr.o(i.wcs_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wcs_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
</UL>

<P><STRONG><a name="[aba]"></a>wcschr</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, wstr.o(i.wcschr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wcschr
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_trim_float_zero
<LI><a href="#[e03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_fix
<LI><a href="#[e02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_fraction_nr
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_is_flexable_w_char
</UL>

<P><STRONG><a name="[ca5]"></a>wcscmp</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, wstr.o(i.wcscmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wcscmp &rArr; wcs_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_equal
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
</UL>

<P><STRONG><a name="[d46]"></a>wcscpy</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, wstr.o(i.wcscpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wcscpy &rArr; wcs_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set
</UL>

<P><STRONG><a name="[6cc]"></a>wcslen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wstr.o(i.wcslen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wcslen &rArr; wcs_len
</UL>
<BR>[Calls]<UL><LI><a href="#[d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_from_wstr
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_fps
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_measure_text
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[d0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_wstrdup
<LI><a href="#[e03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_fix
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append
<LI><a href="#[e02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_fraction_nr
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
</UL>

<P><STRONG><a name="[d49]"></a>widget_add_child</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, widget.o(i.widget_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = widget_add_child &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_create
<LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style_recursive
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[d4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_manager
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>

<P><STRONG><a name="[d4c]"></a>widget_add_idle</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, widget.o(i.widget_add_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = widget_add_idle &rArr; idle_add &rArr; idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
</UL>
<BR>[Called By]<UL><LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_do_open_window
</UL>

<P><STRONG><a name="[7d6]"></a>widget_add_timer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, widget.o(i.widget_add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = widget_add_timer &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_open_animation
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_create
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_create
</UL>

<P><STRONG><a name="[d4d]"></a>widget_animator_create</STRONG> (Thumb, 438 bytes, Stack size 208 bytes, widget_animator_factory.o(i.widget_animator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = widget_animator_create &rArr; widget_animator_parser_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_yoyo
<LI><a href="#[d51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_time_scale
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_repeat
<LI><a href="#[d53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_name
<LI><a href="#[d52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_destroy_when_done
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_set_params
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_create
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_deinit
<LI><a href="#[d4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_parser_parse
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create_animator
</UL>

<P><STRONG><a name="[ae6]"></a>widget_animator_destroy</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, widget_animator.o(i.widget_animator_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = widget_animator_destroy &rArr; widget_off &rArr; emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_deinit
<LI><a href="#[d55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_remove
<LI><a href="#[d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_off
</UL>
<BR>[Called By]<UL><LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_time_elapse
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on_widget_destroy
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>

<P><STRONG><a name="[a53]"></a>widget_animator_get</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, window_main.o(i.widget_animator_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = widget_animator_get &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_pointer
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
</UL>

<P><STRONG><a name="[d57]"></a>widget_animator_init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, widget_animator.o(i.widget_animator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_init
<LI><a href="#[d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_add
<LI><a href="#[d52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_destroy_when_done
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[d4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_create
</UL>

<P><STRONG><a name="[b22]"></a>widget_animator_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget_animator_manager.o(i.widget_animator_manager))
<BR><BR>[Called By]<UL><LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_up
</UL>

<P><STRONG><a name="[d58]"></a>widget_animator_manager_add</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, widget_animator_manager.o(i.widget_animator_manager_add))
<BR><BR>[Called By]<UL><LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
</UL>

<P><STRONG><a name="[d04]"></a>widget_animator_manager_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, widget_animator_manager.o(i.widget_animator_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_animator_manager_create &rArr; widget_animator_manager_init &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[d59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[d5a]"></a>widget_animator_manager_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, widget_animator_manager.o(i.widget_animator_manager_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = widget_animator_manager_deinit &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_destroy
</UL>

<P><STRONG><a name="[cec]"></a>widget_animator_manager_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, widget_animator_manager.o(i.widget_animator_manager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_animator_manager_destroy &rArr; widget_animator_manager_deinit &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[d5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[b23]"></a>widget_animator_manager_find</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, widget_animator_manager.o(i.widget_animator_manager_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = widget_animator_manager_find &rArr; animator_is_equal
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animator_is_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_up
</UL>

<P><STRONG><a name="[d59]"></a>widget_animator_manager_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, widget_animator_manager.o(i.widget_animator_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = widget_animator_manager_init &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_create
</UL>

<P><STRONG><a name="[d55]"></a>widget_animator_manager_remove</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, widget_animator_manager.o(i.widget_animator_manager_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = widget_animator_manager_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
</UL>

<P><STRONG><a name="[ced]"></a>widget_animator_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, widget_animator_manager.o(i.widget_animator_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[d5b]"></a>widget_animator_manager_time_elapse</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, widget_animator_manager.o(i.widget_animator_manager_time_elapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = widget_animator_manager_time_elapse &rArr; widget_animator_time_elapse &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_time_elapse
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_on_timer
</UL>

<P><STRONG><a name="[8c5]"></a>widget_animator_on</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, widget_animator.o(i.widget_animator_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_animator_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_timer_next
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
</UL>

<P><STRONG><a name="[d4f]"></a>widget_animator_prop2_create</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, widget_animator_prop2.o(i.widget_animator_prop2_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = widget_animator_prop2_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[d50]"></a>widget_animator_prop2_set_params</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, widget_animator_prop2.o(i.widget_animator_prop2_set_params))
<BR><BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[621]"></a>widget_animator_prop_create</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, widget_animator_prop.o(i.widget_animator_prop_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_out
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_in
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>

<P><STRONG><a name="[622]"></a>widget_animator_prop_set_params</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, widget_animator_prop.o(i.widget_animator_prop_set_params))
<BR><BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_out
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_in
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>

<P><STRONG><a name="[8c3]"></a>widget_animator_scroll_create</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, widget_animator_scroll.o(i.widget_animator_scroll_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_timer_next
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
</UL>

<P><STRONG><a name="[8c4]"></a>widget_animator_scroll_set_params</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget_animator_scroll.o(i.widget_animator_scroll_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_animator_scroll_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_timer_next
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
</UL>

<P><STRONG><a name="[d52]"></a>widget_animator_set_destroy_when_done</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, widget_animator.o(i.widget_animator_set_destroy_when_done))
<BR><BR>[Called By]<UL><LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[d53]"></a>widget_animator_set_name</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, widget_animator.o(i.widget_animator_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = widget_animator_set_name &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[a55]"></a>widget_animator_set_repeat</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, widget_animator.o(i.widget_animator_set_repeat))
<BR><BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
</UL>

<P><STRONG><a name="[d51]"></a>widget_animator_set_time_scale</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, widget_animator.o(i.widget_animator_set_time_scale))
<BR><BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[a54]"></a>widget_animator_set_yoyo</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, widget_animator.o(i.widget_animator_set_yoyo))
<BR><BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
</UL>

<P><STRONG><a name="[623]"></a>widget_animator_start</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, widget_animator.o(i.widget_animator_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = widget_animator_start &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_out
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_in
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_timer_next
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
</UL>

<P><STRONG><a name="[a52]"></a>widget_animator_stop_with_name</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, window_main.o(i.widget_animator_stop_with_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = widget_animator_stop_with_name &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_pointer
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_off
</UL>

<P><STRONG><a name="[d5c]"></a>widget_animator_time_elapse</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, widget_animator.o(i.widget_animator_time_elapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = widget_animator_time_elapse &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
<LI><a href="#[d5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_time_elapse
</UL>

<P><STRONG><a name="[d60]"></a>widget_calc_icon_text_rect</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, widget.o(i.widget_calc_icon_text_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = widget_calc_icon_text_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
</UL>

<P><STRONG><a name="[b1b]"></a>widget_count_children</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, widget.o(i.widget_count_children))
<BR><BR>[Called By]<UL><LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_prev
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_next
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_children_rect
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_fix_index
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_layout_children
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_nr
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
</UL>

<P><STRONG><a name="[5dc]"></a>widget_create</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, widget.o(i.widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_create_widget
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_group_create
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_bar_create
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;column_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create_radio
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_create
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_title_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_client_create
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_box_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;row_create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_create
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_control_create
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_create
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_create
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_item_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_create
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_internal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_create
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_create
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_create
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_create
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_create
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_create
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_widget_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_create
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_create
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_create
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_create_internal
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create
</UL>

<P><STRONG><a name="[d64]"></a>widget_create_animator</STRONG> (Thumb, 112 bytes, Stack size 280 bytes, widget.o(i.widget_create_animator))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = widget_create_animator &rArr; widget_animator_create &rArr; widget_animator_parser_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_animation
</UL>

<P><STRONG><a name="[ce2]"></a>widget_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, widget.o(i.widget_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
<LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_do_destroy
<LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_async
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_idle_destroy_window
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_close_destroy
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[d68]"></a>widget_destroy_children</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, widget.o(i.widget_destroy_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = widget_destroy_children &rArr;  widget_do_destroy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[60b]"></a>widget_dispatch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, widget.o(i.widget_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_default
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_repeat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_long_press
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked_only
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_move
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_to_widget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_value
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_screen_saver_timer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_locale_changed
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_top_window_changed
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_self
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_end
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_begin
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_target
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_key_target
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_event_to_target_recursive
<LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_after_children
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
<LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_after_children
<LI><a href="#[da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_after_children
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_done
<LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_after_children
<LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_after_children
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_leave_event
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_end
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awtk_mem_on_out_of_memory
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_request_close_window
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_value
<LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index_only
<LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value_only
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_value
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_angle
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_dispatch_event
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
</UL>

<P><STRONG><a name="[8bf]"></a>widget_dispatch_event_to_target_recursive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, widget.o(i.widget_dispatch_event_to_target_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_dispatch_event_to_target_recursive &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
</UL>

<P><STRONG><a name="[928]"></a>widget_dispatch_to_key_target</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, widget.o(i.widget_dispatch_to_key_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = widget_dispatch_to_key_target &rArr; widget_dispatch_to_target &rArr;  widget_dispatch_to_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_target
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[926]"></a>widget_dispatch_to_target</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, widget.o(i.widget_dispatch_to_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = widget_dispatch_to_target &rArr;  widget_dispatch_to_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_target
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_target
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_to_key_target
</UL>

<P><STRONG><a name="[d72]"></a>widget_draw_icon_text</STRONG> (Thumb, 510 bytes, Stack size 216 bytes, widget.o(i.widget_draw_icon_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_align
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon_in_rect
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_icon_text_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>

<P><STRONG><a name="[c87]"></a>widget_ensure_visible_in_viewport</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, widget.o(i.widget_ensure_visible_in_viewport))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = widget_ensure_visible_in_viewport &rArr; widget_ensure_visible_in_scroll_view &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_scrollable
<LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_scroll_view
</UL>
<BR>[Called By]<UL><LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
</UL>

<P><STRONG><a name="[cef]"></a>widget_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget_factory.o(i.widget_factory))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_widget_start
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ext_widgets_init
</UL>

<P><STRONG><a name="[d01]"></a>widget_factory_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, widget_factory.o(i.widget_factory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = widget_factory_create &rArr; widget_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[d77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[d14]"></a>widget_factory_create_widget</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, widget_factory.o(i.widget_factory_create_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = widget_factory_create_widget &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
<LI><a href="#[d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_find_builtin_creator
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_widget_start
</UL>

<P><STRONG><a name="[cf0]"></a>widget_factory_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, widget_factory.o(i.widget_factory_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = widget_factory_destroy &rArr; widget_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[d79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[cfb]"></a>widget_factory_register</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, widget_factory.o(i.widget_factory_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ext_widgets_init
</UL>

<P><STRONG><a name="[cf1]"></a>widget_factory_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, widget_factory.o(i.widget_factory_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[a77]"></a>widget_fill_bg_rect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, widget.o(i.widget_fill_bg_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = widget_fill_bg_rect &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
</UL>

<P><STRONG><a name="[a78]"></a>widget_fill_fg_rect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, widget.o(i.widget_fill_fg_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = widget_fill_fg_rect &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
</UL>

<P><STRONG><a name="[d70]"></a>widget_fill_rect</STRONG> (Thumb, 428 bytes, Stack size 144 bytes, widget.o(i.widget_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rounded_rect
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_fg_rect
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_bg_rect
<LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_background
</UL>

<P><STRONG><a name="[803]"></a>widget_find_target</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, widget.o(i.widget_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = widget_find_target &rArr; widget_find_target_default &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_visit_focusable
<LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_children
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_children
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[24e]"></a>widget_find_target_default</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, widget_vtable.o(i.widget_find_target_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = widget_find_target_default &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_find_target
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[d7a]"></a>widget_focus_first</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.widget_focus_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = widget_focus_first &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_bool
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_first_focusable_widget_in_window
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[80a]"></a>widget_focus_next</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, widget.o(i.widget_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = widget_focus_next &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[80b]"></a>widget_focus_prev</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, widget.o(i.widget_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[775]"></a>widget_foreach</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, widget.o(i.widget_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_hook_items
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_hook_children_button
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_visit_focusable
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_first_focusable_widget_in_window
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_all_focusable_widgets_in_window
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_children_widget
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_load
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_sync_children
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_init_if_not_inited
</UL>

<P><STRONG><a name="[d7f]"></a>widget_get_assets_manager</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, widget.o(i.widget_get_assets_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_asset
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_load_theme_obj
</UL>

<P><STRONG><a name="[a63]"></a>widget_get_child</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, widget.o(i.widget_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_on_paint_children
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_find_target
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_children_rect
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_find_target
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
</UL>

<P><STRONG><a name="[72a]"></a>widget_get_children_for_layout</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, layout.o(i.widget_get_children_for_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = widget_get_children_for_layout &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[d82]"></a>widget_get_image_manager</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, widget.o(i.widget_get_image_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_image_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_image
</UL>

<P><STRONG><a name="[d5e]"></a>widget_get_locale_info</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, widget.o(i.widget_get_locale_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_locale_info &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_apply_tr_text_before_paint
</UL>

<P><STRONG><a name="[61c]"></a>widget_get_prop</STRONG> (Thumb, 806 bytes, Stack size 24 bytes, widget.o(i.widget_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_wstr
<LI><a href="#[d33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int32
<LI><a href="#[d83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_to_string
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_to_string
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_bool
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_end
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_fullscreen
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_keyboard
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_value
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_str
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window_theme
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_on_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[c95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_layout_info
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_value_changed
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
</UL>

<P><STRONG><a name="[80f]"></a>widget_get_prop_bool</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, widget.o(i.widget_get_prop_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_prop_bool &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_password_visible
</UL>

<P><STRONG><a name="[244]"></a>widget_get_prop_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_get_prop_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[72b]"></a>widget_get_prop_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, widget.o(i.widget_get_prop_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog_opened
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_opened
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_prev_key
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_next_key
<LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_scroll_view
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
</UL>

<P><STRONG><a name="[c60]"></a>widget_get_prop_str</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, widget.o(i.widget_get_prop_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
</UL>

<P><STRONG><a name="[711]"></a>widget_get_state_for_style</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, widget.o(i.widget_get_state_for_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_get_prop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_get_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
</UL>

<P><STRONG><a name="[773]"></a>widget_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, widget.o(i.widget_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_add_child
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_add_child
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_add_child
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_set_active_page
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_hook_children
</UL>

<P><STRONG><a name="[77f]"></a>widget_get_value</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, widget.o(i.widget_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = widget_get_value &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_scroll_bar_value_changed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[7a1]"></a>widget_get_window</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, widget.o(i.widget_get_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = widget_get_window
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_item_click
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[d86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_has_focused_widget_in_window
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_prev_key
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_next_key
<LI><a href="#[d7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_first_focusable_widget_in_window
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_all_focusable_widgets_in_window
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window_theme
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory_create_style_mutable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
</UL>

<P><STRONG><a name="[68c]"></a>widget_grab</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, widget.o(i.widget_grab))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = widget_grab &rArr;  widget_grab (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
</UL>

<P><STRONG><a name="[d86]"></a>widget_has_focused_widget_in_window</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, widget.o(i.widget_has_focused_widget_in_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = widget_has_focused_widget_in_window &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[79f]"></a>widget_index_of</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, widget.o(i.widget_index_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_index_of
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_item_click
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_sync_pages
</UL>

<P><STRONG><a name="[d63]"></a>widget_init</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, widget.o(i.widget_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[d87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_vtable_default
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory_create_style
<LI><a href="#[d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_init
</UL>

<P><STRONG><a name="[69b]"></a>widget_invalidate</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, widget.o(i.widget_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_default
<LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_modal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_draw_type
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_pointer_up_cleanup
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_vertical
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_value
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_show_text
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_vertical
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_step
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_min
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_max
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_bar_size
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_remove_child
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_locale_changed
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_opacity
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_enable
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_invalidate
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_rotation
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_image
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_value
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_unit
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_start_angle
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_show_text
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_max
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_line_width
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_counter_clock_wise
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_on_timer
<LI><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_visible_nr
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
<LI><a href="#[cb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_sync_yoffset_with_selected_index
<LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index_only
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
<LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_vertical
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_scroll_done
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_invalidate
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_spacing
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_size
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_max
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_margin
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_default_paint
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_min_scale
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_align_v
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_xoffset
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_value
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_image
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_format
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_angle
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_format
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_color
</UL>

<P><STRONG><a name="[24c]"></a>widget_invalidate_default</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, widget_vtable.o(i.widget_invalidate_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_default
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[6c0]"></a>widget_invalidate_force</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, widget.o(i.widget_invalidate_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_caret
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_length
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_invalidate
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_close_destroy
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_fullscreen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_push_window
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_restore_win_position
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_self
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_end
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_invalidate
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_timer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_timer
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_step
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_xoffset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_timer_start
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_yoffset
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_top_margin
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_line_height
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_bottom_margin
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_clear
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_caret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_scrollbar
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_text_edit_state_changed
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
</UL>

<P><STRONG><a name="[686]"></a>widget_is_instance_of</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, widget.o(i.widget_is_instance_of))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_cast
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_cast
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_cast
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_cast
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
<LI><a href="#[de2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_cast
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_cast
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_cast
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_cast
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_cast
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>

<P><STRONG><a name="[d8a]"></a>widget_is_keyboard</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, widget.o(i.widget_is_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = widget_is_keyboard &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_children
</UL>

<P><STRONG><a name="[68e]"></a>widget_is_point_in</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, widget.o(i.widget_is_point_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = widget_is_point_in &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
</UL>

<P><STRONG><a name="[af5]"></a>widget_is_window</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, widget.o(i.widget_is_window))
<BR><BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_layout
</UL>

<P><STRONG><a name="[d4a]"></a>widget_is_window_manager</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, widget.o(i.widget_is_window_manager))
<BR><BR>[Called By]<UL><LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[815]"></a>widget_is_window_opened</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, widget.o(i.widget_is_window_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
</UL>

<P><STRONG><a name="[740]"></a>widget_layout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, layout.o(i.widget_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[d8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_floating_children
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_end
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_event
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[72e]"></a>widget_layout_children</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, layout.o(i.widget_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = widget_layout_children &rArr; widget_layout_children_default &rArr;  widget_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_xoffset
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
</UL>

<P><STRONG><a name="[ae5]"></a>widget_layout_children_default</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, layout.o(i.widget_layout_children_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = widget_layout_children_default &rArr;  widget_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_layout_children
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_layout_children
</UL>

<P><STRONG><a name="[729]"></a>widget_layout_floating_children</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, layout.o(i.widget_layout_floating_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = widget_layout_floating_children &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[d8d]"></a>widget_layout_self</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, layout.o(i.widget_layout_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
</UL>

<P><STRONG><a name="[af7]"></a>widget_layout_self_menu_with_rect</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, self_layouter_menu.o(i.widget_layout_self_menu_with_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_layout_self_menu_with_rect &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[d8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_is_valid
<LI><a href="#[d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_layout
</UL>

<P><STRONG><a name="[72d]"></a>widget_layout_self_with_rect</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, self_layouter_default.o(i.widget_layout_self_with_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_layout_self_with_rect &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[d91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_calc
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_layout
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
</UL>

<P><STRONG><a name="[895]"></a>widget_load_asset</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, widget.o(i.widget_load_asset))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = widget_load_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_load_svg_asset
</UL>

<P><STRONG><a name="[88d]"></a>widget_load_image</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, widget.o(i.widget_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_load_image
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_on_paint_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_load_image
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_on_paint_self
</UL>

<P><STRONG><a name="[5e1]"></a>widget_lookup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, widget.o(i.widget_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = widget_lookup &rArr; widget_lookup_child
</UL>
<BR>[Calls]<UL><LI><a href="#[d93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_child
<LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timing
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_temperature_inc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_temperature_dec
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_systime_update
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_humidity_inc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_humidity_dec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_frequency_inc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_frequency_dec
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_update
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_delay_in
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_on
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_off
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_text_selector
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_text_selector
</UL>

<P><STRONG><a name="[7a2]"></a>widget_lookup_by_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, widget.o(i.widget_lookup_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = widget_lookup_by_type &rArr; widget_lookup_by_type_child
</UL>
<BR>[Calls]<UL><LI><a href="#[d95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_child
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_layout_children
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_pages
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_pages
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_scrollbar
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>

<P><STRONG><a name="[c7b]"></a>widget_measure_text</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, widget.o(i.widget_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = widget_measure_text &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
</UL>
<BR>[Called By]<UL><LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_min_w
</UL>

<P><STRONG><a name="[79d]"></a>widget_move</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, widget.o(i.widget_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = widget_move &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_move
</UL>

<P><STRONG><a name="[d7d]"></a>widget_move_focus</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, widget.o(i.widget_move_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_bool
<LI><a href="#[d7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_all_focusable_widgets_in_window
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_prev
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_next
</UL>

<P><STRONG><a name="[6bb]"></a>widget_move_resize</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, widget.o(i.widget_move_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_layout_children
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_resize
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_default_layout
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_menu_with_rect
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_scroll_view_layout_children
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[d54]"></a>widget_off</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, widget.o(i.widget_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_off &rArr; emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
</UL>

<P><STRONG><a name="[b14]"></a>widget_off_by_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, widget.o(i.widget_off_by_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = widget_off_by_func &rArr; emitter_off_by_func &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off_by_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_reset_indicated_widget
</UL>

<P><STRONG><a name="[5e2]"></a>widget_on</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, widget.o(i.widget_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_on
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_create
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_request_input_method
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_hook_button
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_create
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[d57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_init
<LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_idle
<LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_name
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_event
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_add_child
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_add_child
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create_button
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_hook_children
</UL>

<P><STRONG><a name="[24f]"></a>widget_on_destroy_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_destroy_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[d99]"></a>widget_on_event_before_children</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_event_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_on_event_before_children
</UL>
<BR>[Called By]<UL><LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_before_children
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_before_children
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_before_children
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_before_children
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_before_children
</UL>

<P><STRONG><a name="[24d]"></a>widget_on_event_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_event_default))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[924]"></a>widget_on_keydown</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_keydown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = widget_on_keydown &rArr; widget_on_keydown_impl &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_children
</UL>

<P><STRONG><a name="[247]"></a>widget_on_keydown_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_keydown_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[925]"></a>widget_on_keyup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_keyup))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = widget_on_keyup &rArr; widget_on_keyup_impl &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_children
</UL>

<P><STRONG><a name="[246]"></a>widget_on_keyup_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_keyup_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[da0]"></a>widget_on_paint_background</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, widget.o(i.widget_on_paint_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[d6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_background
</UL>
<BR>[Called By]<UL><LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[da1]"></a>widget_on_paint_begin</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, widget.o(i.widget_on_paint_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_on_paint_begin &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[da2]"></a>widget_on_paint_border</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, widget.o(i.widget_on_paint_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = widget_on_paint_border &rArr; widget_draw_border &rArr; widget_stroke_border_rect &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[d71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_border
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[da3]"></a>widget_on_paint_children</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, widget.o(i.widget_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = widget_on_paint_children &rArr; widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children_default
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[248]"></a>widget_on_paint_children_default</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, widget_vtable.o(i.widget_on_paint_children_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_paint_children
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[da5]"></a>widget_on_paint_end</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, widget.o(i.widget_on_paint_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_on_paint_end &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[214]"></a>widget_on_paint_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_paint_null))
<BR>[Address Reference Count : 7]<UL><LI> progress_bar.o(.constdata)
<LI> pages.o(.constdata)
<LI> slider.o(.constdata)
<LI> mutable_image.o(.constdata)
<LI> svg_image.o(.constdata)
<LI> gif_image.o(.constdata)
<LI> guage_pointer.o(.constdata)
</UL>
<P><STRONG><a name="[da6]"></a>widget_on_paint_self</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, widget.o(i.widget_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_on_paint_self &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[1ba]"></a>widget_on_paint_self_default</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, widget_vtable.o(i.widget_on_paint_self_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = widget_on_paint_self_default &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
</UL>
<BR>[Address Reference Count : 3]<UL><LI> button.o(.constdata)
<LI> widget_vtable.o(.constdata)
<LI> digit_clock.o(.constdata)
</UL>
<P><STRONG><a name="[91e]"></a>widget_on_pointer_down</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_down &rArr; widget_on_pointer_down_impl &rArr; widget_on_pointer_down_children &rArr;  widget_on_pointer_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_children
</UL>

<P><STRONG><a name="[249]"></a>widget_on_pointer_down_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_pointer_down_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[91f]"></a>widget_on_pointer_move</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_move &rArr; widget_on_pointer_move_impl &rArr; widget_on_pointer_move_children &rArr;  widget_on_pointer_move (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
</UL>

<P><STRONG><a name="[24a]"></a>widget_on_pointer_move_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_pointer_move_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[920]"></a>widget_on_pointer_up</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_up &rArr; widget_on_pointer_up_impl &rArr; widget_on_pointer_up_children &rArr;  widget_on_pointer_up (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_children
</UL>

<P><STRONG><a name="[24b]"></a>widget_on_pointer_up_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_on_pointer_up_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[a64]"></a>widget_paint</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, widget.o(i.widget_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_on_paint_children
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_system_bar
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_paint_children
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_paint_system_bar
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children_default
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_children
</UL>

<P><STRONG><a name="[689]"></a>widget_paint_helper</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, widget.o(i.widget_paint_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_group_on_paint_self
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_self_default
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_paint_self
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_paint_self
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_paint_self
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_title_on_paint_self
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_client_on_paint_self
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_box_on_paint_self
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_on_paint_self
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_control_on_paint_self
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_self
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_paint_self
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_on_paint_self
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_paint_self
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_paint_self
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_paint_self
</UL>

<P><STRONG><a name="[d61]"></a>widget_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget_pool.o(i.widget_pool))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[d62]"></a>widget_pool_create_widget</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, widget_pool.o(i.widget_pool_create_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = widget_pool_create_widget &rArr; widget_pool_get &rArr; object_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[db5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_create_widget
<LI><a href="#[db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
</UL>

<P><STRONG><a name="[d6c]"></a>widget_pool_destroy_widget</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, widget_pool.o(i.widget_pool_destroy_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_reset_widget
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_real_destroy_widget
<LI><a href="#[db6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>

<P><STRONG><a name="[69e]"></a>widget_prepare_text_style</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, widget.o(i.widget_prepare_text_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_align
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text_mlines
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_on_paint_self
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_measure_text
<LI><a href="#[d72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_icon_text
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_do_paint
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
</UL>

<P><STRONG><a name="[db9]"></a>widget_re_translate_text</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, widget.o(i.widget_re_translate_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_re_translate_text &rArr;  widget_re_translate_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_locale_changed
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
</UL>

<P><STRONG><a name="[d65]"></a>widget_remove_child</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, widget.o(i.widget_remove_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = widget_remove_child &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_remove
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[d4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
</UL>

<P><STRONG><a name="[697]"></a>widget_resize</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, widget.o(i.widget_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = widget_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_create
</UL>

<P><STRONG><a name="[dba]"></a>widget_set_animation</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, widget.o(i.widget_set_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = widget_set_animation &rArr; widget_create_animator &rArr; widget_animator_create &rArr; widget_animator_parser_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create_animator
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
</UL>

<P><STRONG><a name="[a66]"></a>widget_set_as_key_target</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, widget.o(i.widget_set_as_key_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_keyboard
<LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_scrollable
<LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_scroll_view
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_blur_event
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
</UL>

<P><STRONG><a name="[790]"></a>widget_set_children_layout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, layout.o(i.widget_set_children_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = widget_set_children_layout &rArr; children_layouter_create &rArr; children_layouter_create_old &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_destroy
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_create
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_layout_children
</UL>

<P><STRONG><a name="[73f]"></a>widget_set_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, widget.o(i.widget_set_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_set_enable &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
</UL>

<P><STRONG><a name="[817]"></a>widget_set_focused</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, widget.o(i.widget_set_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = widget_set_focused &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_focus
<LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_children
<LI><a href="#[d6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_blur_event
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_focus
</UL>

<P><STRONG><a name="[78e]"></a>widget_set_name</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.widget_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = widget_set_name &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_title_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_client_create
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_end
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
</UL>

<P><STRONG><a name="[adf]"></a>widget_set_need_relayout_children</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, widget.o(i.widget_set_need_relayout_children))
<BR><BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_self
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_recursive
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_params
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
</UL>

<P><STRONG><a name="[987]"></a>widget_set_opacity</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.widget_set_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = widget_set_opacity &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>

<P><STRONG><a name="[61e]"></a>widget_set_prop</STRONG> (Thumb, 912 bytes, Stack size 56 bytes, widget.o(i.widget_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_children_layout
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout
<LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_start_with
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_create
<LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
<LI><a href="#[dba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_animation
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_str
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_int
<LI><a href="#[d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_bool
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_builder_default_on_widget_prop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_update
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop2_update
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_update
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_value_changed
</UL>

<P><STRONG><a name="[d7c]"></a>widget_set_prop_bool</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, widget.o(i.widget_set_prop_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
<LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_first
</UL>

<P><STRONG><a name="[245]"></a>widget_set_prop_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_set_prop_default))
<BR>[Address Reference Count : 1]<UL><LI> widget_vtable.o(.constdata)
</UL>
<P><STRONG><a name="[d75]"></a>widget_set_prop_int</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, widget.o(i.widget_set_prop_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = widget_set_prop_int &rArr;  widget_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_scroll_view
</UL>

<P><STRONG><a name="[d5f]"></a>widget_set_prop_str</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, widget.o(i.widget_set_prop_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = widget_set_prop_str &rArr;  widget_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_apply_tr_text_before_paint
</UL>

<P><STRONG><a name="[dbb]"></a>widget_set_self_layout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, layout.o(i.widget_set_self_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = widget_set_self_layout &rArr; self_layouter_create &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_destroy
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_create
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout_params
</UL>

<P><STRONG><a name="[ade]"></a>widget_set_self_layout_params</STRONG> (Thumb, 48 bytes, Stack size 168 bytes, layout.o(i.widget_set_self_layout_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = widget_set_self_layout_params &rArr; widget_set_self_layout &rArr; self_layouter_create &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[dbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
</UL>

<P><STRONG><a name="[68b]"></a>widget_set_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, widget.o(i.widget_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_update_status
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_pointer_up_cleanup
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_client_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_event
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_pointer_up_cleanup
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_on_event
<LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_event
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_internal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_timer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_status
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_pointer_up_cleanup
</UL>

<P><STRONG><a name="[dbc]"></a>widget_set_style</STRONG> (Thumb, 186 bytes, Stack size 312 bytes, widget.o(i.widget_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
<LI><a href="#[dbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_set
<LI><a href="#[d73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_style_mutable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
</UL>

<P><STRONG><a name="[7a7]"></a>widget_set_text</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, widget.o(i.widget_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_wstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
</UL>

<P><STRONG><a name="[6bf]"></a>widget_set_text_utf8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, widget.o(i.widget_set_text_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_systime_update
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_int
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_double
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_on_paint_self
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[792]"></a>widget_set_tr_text</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, widget.o(i.widget_set_tr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_set_tr_text &rArr;  widget_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_str
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_sync_index_to_value
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup_items
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_top_window_changed
</UL>

<P><STRONG><a name="[784]"></a>widget_set_value</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, widget.o(i.widget_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup_items
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_sync_pages
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_child
</UL>

<P><STRONG><a name="[6ba]"></a>widget_set_visible</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, widget.o(i.widget_set_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = widget_set_visible &rArr; widget_set_visible_self &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_self
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timing
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_on
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_off
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_animate_end
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[73e]"></a>widget_set_visible_only</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, widget.o(i.widget_set_visible_only))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_opactiy_animate_end
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_list_view_layout
</UL>

<P><STRONG><a name="[c62]"></a>widget_state_style_add</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, style_mutable.o(i.widget_state_style_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = widget_state_style_add &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_set_value
</UL>

<P><STRONG><a name="[c5e]"></a>widget_state_style_find</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, style_mutable.o(i.widget_state_style_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_state_style_find
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_set_value
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_is_valid
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
</UL>

<P><STRONG><a name="[a79]"></a>widget_stroke_border_rect</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, widget.o(i.widget_stroke_border_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = widget_stroke_border_rect &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_stroke
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_width
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rounded_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_on_paint_self
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_border
<LI><a href="#[d71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_draw_border
</UL>

<P><STRONG><a name="[766]"></a>widget_to_local</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, widget.o(i.widget_to_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_scrollable
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_point_in
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_target
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target_default
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_normalize_point
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_click
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_up
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fix_anchor
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_find_target
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
</UL>

<P><STRONG><a name="[79c]"></a>widget_to_screen</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, widget.o(i.widget_to_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[d76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_scrollable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_get_trigger
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fix_anchor
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
</UL>

<P><STRONG><a name="[68f]"></a>widget_ungrab</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, widget.o(i.widget_ungrab))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = widget_ungrab &rArr;  widget_ungrab (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_on_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_on_event
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_pointer_up_cleanup
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_pointer_up_cleanup
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_pointer_up_cleanup
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
</UL>

<P><STRONG><a name="[896]"></a>widget_unload_asset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, widget.o(i.widget_unload_asset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_unload_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_destroy
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_destroy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_load_svg_asset
</UL>

<P><STRONG><a name="[a4a]"></a>widget_unload_image</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, widget.o(i.widget_unload_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = widget_unload_image &rArr; widget_get_image_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_unload_bitmap
<LI><a href="#[d82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_image_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_unload_image
</UL>

<P><STRONG><a name="[715]"></a>widget_update_style</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, widget.o(i.widget_update_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = widget_update_style &rArr; style_notify_widget_state_changed
</UL>
<BR>[Calls]<UL><LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_notify_widget_state_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked_only
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_visit_item
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value_only
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value_only
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style_recursive
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_enable
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
<LI><a href="#[dbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_self
</UL>

<P><STRONG><a name="[d4b]"></a>widget_update_style_recursive</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, widget.o(i.widget_update_style_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = widget_update_style_recursive &rArr;  widget_update_style_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style_recursive
</UL>

<P><STRONG><a name="[61f]"></a>widget_use_style</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, widget.o(i.widget_use_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = widget_use_style &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_box_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auto
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_children
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create_button
</UL>

<P><STRONG><a name="[d87]"></a>widget_vtable_default</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, widget_vtable.o(i.widget_vtable_default))
<BR><BR>[Called By]<UL><LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>

<P><STRONG><a name="[dc0]"></a>window_animator_begin_frame</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = window_animator_begin_frame &rArr; window_animator_begin_frame_overlap &rArr; window_animator_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_is_overlap
<LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[1a2]"></a>window_animator_center_scale_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_center_scale.o(i.window_animator_center_scale_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_center_scale_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[dc6]"></a>window_animator_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, window_animator.o(i.window_animator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_vtranslate_create
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_popup_create
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_popdown_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_htranslate_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_fade_create
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_center_scale_create
</UL>

<P><STRONG><a name="[dca]"></a>window_animator_create_for_close</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, window_animator_factory.o(i.window_animator_create_for_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = window_animator_create_for_close &rArr; window_animator_prepare &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>

<P><STRONG><a name="[dcd]"></a>window_animator_create_for_open</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, window_animator_factory.o(i.window_animator_create_for_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = window_animator_create_for_open &rArr; window_animator_prepare &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>

<P><STRONG><a name="[dcf]"></a>window_animator_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = window_animator_destroy &rArr; window_animator_close_destroy &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_open_destroy
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_close_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[dd2]"></a>window_animator_end_frame</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = window_animator_end_frame &rArr; canvas_end_frame &rArr; canvas_draw_fps &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[ce7]"></a>window_animator_factory</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window_animator_factory.o(i.window_animator_factory))
<BR><BR>[Called By]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_register_builtins
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>

<P><STRONG><a name="[d02]"></a>window_animator_factory_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, window_animator_factory.o(i.window_animator_factory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = window_animator_factory_create &rArr; window_animator_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[dd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[dce]"></a>window_animator_factory_create_animator</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, window_animator_factory.o(i.window_animator_factory_create_animator))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_factory_create_animator &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[dcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_impl
</UL>

<P><STRONG><a name="[ce8]"></a>window_animator_factory_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, window_animator_factory.o(i.window_animator_factory_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_factory_destroy &rArr; window_animator_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[dd5]"></a>window_animator_factory_register</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, window_animator_factory.o(i.window_animator_factory_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = window_animator_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_register_builtins
</UL>

<P><STRONG><a name="[ce9]"></a>window_animator_factory_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, window_animator_factory.o(i.window_animator_factory_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[1a1]"></a>window_animator_fade_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, window_animator_fade.o(i.window_animator_fade_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_fade_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[19f]"></a>window_animator_htranslate_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_htranslate.o(i.window_animator_htranslate_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_htranslate_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[2cd]"></a>window_animator_overlap_default_draw_prev</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, window_animator.o(i.window_animator_overlap_default_draw_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = window_animator_overlap_default_draw_prev &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_prev
</UL>
<BR>[Address Reference Count : 4]<UL><LI> window_animator_center_scale.o(.constdata)
<LI> window_animator_popup.o(.constdata)
<LI> window_animator_fade.o(.constdata)
<LI> window_animator_popdown.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>window_animator_popdown_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_popdown.o(i.window_animator_popdown_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_popdown_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[1a4]"></a>window_animator_popup_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_popup.o(i.window_animator_popup_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_popup_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[dcc]"></a>window_animator_prepare</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, window_animator.o(i.window_animator_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = window_animator_prepare &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_curr_window
<LI><a href="#[dc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_is_overlap
<LI><a href="#[dd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_open
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_close
</UL>

<P><STRONG><a name="[d06]"></a>window_animator_register_builtins</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, window_animator_builtins.o(i.window_animator_register_builtins))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = window_animator_register_builtins &rArr; window_animator_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory
<LI><a href="#[dd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[dd9]"></a>window_animator_slide_create</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, window_animator_slide.o(i.window_animator_slide_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = window_animator_slide_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_up_create
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_right_create
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_left_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_down_create
</UL>

<P><STRONG><a name="[1a6]"></a>window_animator_slide_down_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_animator_slide_down.o(i.window_animator_slide_down_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = window_animator_slide_down_create &rArr; window_animator_slide_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[2d6]"></a>window_animator_slide_draw_prev</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, window_animator_slide.o(i.window_animator_slide_draw_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = window_animator_slide_draw_prev &rArr; window_animator_slide_draw_mask &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_overlap_default_draw_prev
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_mask
</UL>
<BR>[Address Reference Count : 4]<UL><LI> window_animator_slide_left.o(.constdata)
<LI> window_animator_slide_right.o(.constdata)
<LI> window_animator_slide_up.o(.constdata)
<LI> window_animator_slide_down.o(.constdata)
</UL>
<P><STRONG><a name="[2d5]"></a>window_animator_slide_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, window_animator_slide.o(i.window_animator_slide_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = window_animator_slide_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
</UL>
<BR>[Address Reference Count : 4]<UL><LI> window_animator_slide_left.o(.constdata)
<LI> window_animator_slide_right.o(.constdata)
<LI> window_animator_slide_up.o(.constdata)
<LI> window_animator_slide_down.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>window_animator_slide_left_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_animator_slide_left.o(i.window_animator_slide_left_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = window_animator_slide_left_create &rArr; window_animator_slide_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[1a8]"></a>window_animator_slide_right_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_animator_slide_right.o(i.window_animator_slide_right_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = window_animator_slide_right_create &rArr; window_animator_slide_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[1a5]"></a>window_animator_slide_up_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_animator_slide_up.o(i.window_animator_slide_up_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = window_animator_slide_up_create &rArr; window_animator_slide_create &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[2d3]"></a>window_animator_to_bottom_draw_curr</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, window_animator_common.o(i.window_animator_to_bottom_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_to_bottom_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 2]<UL><LI> window_animator_popdown.o(.constdata)
<LI> window_animator_slide_down.o(.constdata)
</UL>
<P><STRONG><a name="[2d7]"></a>window_animator_to_left_draw_curr</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, window_animator_common.o(i.window_animator_to_left_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_to_left_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_slide_left.o(.constdata)
</UL>
<P><STRONG><a name="[2d8]"></a>window_animator_to_right_draw_curr</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, window_animator_common.o(i.window_animator_to_right_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_to_right_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_slide_right.o(.constdata)
</UL>
<P><STRONG><a name="[2d4]"></a>window_animator_to_top_draw_curr</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, window_animator_common.o(i.window_animator_to_top_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_to_top_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 2]<UL><LI> window_animator_popup.o(.constdata)
<LI> window_animator_slide_up.o(.constdata)
</UL>
<P><STRONG><a name="[dda]"></a>window_animator_update</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, window_animator.o(i.window_animator_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = window_animator_update &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ddb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update_percent
<LI><a href="#[dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_draw_prev_window
<LI><a href="#[ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_draw_curr_window
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[1a0]"></a>window_animator_vtranslate_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_vtranslate.o(i.window_animator_vtranslate_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = window_animator_vtranslate_create &rArr; window_animator_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[dc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_builtins.o(i.window_animator_register_builtins)
</UL>
<P><STRONG><a name="[dde]"></a>window_base_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, window_base.o(i.window_base_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = window_base_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_load_theme_obj
</UL>

<P><STRONG><a name="[696]"></a>window_base_create</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, window_base.o(i.window_base_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_create
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overlay_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_create
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_create
</UL>

<P><STRONG><a name="[25b]"></a>window_base_get_prop</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, window_base.o(i.window_base_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = window_base_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_pointer
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_get_prop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_get_prop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get_prop
</UL>
<BR>[Address Reference Count : 4]<UL><LI> calibration_win.o(.constdata)
<LI> system_bar.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>window_base_on_destroy</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, window_base.o(i.window_base_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = window_base_on_destroy &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[cba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_destroy
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_on_destroy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_destroy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_destroy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> popup.o(.constdata)
<LI> window.o(.constdata)
<LI> overlay.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>window_base_on_event</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, window_base.o(i.window_base_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = window_base_on_event &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[d4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style_recursive
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
<LI><a href="#[de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_load_theme_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_event
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_event
</UL>
<BR>[Address Reference Count : 4]<UL><LI> dialog.o(.constdata)
<LI> window.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>window_base_on_paint_begin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window_base.o(i.window_base_on_paint_begin))
<BR>[Address Reference Count : 7]<UL><LI> dialog.o(.constdata)
<LI> popup.o(.constdata)
<LI> window.o(.constdata)
<LI> calibration_win.o(.constdata)
<LI> system_bar.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>window_base_on_paint_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window_base.o(i.window_base_on_paint_end))
<BR>[Address Reference Count : 7]<UL><LI> dialog.o(.constdata)
<LI> popup.o(.constdata)
<LI> window.o(.constdata)
<LI> calibration_win.o(.constdata)
<LI> system_bar.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>window_base_on_paint_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window_base.o(i.window_base_on_paint_self))
<BR>[Address Reference Count : 6]<UL><LI> dialog.o(.constdata)
<LI> popup.o(.constdata)
<LI> window.o(.constdata)
<LI> system_bar.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>window_base_set_prop</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, window_base.o(i.window_base_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = window_base_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[de1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_closable_type_find
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_type_find
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_set_prop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_set_prop
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_prop
</UL>
<BR>[Address Reference Count : 4]<UL><LI> calibration_win.o(.constdata)
<LI> system_bar.o(.constdata)
<LI> overlay.o(.constdata)
<LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[de2]"></a>window_cast</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, window.o(i.window_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = window_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_instance_of
</UL>
<BR>[Called By]<UL><LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_fullscreen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_get_prop
</UL>

<P><STRONG><a name="[de1]"></a>window_closable_type_find</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.window_closable_type_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = window_closable_type_find &rArr; find_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
</UL>

<P><STRONG><a name="[69c]"></a>window_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, window_base.o(i.window_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_item_click
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_on_event
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_close
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_close
</UL>

<P><STRONG><a name="[23e]"></a>window_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, window.o(i.window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = window_create &rArr; window_base_create &rArr; window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> widget_factory.o(.constdata)
<LI> window.o(.constdata)
</UL>
<P><STRONG><a name="[60a]"></a>window_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window_manager.o(i.window_manager))
<BR><BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep_default
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_fullscreen
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awtk_mem_on_out_of_memory
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_destroy
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_prepare
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_on_dialog_destroy
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_get_trigger
</UL>

<P><STRONG><a name="[7ba]"></a>window_manager_close_window</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_close_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[de9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_close_window
<LI><a href="#[de7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_prev_window
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_close_animation
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_opened
<LI><a href="#[de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_close
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_close
</UL>

<P><STRONG><a name="[93e]"></a>window_manager_close_window_force</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_close_window_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = window_manager_close_window_force &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[de9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_close_window
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window
<LI><a href="#[d65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_remove_child
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_on_win_close
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_window_open
</UL>

<P><STRONG><a name="[d05]"></a>window_manager_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, window_manager.o(i.window_manager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = window_manager_create &rArr; window_manager_init &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[dea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
</UL>

<P><STRONG><a name="[99b]"></a>window_manager_dispatch_input_event</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_dispatch_input_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
<LI>Call Chain = window_manager_dispatch_input_event &rArr; input_device_status_on_input_event &rArr; widget_on_keydown &rArr; widget_on_keydown_impl &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
<LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_cursor
<LI><a href="#[ded]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_start_or_reset_screen_saver_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_events
</UL>

<P><STRONG><a name="[257]"></a>window_manager_find_target</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, window_manager.o(i.window_manager_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = window_manager_find_target &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_popup
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[c70]"></a>window_manager_get_top_main_window</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_get_top_main_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = window_manager_get_top_main_window &rArr; is_normal_window
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_normal_window
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_remove_child
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_top_window_changed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_bar_on_request_close_window
</UL>

<P><STRONG><a name="[df4]"></a>window_manager_get_top_window</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, window_manager.o(i.window_manager_get_top_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = window_manager_get_top_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
</UL>

<P><STRONG><a name="[dea]"></a>window_manager_init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, window_manager.o(i.window_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = window_manager_init &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_on
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create
</UL>

<P><STRONG><a name="[df3]"></a>window_manager_layout_children</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_resize
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_fullscreen
</UL>

<P><STRONG><a name="[254]"></a>window_manager_on_paint_children</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, window_manager.o(i.window_manager_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = window_manager_on_paint_children &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_system_bar
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_fullscreen
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_normal_window
<LI><a href="#[dd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ddf]"></a>window_manager_open_window</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_open_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = window_manager_open_window &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[d49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_child
<LI><a href="#[df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_top_window
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_do_open_window
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_system_bar
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_create
</UL>

<P><STRONG><a name="[9b1]"></a>window_manager_paint</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = window_manager_paint &rArr; window_manager_paint_animation &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[df5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_fps
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_step
</UL>

<P><STRONG><a name="[7bd]"></a>window_manager_paint_system_bar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_paint_system_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_paint_children
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_prepare
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
</UL>

<P><STRONG><a name="[de9]"></a>window_manager_prepare_close_window</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, window_manager.o(i.window_manager_prepare_close_window))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
</UL>

<P><STRONG><a name="[9a7]"></a>window_manager_resize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = window_manager_resize &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[df3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_children
</UL>
<BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_init
</UL>

<P><STRONG><a name="[ce3]"></a>window_manager_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, window_manager.o(i.window_manager_set))
<BR><BR>[Called By]<UL><LI><a href="#[cfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_internal
<LI><a href="#[ce1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_deinit_internal
</UL>

<P><STRONG><a name="[dfa]"></a>window_manager_set_cursor</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, window_manager.o(i.window_manager_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = window_manager_set_cursor &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_prop
</UL>

<P><STRONG><a name="[7c9]"></a>window_manager_set_dialog_highlighter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, window_manager.o(i.window_manager_set_dialog_highlighter))
<BR><BR>[Called By]<UL><LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_on_dialog_destroy
</UL>

<P><STRONG><a name="[dd8]"></a>window_manager_snap_curr_window</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, window_manager.o(i.window_manager_snap_curr_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = window_manager_snap_curr_window &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[dfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_take_snapshot
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_background
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
</UL>

<P><STRONG><a name="[dd7]"></a>window_manager_snap_prev_window</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, window_manager.o(i.window_manager_snap_prev_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[dfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_take_snapshot
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_set_bg
<LI><a href="#[dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_prepare
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_system_bar
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_background
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_dialog_highlighter
<LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
</UL>

<P><STRONG><a name="[5de]"></a>window_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, window_open.o(i.window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_and_close
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_timing_window
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_setting_window
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_record_window
</UL>

<P><STRONG><a name="[dfe]"></a>window_open_and_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, window_open.o(i.window_open_and_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_name
<LI><a href="#[dff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_expr
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
</UL>

<P><STRONG><a name="[e00]"></a>window_set_fullscreen</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, window.o(i.window_set_fullscreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = window_set_fullscreen &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[df3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_children
<LI><a href="#[de2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_prop
</UL>

<P><STRONG><a name="[abc]"></a>word_break_check</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, line_break.o(i.word_break_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = word_break_check &rArr; set_wordbreaks_utf32 &rArr; set_wordbreaks &rArr; set_brks_to &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks_utf32
<LI><a href="#[e01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wordbreak
</UL>
<BR>[Called By]<UL><LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_multi_line_layout_line
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_line_break_check
</UL>

<P><STRONG><a name="[7e9]"></a>wstr_add_float</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, wstr.o(i.wstr_add_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[e03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_fix
<LI><a href="#[e02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_fraction_nr
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_fraction_nr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>

<P><STRONG><a name="[7db]"></a>wstr_append</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wstr.o(i.wstr_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wstr_append &rArr; wstr_append_with_len &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append_with_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[c8e]"></a>wstr_append_with_len</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wstr.o(i.wstr_append_with_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wstr_append_with_len &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push_int
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
</UL>

<P><STRONG><a name="[7e8]"></a>wstr_from_float</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, wstr.o(i.wstr_from_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = wstr_from_float &rArr; tk_ftoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ftoa
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>

<P><STRONG><a name="[7ee]"></a>wstr_from_int</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, wstr.o(i.wstr_from_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wstr_from_int &rArr; tk_itoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_int
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_int
</UL>

<P><STRONG><a name="[812]"></a>wstr_from_value</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wstr.o(i.wstr_from_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[e05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_wstr
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_prop
</UL>

<P><STRONG><a name="[77e]"></a>wstr_get_utf8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wstr.o(i.wstr_get_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wstr_get_utf8 &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[811]"></a>wstr_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wstr.o(i.wstr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wstr_init &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[d63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_init
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_create
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
</UL>

<P><STRONG><a name="[c94]"></a>wstr_insert</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, wstr.o(i.wstr_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_insert
</UL>

<P><STRONG><a name="[813]"></a>wstr_normalize_newline</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wstr.o(i.wstr_normalize_newline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wstr_normalize_newline
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
</UL>

<P><STRONG><a name="[7dd]"></a>wstr_push</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wstr.o(i.wstr_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wstr_push &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[7d9]"></a>wstr_push_int</STRONG> (Thumb, 78 bytes, Stack size 120 bytes, wstr.o(i.wstr_push_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append_with_len
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[c9f]"></a>wstr_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wstr.o(i.wstr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wstr_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_remove
</UL>

<P><STRONG><a name="[814]"></a>wstr_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wstr.o(i.wstr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wstr_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_destroy
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_copy
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_destroy
</UL>

<P><STRONG><a name="[e06]"></a>wstr_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wstr.o(i.wstr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wstr_set &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[d46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcscpy
<LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
</UL>

<P><STRONG><a name="[979]"></a>wstr_set_utf8</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wstr.o(i.wstr_set_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wstr_set_utf8 &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_extend
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_tips
<LI><a href="#[ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_option_by_text
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_commit_str
</UL>

<P><STRONG><a name="[e03]"></a>wstr_to_fix</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, wstr.o(i.wstr_to_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wstr_to_fix &rArr; wcslen &rArr; wcs_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcschr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
</UL>

<P><STRONG><a name="[7e7]"></a>wstr_to_float</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, wstr.o(i.wstr_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_get_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_valid_value
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>

<P><STRONG><a name="[7ed]"></a>wstr_to_int</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, wstr.o(i.wstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wstr_to_int &rArr; wstr_get_utf8 &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_get_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_valid_value
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_int
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_int
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>

<P><STRONG><a name="[7ea]"></a>wstr_trim_float_zero</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, wstr.o(i.wstr_trim_float_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wstr_trim_float_zero &rArr; wcschr
</UL>
<BR>[Calls]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcschr
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_auto_fix
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>

<P><STRONG><a name="[d2d]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[e07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[e09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4f7]"></a>xPortSysTickHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a5f]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[a5a]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[a5c]"></a>xQueueGenericReceive</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[d2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[d2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[a9a]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[a5e]"></a>xQueueGenericSend</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[d2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[a5d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[a61]"></a>xQueueGiveFromISR</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[a5b]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[e0d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[998]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[4f6]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[a59]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[a58]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[e0a]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a97]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[aa2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[a93]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[d2c]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[aa4]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[ac6]"></a>xml_builder_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xml_builder.o(i.xml_builder_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xml_builder_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[e1a]"></a>xml_builder_on_comment</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xml_builder.o(i.xml_builder_on_comment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_builder_on_comment
</UL>
<BR>[Called By]<UL><LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_comment
</UL>

<P><STRONG><a name="[e1b]"></a>xml_builder_on_end</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xml_builder.o(i.xml_builder_on_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_builder_on_end
</UL>
<BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_end_tag
</UL>

<P><STRONG><a name="[e11]"></a>xml_builder_on_error</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, xml_builder.o(i.xml_builder_on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xml_builder_on_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e1c]"></a>xml_builder_on_pi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xml_builder.o(i.xml_builder_on_pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_builder_on_pi
</UL>
<BR>[Called By]<UL><LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
</UL>

<P><STRONG><a name="[e1d]"></a>xml_builder_on_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xml_builder.o(i.xml_builder_on_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_builder_on_start
</UL>
<BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
</UL>

<P><STRONG><a name="[e0f]"></a>xml_builder_on_text</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xml_builder.o(i.xml_builder_on_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_builder_on_text
</UL>
<BR>[Called By]<UL><LI><a href="#[e0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_on_text
</UL>

<P><STRONG><a name="[ac2]"></a>xml_parser_create</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xml_parser.o(i.xml_parser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xml_parser_create &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[ac5]"></a>xml_parser_destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xml_parser.o(i.xml_parser_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xml_parser_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[ac4]"></a>xml_parser_parse</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, xml_parser.o(i.xml_parser_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = xml_parser_parse &rArr; xml_parser_parse_start_tag &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_start_with
<LI><a href="#[e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_reset_buffer
<LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
<LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
<LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_end_tag
<LI><a href="#[e17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_doctype
<LI><a href="#[e16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_comment
<LI><a href="#[e11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_error
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[ac3]"></a>xml_parser_set_builder</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xml_parser.o(i.xml_parser_set_builder))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[85]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[3ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[99]"></a>void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[97]"></a>void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[95]"></a>void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[93]"></a>void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[9b]"></a>void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[9d]"></a>void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[e24]"></a>void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1206 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge11pixel24_bgrEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e25]"></a>void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 902 bytes, Stack size 168 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge11pixel24_rgbEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e26]"></a>void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 902 bytes, Stack size 168 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge12pixel32_bgraEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e27]"></a>void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 902 bytes, Stack size 168 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge12pixel32_rgbaEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e28]"></a>void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 902 bytes, Stack size 168 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge14pixel16_bgr565EEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e29]"></a>void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1206 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge14pixel16_rgb565EEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[e62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[e35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[98]"></a>void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[96]"></a>void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[94]"></a>void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[92]"></a>void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[9a]"></a>void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[9c]"></a>void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[e67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[4fe]"></a>agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nanovg_agge.o(t._Z6mkrectIfEN4agge4rectIT_EES2_S2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
</UL>

<P><STRONG><a name="[f2c]"></a>int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge10clipping_yIiEEiT_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>

<P><STRONG><a name="[58c]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::end()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[e69]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[e6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[58b]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[588]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[58e]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[101a]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEEC1Ej), UNUSED)

<P><STRONG><a name="[570]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[101b]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEED1Ev), UNUSED)

<P><STRONG><a name="[598]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stroke.o(t._ZN4agge10pod_vectorINS_5pointIfEEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[59f]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stroke.o(t._ZN4agge10pod_vectorINS_5pointIfEEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const
<LI><a href="#[e6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
</UL>

<P><STRONG><a name="[5a3]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stroke_features.o(t._ZN4agge10pod_vectorINS_5pointIfEEE9push_backERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[59d]"></a>agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stroke.o(t._ZN4agge10pod_vectorINS_6vertexEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::capacity() const
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::size() const
<LI><a href="#[e6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[e6c]"></a>agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stroke.o(t._ZN4agge10pod_vectorINS_6vertexEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>

<P><STRONG><a name="[e6d]"></a>agge::pod_vector&lang;unsigned&rang;::grow(unsigned)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[e6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[e6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::capacity() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[589]"></a>agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE6assignEjRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[e6f]"></a>agge::pod_vector&lang;unsigned&rang;::resize(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::capacity() const
<LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)
</UL>

<P><STRONG><a name="[58f]"></a>agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[101c]"></a>agge::pod_vector&lang;unsigned&rang;::pod_vector__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEC1Ej), UNUSED)

<P><STRONG><a name="[571]"></a>agge::pod_vector&lang;unsigned&rang;::~pod_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorIjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::~pod_vector() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[101d]"></a>agge::pod_vector&lang;unsigned&rang;::~pod_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorIjED1Ev), UNUSED)

<P><STRONG><a name="[58a]"></a>agge::pod_vector&lang;unsigned&rang;::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[500]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE12set_clippingERKNS_4rectIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&) &rArr; agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
</UL>

<P><STRONG><a name="[e23]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE13close_polygonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon() &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e72]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE4lineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>

<P><STRONG><a name="[e22]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE7line_toEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float) &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e21]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE7move_toEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float) &rArr; agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[f3c]"></a>void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge11pixel_blendINS_11pixel24_bgrENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f4a]"></a>void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge11pixel_blendINS_11pixel24_rgbENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f58]"></a>void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge11pixel_blendINS_12pixel32_bgraENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f66]"></a>void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge11pixel_blendINS_12pixel32_rgbaES1_EEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f82]"></a>void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge11pixel_blendINS_14pixel16_rgb565ENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a2]"></a>agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stroke_features.o(t._ZN4agge12create_pointIfEENS_5pointIT_EES2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[f86]"></a>void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge12pixel_linearINS_12pixel32_rgbaES1_EEvRT_RKT0_f))
<BR><BR>[Called By]<UL><LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[f85]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_11pixel24_rgbEEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[e73]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e77]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e79]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e7b]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e7d]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e7f]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e81]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e83]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e85]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e87]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e89]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e8b]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e8d]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e8f]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e91]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e93]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e95]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e97]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e99]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e9b]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e9d]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e9f]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ea1]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ea3]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ea5]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ea7]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ea9]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eab]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ead]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eaf]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eb1]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eb3]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eb5]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eb7]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[eb9]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[eba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ebb]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ebd]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ebf]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ec1]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ec3]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ec5]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ec6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[ec7]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[e75]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e78]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e7a]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e7c]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e7e]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ecd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e80]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e82]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ecf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e84]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e86]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e88]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e8a]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e8c]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e8e]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e90]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e92]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e94]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e96]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e98]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e9a]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[edb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e9c]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[e9e]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[edd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ea0]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ede]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ea2]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[edf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ea4]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ea3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ea6]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ea8]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ee2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eaa]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ee3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eac]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eae]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eb0]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eb2]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eb4]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eb6]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eb8]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eba]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ebc]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ebe]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ec0]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ec2]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ec4]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ec3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ec6]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ef1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ec8]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[ef3]"></a>T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge17raw_memory_object3getIhEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[e76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[594]"></a>void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, stroke.o(t._ZN4agge19add_polyline_vertexINS_6strokeEEEvRT_ffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::empty() const
<LI><a href="#[e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::add_vertex(float, float, int)
</UL>

<P><STRONG><a name="[ef4]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEE6vertexEPfS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*) &rArr; agge::stroke::add_vertex(float, float, int) &rArr; void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
<LI><a href="#[ef7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::remove_all()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::add_vertex(float, float, int)
<LI><a href="#[ef6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)
<LI><a href="#[ef5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::vertex(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
</UL>

<P><STRONG><a name="[ef6]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEE9set_stageENS4_5stateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[e67]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEC1ERKS2_RS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[101e]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter__sub_object(const agge::nanovg_vertex::iterator&, agge::stroke&)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEC1ERKS2_RS3_), UNUSED)

<P><STRONG><a name="[e3a]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_bgrEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[101f]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_bgrEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[e42]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_rgbEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1020]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_rgbEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[e4a]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_bgraEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1021]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_bgraEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[e52]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_rgbaEEC1EffffS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1022]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_rgbaEEC1EffffS1_S1_), UNUSED)

<P><STRONG><a name="[e5a]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_bgr565EEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1023]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_bgr565EEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[e62]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_rgb565EEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1024]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_rgb565EEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[f2e]"></a>T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge5widthIiEET_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[ef8]"></a>agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_bgrENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[efa]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[e36]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1025]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[efb]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[e30]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1026]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[efc]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[e2b]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1027]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[efd]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[e33]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[1028]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[efe]"></a>agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[f2f]"></a>T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge6heightIiEET_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[e76]"></a>void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge6memsetIhEEvPT_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[eff]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f02]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f03]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f04]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f05]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f06]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f07]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f08]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f09]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0a]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0b]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0c]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0d]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0e]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f0f]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f10]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f11]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f12]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f13]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f14]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f15]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f16]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f17]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f18]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ea3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f19]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1a]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1b]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1c]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1d]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1e]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f1f]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f20]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f21]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f22]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f23]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[eba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f24]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f25]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f26]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f27]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f28]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[ec3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f29]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ec6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[f2a]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[efe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[f01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[e71]"></a>void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)</STRONG> (Thumb, 1286 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZN4agge7clipperIiE7line_toINS_10rasterizerIS1_NS_7scalingIiEEEEEEvRT_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
<LI><a href="#[f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
<LI><a href="#[f2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
</UL>

<P><STRONG><a name="[e68]"></a>void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge8add_pathINS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEEEEvRT_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2) &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float) &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[e22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[e23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e6b]"></a>T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stroke.o(t._ZN4agge8agge_maxIjEET_RKS1_S3_))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[e70]"></a>int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge8clippingIiEEiT_S1_RKNS_4rectIS1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[e21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
</UL>

<P><STRONG><a name="[f2d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1029]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ec9]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f31]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[eca]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f33]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ecb]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f35]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ecc]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f37]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ecd]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f39]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ece]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f3b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[102f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ecf]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f3d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1030]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f3f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1031]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed1]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f41]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1032]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f43]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1033]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ed3]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f45]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1034]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ed4]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f47]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1035]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ed5]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f49]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1036]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ed6]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f4b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1037]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed7]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f4d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1038]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed8]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f4f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1039]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ed9]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f51]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[eda]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f53]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[edb]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f55]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[edc]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f57]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[edd]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f59]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ede]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f5b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[103f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[edf]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f5d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1040]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ee0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f5f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1041]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee1]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f61]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1042]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f63]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1043]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee3]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f65]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1044]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee4]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f67]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1045]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ee5]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f69]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1046]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ee6]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f6b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1047]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[ee7]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f6d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1048]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee8]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f6f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1049]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ee9]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f71]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[eea]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f73]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[eeb]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f75]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[eec]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f77]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[eed]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ebe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f79]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[eee]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f7b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[104f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[eef]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f7d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1050]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ef0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f7f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1051]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ef1]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[f81]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[f2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[e2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[1052]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[ef2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[e37]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[eff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e31]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e2e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e34]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e3b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e3c]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e39]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[f07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e3e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e3d]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e3f]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e40]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e43]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e44]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e41]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[f0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e48]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e45]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e47]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e46]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e4b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e4c]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e49]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[f15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e50]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e4e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e4f]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e4d]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e53]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e54]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e51]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e58]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e56]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e55]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e57]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e5b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e5c]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e59]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[f23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e60]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e5e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e5d]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e5f]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[f27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e63]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e64]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[e61]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[f81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[f2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[ef3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[587]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorINS_17vector_rasterizer4cellEE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[e6a]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorINS_17vector_rasterizer4cellEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[e69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[59e]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_5pointIfEEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[59b]"></a>agge::pod_vector&lang;agge::vertex&rang;::size() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
</UL>

<P><STRONG><a name="[596]"></a>agge::pod_vector&lang;agge::vertex&rang;::empty() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>

<P><STRONG><a name="[59c]"></a>agge::pod_vector&lang;agge::vertex&rang;::capacity() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[e6e]"></a>agge::pod_vector&lang;unsigned&rang;::capacity() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorIjE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
<LI><a href="#[e6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[f83]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f30]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f88]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f32]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f8a]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f34]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ecb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f8c]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f36]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f8e]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f3e]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f8f]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f40]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f90]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f42]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f91]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f44]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f92]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f4c]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f93]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f4e]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f94]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f50]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f95]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f52]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f96]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f5a]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ede]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f97]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f5c]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[edf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f98]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f5e]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f99]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f60]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9a]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f68]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9b]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f6a]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9c]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f6c]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9d]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f6e]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9e]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f76]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f9f]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f78]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa0]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f7a]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa1]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[efd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[f86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[f8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f7c]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[f87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa3]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fa2]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f38]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ecd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa5]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fa4]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f46]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa7]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fa6]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f54]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[edb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fa9]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEE8gradientEfRS1_))
<BR><BR>[Called By]<UL><LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fa8]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEE9get_colorEiiRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f62]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fab]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[faa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[faa]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f70]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[faa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fad]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fac]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[fad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f7e]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[faf]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fae]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[faf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f3a]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ece]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fb1]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fb0]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[fb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f48]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ed5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fb3]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fb2]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[fb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f56]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fb5]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEE8gradientEfRS1_))
<BR><BR>[Called By]<UL><LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fb4]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEE9get_colorEiiRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[fb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f64]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fb7]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fb6]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[fb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f72]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[fb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[eea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[fb9]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[fb8]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[fb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[f80]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ef1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[f2b]"></a>void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZNK4agge7clipperIiE11line_clip_yINS_10rasterizerIS1_NS_7scalingIiEEEEEEvRT_iiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>

<P><STRONG><a name="[e74]"></a>agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge7windingILh8EEclEi))
<BR><BR>[Called By]<UL><LI><a href="#[ec7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ec1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ebb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ead]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[eab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[ea1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[e73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[fba]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[a42]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[1053]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[fbc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[fbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>

<P><STRONG><a name="[5c9]"></a>_drem</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, drem_clz.o(x$fpl$drem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drem &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[d32]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
</UL>

<P><STRONG><a name="[1054]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[d31]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
</UL>

<P><STRONG><a name="[1055]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[3a5]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1056]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1057]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a41]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
</UL>

<P><STRONG><a name="[fbd]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[387]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[38b]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[fbb]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[fbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[5cb]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[fba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3f3]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[40f]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[40e]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[fbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[fbe]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[fbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[446]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sys.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cache_Enable
</UL>

<P><STRONG><a name="[46e]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[46f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[45e]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[460]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[462]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[469]"></a>LTDC_SetConfig</STRONG> (Thumb, 528 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[90]"></a>SD_DMAError</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[8f]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[8e]"></a>SD_DMARxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[91]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[8d]"></a>SD_DMATxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[4ec]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[4a1]"></a>SD_InitCard</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[4a0]"></a>SD_PowerON</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[49c]"></a>SD_Read_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Read_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[495]"></a>SD_SendStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[493]"></a>SD_WideBus_Disable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[492]"></a>SD_WideBus_Enable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[49b]"></a>SD_Write_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Write_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[4d8]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[4d3]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[4dd]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[4d5]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[4e2]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[4da]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[473]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[8c]"></a>QSPI_DMAAbortCplt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f7xx_hal_qspi.o(i.QSPI_DMAAbortCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QSPI_DMAAbortCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler)
</UL>
<P><STRONG><a name="[472]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[4be]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[4b4]"></a>I2C_GPIO_Config</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, bsp_i2c_touch.o(i.I2C_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[8c6]"></a>i2c_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[450]"></a>GTP_Get_Info</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp_touch_gtxx.o(i.GTP_Get_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[44e]"></a>GTP_I2C_Read</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_OnePiontScan
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
</UL>

<P><STRONG><a name="[452]"></a>GTP_I2C_Test</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GTP_I2C_Test &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[44f]"></a>GTP_I2C_Write</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GTP_I2C_Write &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_OnePiontScan
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[45d]"></a>GTP_Touch_Down</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_touch_gtxx.o(i.GTP_Touch_Down))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[45c]"></a>GTP_Touch_Up</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_touch_gtxx.o(i.GTP_Touch_Up))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[45a]"></a>Goodix_TS_Work_Func</STRONG> (Thumb, 362 bytes, Stack size 136 bytes, bsp_touch_gtxx.o(i.Goodix_TS_Work_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Up
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Down
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>

<P><STRONG><a name="[451]"></a>I2C_Transfer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bsp_touch_gtxx.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>

<P><STRONG><a name="[4cf]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, qspi.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
</UL>

<P><STRONG><a name="[429]"></a>QSPI_DummyCyclesCfg</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, qspi.o(i.QSPI_DummyCyclesCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[428]"></a>QSPI_EnterFourBytesAddress</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, qspi.o(i.QSPI_EnterFourBytesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_EnterFourBytesAddress &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[427]"></a>QSPI_ResetMemory</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, qspi.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[4d0]"></a>QSPI_WriteEnable</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, qspi.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[a95]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[a96]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[a99]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[a9f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[aa0]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[aa1]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[aab]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[a86]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[d2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[a8a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[a91]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[a94]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[18f]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[a9b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[a8c]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[d29]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[e0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a8e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[aaa]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[a9e]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[aa3]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[aa5]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[aa7]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[aa6]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[aa9]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1b3]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[144]"></a>prvTaskExitError</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[aae]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[aaf]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a57]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[ad]"></a>asset_cache_cmp_type</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, assets_manager.o(i.asset_cache_cmp_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = asset_cache_cmp_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assets_manager.o(i.assets_manager_init)
</UL>
<P><STRONG><a name="[5ea]"></a>asset_info_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, assets_manager.o(i.asset_info_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_unref
</UL>

<P><STRONG><a name="[5f1]"></a>asset_info_ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, assets_manager.o(i.asset_info_ref))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[ae]"></a>asset_info_unref</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, assets_manager.o(i.asset_info_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assets_manager.o(i.assets_manager_init)
</UL>
<P><STRONG><a name="[5fd]"></a>assets_manager_get_locale_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_get_locale_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assets_manager_get_locale_info
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[604]"></a>assets_manager_ref_impl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, assets_manager.o(i.assets_manager_ref_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = assets_manager_ref_impl &rArr; assets_manager_find_in_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_find_in_cache
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[d42]"></a>wbuffer_extend_capacity</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, buffer.o(i.wbuffer_extend_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_extend_delta
</UL>

<P><STRONG><a name="[d43]"></a>wbuffer_extend_delta</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, buffer.o(i.wbuffer_extend_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_extend_capacity
</UL>
<BR>[Called By]<UL><LI><a href="#[d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_binary
</UL>

<P><STRONG><a name="[1b7]"></a>button_get_prop</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, button.o(i.button_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = button_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>button_get_prop_default_value</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, button.o(i.button_get_prop_default_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = button_get_prop_default_value &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>button_on_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button.o(i.button_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = button_on_destroy &rArr; button_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_remove_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>button_on_event</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, button.o(i.button_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = button_on_event &rArr; widget_is_point_in &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_point_in
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_remove_timer
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>button_on_long_press</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, button.o(i.button_on_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = button_on_long_press &rArr; button_pointer_up_cleanup &rArr; button_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.button_on_event)
</UL>
<P><STRONG><a name="[b6]"></a>button_on_repeat</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, button.o(i.button_on_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = button_on_repeat &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.button_on_event)
</UL>
<P><STRONG><a name="[68d]"></a>button_pointer_up_cleanup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, button.o(i.button_pointer_up_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = button_pointer_up_cleanup &rArr; button_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_remove_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_long_press
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
</UL>

<P><STRONG><a name="[68a]"></a>button_remove_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, button.o(i.button_remove_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = button_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pointer_up_cleanup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_event
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_on_destroy
</UL>

<P><STRONG><a name="[1b9]"></a>button_set_prop</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, button.o(i.button_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = button_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_repeat
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_enable_long_press
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>button_group_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, button_group.o(i.button_group_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = button_group_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_group.o(.constdata)
</UL>
<P><STRONG><a name="[6c5]"></a>canvas_do_draw_image</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, canvas.o(i.canvas_do_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
</UL>

<P><STRONG><a name="[6c7]"></a>canvas_draw_fps</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, canvas.o(i.canvas_draw_fps))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = canvas_draw_fps &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
</UL>

<P><STRONG><a name="[6ce]"></a>canvas_draw_glyph</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, canvas.o(i.canvas_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_impl
</UL>

<P><STRONG><a name="[6d0]"></a>canvas_draw_hline_impl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, canvas.o(i.canvas_draw_hline_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = canvas_draw_hline_impl &rArr; lcd_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect_impl
</UL>

<P><STRONG><a name="[6e7]"></a>canvas_draw_text_impl</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, canvas.o(i.canvas_draw_text_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_glyph
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
</UL>

<P><STRONG><a name="[6ea]"></a>canvas_draw_vline_impl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, canvas.o(i.canvas_draw_vline_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect_impl
</UL>

<P><STRONG><a name="[6ee]"></a>canvas_fill_rect_impl</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, canvas.o(i.canvas_fill_rect_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
</UL>

<P><STRONG><a name="[6d5]"></a>canvas_fix_rect</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, canvas.o(i.canvas_fix_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = canvas_fix_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_w
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_h
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_down
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_y
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat_x
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_repeat
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch9
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y_scale_x
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_y
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x_scale_y
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_patch3_x
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_center
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon_in_rect
</UL>

<P><STRONG><a name="[6fe]"></a>canvas_measure_text_default</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, canvas.o(i.canvas_measure_text_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
</UL>

<P><STRONG><a name="[70c]"></a>canvas_stroke_rect_impl</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, canvas.o(i.canvas_stroke_rect_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = canvas_stroke_rect_impl &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_stroke_rect
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline_impl
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect
</UL>

<P><STRONG><a name="[1c0]"></a>check_button_get_prop</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, check_button.o(i.check_button_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = check_button_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> check_button.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>check_button_on_event</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, check_button.o(i.check_button_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = check_button_on_event &rArr; widget_is_point_in &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_point_in
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> check_button.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>check_button_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, check_button.o(i.check_button_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = check_button_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> check_button.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>check_button_set_prop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, check_button.o(i.check_button_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = check_button_set_prop &rArr; check_button_set_value &rArr; check_button_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> check_button.o(.constdata)
</UL>
<P><STRONG><a name="[710]"></a>check_button_set_value_only</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, check_button.o(i.check_button_set_value_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = check_button_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_set_value
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create_radio
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_button_create
</UL>

<P><STRONG><a name="[76a]"></a>color_parse_hex</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, color_parser.o(i.color_parse_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = color_parse_hex &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_sscanf
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[769]"></a>color_parse_impl</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, color_parser.o(i.color_parse_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_lower
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_start_with
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_name_to_value
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_rgba
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
</UL>

<P><STRONG><a name="[76f]"></a>color_parse_rgba</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, color_parser.o(i.color_parse_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_sscanf
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[130]"></a>compare_color</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, color_parser.o(i.compare_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compare_color
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_parser.o(i.map_name_to_value)
</UL>
<P><STRONG><a name="[770]"></a>map_name_to_value</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, color_parser.o(i.map_name_to_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = map_name_to_value &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse_impl
</UL>

<P><STRONG><a name="[1c6]"></a>color_tile_get_prop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, color_tile.o(i.color_tile_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = color_tile_get_prop &rArr; value_set_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_tile.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>color_tile_on_paint_self</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, color_tile.o(i.color_tile_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = color_tile_on_paint_self &rArr; canvas_stroke_rect &rArr; canvas_stroke_rect_impl &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_cast
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_tile.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>color_tile_set_prop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, color_tile.o(i.color_tile_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = color_tile_set_prop &rArr; color_tile_set_border_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_border_color
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_bg_color
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_tile.o(.constdata)
</UL>
<P><STRONG><a name="[78f]"></a>combo_box_create_popup</STRONG> (Thumb, 122 bytes, Stack size 192 bytes, combo_box.o(i.combo_box_create_popup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = combo_box_create_popup &rArr; combo_box_create_popup_items &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_children_layout
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_count_options
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup_items
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
</UL>

<P><STRONG><a name="[791]"></a>combo_box_create_popup_items</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_create_popup_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = combo_box_create_popup_items &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_create
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
</UL>

<P><STRONG><a name="[1ca]"></a>combo_box_create_self</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, combo_box.o(i.combo_box_create_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = combo_box_create_self &rArr; edit_create_ex &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>combo_box_get_prop</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = combo_box_get_prop &rArr; edit_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_prop
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(.constdata)
</UL>
<P><STRONG><a name="[797]"></a>combo_box_hook_items</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_hook_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = combo_box_hook_items &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_button_click
</UL>

<P><STRONG><a name="[c5]"></a>combo_box_on_button_click</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, combo_box.o(i.combo_box_on_button_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = combo_box_on_button_click &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_resize
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_hook_items
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_create_popup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(i.combo_box_create)
</UL>
<P><STRONG><a name="[1d0]"></a>combo_box_on_destroy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = combo_box_on_destroy &rArr; edit_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_destroy
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_reset_options
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>combo_box_on_item_click</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_on_item_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = combo_box_on_item_click &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_index_of
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(i.combo_box_visit_item)
</UL>
<P><STRONG><a name="[1ce]"></a>combo_box_on_layout_children</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, combo_box.o(i.combo_box_on_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = combo_box_on_layout_children &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>combo_box_set_prop</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = combo_box_set_prop &rArr; combo_box_set_value &rArr; combo_box_set_selected_index &rArr; combo_box_set_selected_index_ex &rArr; widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_value
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_open_window
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_parse_options
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(.constdata)
</UL>
<P><STRONG><a name="[7a0]"></a>combo_box_set_selected_index_ex</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, combo_box.o(i.combo_box_set_selected_index_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = combo_box_set_selected_index_ex &rArr; widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_sync_index_to_value
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_on_item_click
</UL>

<P><STRONG><a name="[7a8]"></a>combo_box_sync_index_to_value</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_sync_index_to_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = combo_box_sync_index_to_value &rArr; widget_set_tr_text &rArr;  widget_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_get_option
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_set_selected_index_ex
</UL>

<P><STRONG><a name="[c6]"></a>combo_box_visit_item</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, combo_box.o(i.combo_box_visit_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = combo_box_visit_item &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_index_of
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_cast
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box.o(i.combo_box_hook_items)
</UL>
<P><STRONG><a name="[1d2]"></a>combo_box_item_get_prop</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, combo_box_item.o(i.combo_box_item_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = combo_box_item_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box_item.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>combo_box_item_on_event</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, combo_box_item.o(i.combo_box_item_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = combo_box_item_on_event &rArr; combo_box_item_set_checked &rArr; combo_box_item_set_checked_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box_item.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>combo_box_item_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, combo_box_item.o(i.combo_box_item_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = combo_box_item_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box_item.o(.constdata)
</UL>
<P><STRONG><a name="[79a]"></a>combo_box_item_set_checked_only</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, combo_box_item.o(i.combo_box_item_set_checked_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = combo_box_item_set_checked_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_cast
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked
</UL>

<P><STRONG><a name="[1d3]"></a>combo_box_item_set_prop</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, combo_box_item.o(i.combo_box_item_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = combo_box_item_set_prop &rArr; combo_box_item_set_checked &rArr; combo_box_item_set_checked_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_value
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combo_box_item_set_checked
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combo_box_item.o(.constdata)
</UL>
<P><STRONG><a name="[7b9]"></a>dialog_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dialog.o(i.dialog_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = dialog_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_idle_close
</UL>

<P><STRONG><a name="[1d7]"></a>dialog_get_prop</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dialog.o(i.dialog_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dialog_get_prop &rArr; window_base_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>dialog_idle_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dialog.o(i.dialog_idle_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = dialog_idle_close &rArr; dialog_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog.o(i.dialog_modal)
</UL>
<P><STRONG><a name="[1dc]"></a>dialog_on_add_child</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dialog.o(i.dialog_on_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dialog_on_add_child &rArr; dialog_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>dialog_on_destroy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dialog.o(i.dialog_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dialog_on_destroy &rArr; window_base_on_destroy &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>dialog_set_prop</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dialog.o(i.dialog_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dialog_set_prop &rArr; window_base_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_copy
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog.o(.constdata)
</UL>
<P><STRONG><a name="[7d2]"></a>is_dialog_opened</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dialog.o(i.is_dialog_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = is_dialog_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
</UL>

<P><STRONG><a name="[1e0]"></a>dialog_client_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dialog_client.o(i.dialog_client_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = dialog_client_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_client.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>dialog_title_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dialog_title.o(i.dialog_title_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = dialog_title_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_title.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>dragger_get_prop</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dragger.o(i.dragger_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dragger_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dragger.o(.constdata)
</UL>
<P><STRONG><a name="[7e3]"></a>dragger_move</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, dragger.o(i.dragger_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dragger_move &rArr; widget_move &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_on_event
</UL>

<P><STRONG><a name="[1e7]"></a>dragger_on_event</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, dragger.o(i.dragger_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dragger_on_event &rArr; dragger_move &rArr; widget_move &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dragger.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>dragger_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dragger.o(i.dragger_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = dragger_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dragger.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>dragger_set_prop</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dragger.o(i.dragger_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dragger_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dragger.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>easing_back_in</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, easing.o(i.easing_back_in))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>easing_back_inout</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, easing.o(i.easing_back_inout))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>easing_back_out</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, easing.o(i.easing_back_out))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>easing_bounce_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, easing.o(i.easing_bounce_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = easing_bounce_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_inout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>easing_bounce_inout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, easing.o(i.easing_bounce_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = easing_bounce_inout &rArr; easing_bounce_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_out
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>easing_bounce_out</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, easing.o(i.easing_bounce_out))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_inout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_bounce_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>easing_circular_in</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, easing.o(i.easing_circular_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = easing_circular_in &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>easing_circular_inout</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, easing.o(i.easing_circular_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = easing_circular_inout &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>easing_circular_out</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, easing.o(i.easing_circular_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = easing_circular_out &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>easing_cubic_in</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, easing.o(i.easing_cubic_in))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>easing_cubic_out</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, easing.o(i.easing_cubic_out))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>easing_elastic_in</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, easing.o(i.easing_elastic_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = easing_elastic_in &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>easing_elastic_inout</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, easing.o(i.easing_elastic_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = easing_elastic_inout &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>easing_elastic_out</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, easing.o(i.easing_elastic_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = easing_elastic_out &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>easing_linear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, easing.o(i.easing_linear))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>easing_pow_in</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, easing.o(i.easing_pow_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = easing_pow_in &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>easing_pow_inout</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, easing.o(i.easing_pow_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = easing_pow_inout &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>easing_pow_out</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, easing.o(i.easing_pow_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = easing_pow_out &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>easing_quadratic_in</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, easing.o(i.easing_quadratic_in))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>easing_quadratic_inout</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, easing.o(i.easing_quadratic_inout))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>easing_quadratic_out</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, easing.o(i.easing_quadratic_out))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>easing_sin_in</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, easing.o(i.easing_sin_in))
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>easing_sin_inout</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, easing.o(i.easing_sin_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = easing_sin_inout &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>easing_sin_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, easing.o(i.easing_sin_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = easing_sin_out &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easing.o(.constdata)
</UL>
<P><STRONG><a name="[7e6]"></a>edit_add_float</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, edit.o(i.edit_add_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = edit_add_float &rArr; wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_trim_float_zero
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
</UL>

<P><STRONG><a name="[7ec]"></a>edit_add_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, edit.o(i.edit_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = edit_add_int &rArr; wstr_from_int &rArr; tk_itoa &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
</UL>

<P><STRONG><a name="[7ef]"></a>edit_auto_fix</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, edit.o(i.edit_auto_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = edit_auto_fix &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_trim_float_zero
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_float
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_int
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_float
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[7f2]"></a>edit_commit_str</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, edit.o(i.edit_commit_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = edit_commit_str &rArr; edit_input_char &rArr; edit_do_input_char &rArr; text_edit_paste &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[7eb]"></a>edit_dispatch_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, edit.o(i.edit_dispatch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = edit_dispatch_event &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_int
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_float
</UL>

<P><STRONG><a name="[7f8]"></a>edit_do_input_char</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, edit.o(i.edit_do_input_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = edit_do_input_char &rArr; text_edit_paste &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paste
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
</UL>

<P><STRONG><a name="[d4]"></a>edit_hook_button</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, edit.o(i.edit_hook_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = edit_hook_button &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_hook_children_button)
</UL>
<P><STRONG><a name="[cf]"></a>edit_hook_children_button</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, edit.o(i.edit_hook_children_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = edit_hook_children_button &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_create_ex)
</UL>
<P><STRONG><a name="[7f3]"></a>edit_input_char</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, edit.o(i.edit_input_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = edit_input_char &rArr; edit_do_input_char &rArr; text_edit_paste &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcs_chr
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_cursor
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_do_input_char
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_commit_str
</UL>

<P><STRONG><a name="[7ff]"></a>edit_is_number</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, edit.o(i.edit_is_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = edit_is_number &rArr; edit_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
</UL>

<P><STRONG><a name="[d2]"></a>edit_on_clear</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, edit.o(i.edit_on_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = edit_on_clear &rArr; edit_clear &rArr; text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_hook_button)
</UL>
<P><STRONG><a name="[d1]"></a>edit_on_dec</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, edit.o(i.edit_on_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = edit_on_dec &rArr; edit_dec &rArr; edit_add_float &rArr; wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_hook_button)
</UL>
<P><STRONG><a name="[d0]"></a>edit_on_inc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, edit.o(i.edit_on_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = edit_on_inc &rArr; edit_inc &rArr; edit_add_float &rArr; wstr_add_float &rArr; wstr_to_float &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_hook_button)
</UL>
<P><STRONG><a name="[808]"></a>edit_on_key_down</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, edit.o(i.edit_on_key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = edit_on_key_down &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_prev
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_next
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_inc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dec
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_paste
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_is_number
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_dispatch_event
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[d3]"></a>edit_on_password_visible</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, edit.o(i.edit_on_password_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = edit_on_password_visible &rArr; edit_set_password_visible &rArr; text_edit_set_cursor &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_bool
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_password_visible
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_hook_button)
</UL>
<P><STRONG><a name="[80c]"></a>edit_paste</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, edit.o(i.edit_paste))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = edit_paste &rArr; wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_normalize_newline
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_board_get_text
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_input_char
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_key_down
</UL>

<P><STRONG><a name="[806]"></a>edit_pointer_up_cleanup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, edit.o(i.edit_pointer_up_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = edit_pointer_up_cleanup &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[809]"></a>edit_request_input_method</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, edit.o(i.edit_request_input_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = edit_request_input_method &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
</UL>

<P><STRONG><a name="[d6]"></a>edit_request_input_method_on_window_open</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, edit.o(i.edit_request_input_method_on_window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edit_request_input_method_on_window_open &rArr; input_method_request
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_request_input_method)
</UL>
<P><STRONG><a name="[d5]"></a>edit_update_caret</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, edit.o(i.edit_update_caret))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = edit_update_caret &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cast
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_caret_visible
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_invert_caret_visible
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(i.edit_on_event)
</UL>
<P><STRONG><a name="[7f5]"></a>edit_update_status</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, edit.o(i.edit_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = edit_update_status &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_prop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_on_event
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_create_ex
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_focus
</UL>

<P><STRONG><a name="[823]"></a>emitter_item_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, emitter.o(i.emitter_item_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_deinit
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove
</UL>

<P><STRONG><a name="[828]"></a>emitter_remove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, emitter.o(i.emitter_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_item_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_remove_item
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off_by_func
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off_by_ctx
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off
</UL>

<P><STRONG><a name="[949]"></a>key_name_fix</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, enums.o(i.key_name_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_name_fix &rArr; tk_strncpy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_type_find
</UL>

<P><STRONG><a name="[d8]"></a>font_cmp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, font_manager.o(i.font_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = font_cmp &rArr; font_match
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_manager.o(i.font_manager_init)
</UL>
<P><STRONG><a name="[891]"></a>glyph_cache_get_empty</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, glyph_cache.o(i.glyph_cache_get_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = glyph_cache_get_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_add
</UL>

<P><STRONG><a name="[206]"></a>group_box_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, group_box.o(i.group_box_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = group_box_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> group_box.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>image_get_prop</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, image.o(i.image_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = image_get_prop &rArr; image_base_get_prop &rArr; value_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_get_prop
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>image_on_paint_self</STRONG> (Thumb, 238 bytes, Stack size 128 bytes, image.o(i.image_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = image_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_icon
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_need_transform
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>image_set_prop</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, image.o(i.image_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = image_set_prop &rArr; image_base_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_type_find
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_prop
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_set_draw_type
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>bitmap_cache_cmp_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image_manager.o(i.bitmap_cache_cmp_data))
<BR>[Address Reference Count : 2]<UL><LI> image_manager.o(i.image_manager_unload_bitmap)
<LI> image_manager.o(i.image_manager_update_specific)
</UL>
<P><STRONG><a name="[ed]"></a>bitmap_cache_cmp_name</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, image_manager.o(i.bitmap_cache_cmp_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_cache_cmp_name
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_manager.o(i.image_manager_lookup)
</UL>
<P><STRONG><a name="[ef]"></a>bitmap_cache_cmp_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, image_manager.o(i.bitmap_cache_cmp_time))
<BR>[Address Reference Count : 1]<UL><LI> image_manager.o(i.image_manager_unload_unused)
</UL>
<P><STRONG><a name="[ec]"></a>bitmap_cache_destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, image_manager.o(i.bitmap_cache_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bitmap_cache_destroy &rArr; bitmap_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_manager.o(i.image_manager_init)
</UL>
<P><STRONG><a name="[906]"></a>image_manager_get_bitmap_impl</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, image_manager.o(i.image_manager_get_bitmap_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = image_manager_get_bitmap_impl &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_lookup
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_add
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_loader_load_image
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_on_expr_result
</UL>

<P><STRONG><a name="[eb]"></a>image_manager_on_expr_result</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, image_manager.o(i.image_manager_on_expr_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = image_manager_on_expr_result &rArr; image_manager_get_bitmap_impl &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap_impl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_manager.o(i.image_manager_get_bitmap_exprs)
</UL>
<P><STRONG><a name="[93c]"></a>input_method_dispatch_key_only</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, input_method.o(i.input_method_dispatch_key_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = input_method_dispatch_key_only &rArr; input_method_dispatch_to_widget &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_init
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_to_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key
</UL>

<P><STRONG><a name="[20e]"></a>label_get_prop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, label.o(i.label_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = label_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> label.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>label_on_line</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, label.o(i.label_on_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = label_on_line &rArr; canvas_draw_text_in_rect &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> label.o(i.label_paint_text_mlines)
</UL>
<P><STRONG><a name="[210]"></a>label_on_paint_self</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, label.o(i.label_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = label_on_paint_self &rArr; label_paint_text &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> label.o(.constdata)
</UL>
<P><STRONG><a name="[952]"></a>label_paint_text</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, label.o(i.label_paint_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = label_paint_text &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_breaker_count
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_cast
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text_mlines
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_on_paint_self
</UL>

<P><STRONG><a name="[954]"></a>label_paint_text_mlines</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, label.o(i.label_paint_text_mlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = label_paint_text_mlines &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_breaker_break
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_paint_text
</UL>

<P><STRONG><a name="[20f]"></a>label_set_prop</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, label.o(i.label_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = label_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_length
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> label.o(.constdata)
</UL>
<P><STRONG><a name="[994]"></a>locale_info_deinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, locale_info.o(i.locale_info_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = locale_info_deinit &rArr; assets_manager_unref &rArr; asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_destroy
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_get_assets_manager
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_destroy
</UL>

<P><STRONG><a name="[991]"></a>locale_info_get_assets_manager</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, locale_info.o(i.locale_info_get_assets_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = locale_info_get_assets_manager
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_deinit
</UL>

<P><STRONG><a name="[993]"></a>locale_info_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, locale_info.o(i.locale_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = locale_info_init &rArr; locale_info_change &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_create
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_create
</UL>

<P><STRONG><a name="[9d3]"></a>node_merge</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mem.o(i.node_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge2
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>

<P><STRONG><a name="[9d4]"></a>node_merge2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mem.o(i.node_merge2))
<BR><BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>

<P><STRONG><a name="[9b5]"></a>tk_alloc_impl</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, mem.o(i.tk_alloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
<LI><a href="#[ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
</UL>

<P><STRONG><a name="[ce0]"></a>tk_calloc_impl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mem.o(i.tk_calloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>

<P><STRONG><a name="[876]"></a>tk_free_impl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mem.o(i.tk_free_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>

<P><STRONG><a name="[ab2]"></a>tk_realloc_impl</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(i.tk_realloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[216]"></a>pages_find_target</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pages.o(i.pages_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pages_find_target &rArr; pages_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>pages_get_prop</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pages.o(i.pages_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pages_get_prop &rArr; value_set_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>pages_on_paint_children</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pages.o(i.pages_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = pages_on_paint_children &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>pages_set_prop</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pages.o(i.pages_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = pages_set_prop &rArr; pages_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>popup_get_prop</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, popup.o(i.popup_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = popup_get_prop &rArr; window_base_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> popup.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>popup_on_event</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, popup.o(i.popup_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = popup_on_event &rArr; window_base_on_event &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_contains
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> popup.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>popup_set_prop</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, popup.o(i.popup_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = popup_set_prop &rArr; window_base_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popup_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> popup.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>progress_bar_get_prop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, progress_bar.o(i.progress_bar_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = progress_bar_get_prop &rArr; value_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint8
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_bar.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>progress_bar_on_paint_self</STRONG> (Thumb, 350 bytes, Stack size 80 bytes, progress_bar.o(i.progress_bar_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = progress_bar_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_fg_rect
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_bg_rect
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_bar.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>progress_bar_set_prop</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, progress_bar.o(i.progress_bar_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = progress_bar_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_vertical
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_value
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_set_show_text
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_bar.o(.constdata)
</UL>
<P><STRONG><a name="[b58]"></a>slider_add_value</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, slider.o(i.slider_add_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = slider_add_value &rArr; slider_set_value &rArr; slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_inc
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_dec
</UL>

<P><STRONG><a name="[b5c]"></a>slider_get_bar_size</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, slider.o(i.slider_get_bar_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slider_get_bar_size &rArr; slider_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
</UL>

<P><STRONG><a name="[b5d]"></a>slider_get_dragger_rect</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, slider.o(i.slider_get_dragger_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = slider_get_dragger_rect &rArr; slider_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
</UL>

<P><STRONG><a name="[222]"></a>slider_get_prop</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, slider.o(i.slider_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = slider_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>slider_on_event</STRONG> (Thumb, 590 bytes, Stack size 88 bytes, slider.o(i.slider_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = slider_on_event &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_pointer_up_cleanup
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_dragger_rect
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_contains
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value_internal
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_inc
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_dec
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>slider_on_paint_self</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, slider.o(i.slider_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = slider_on_paint_self &rArr; widget_fill_fg_rect &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_paint_dragger
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_bar_size
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_fg_rect
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_bg_rect
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata)
</UL>
<P><STRONG><a name="[b61]"></a>slider_paint_dragger</STRONG> (Thumb, 192 bytes, Stack size 136 bytes, slider.o(i.slider_paint_dragger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = slider_paint_dragger &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_get_dragger_rect
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_paint_self
</UL>

<P><STRONG><a name="[b5f]"></a>slider_pointer_up_cleanup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, slider.o(i.slider_pointer_up_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = slider_pointer_up_cleanup &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_on_event
</UL>

<P><STRONG><a name="[223]"></a>slider_set_prop</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, slider.o(i.slider_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = slider_set_prop &rArr; slider_set_value &rArr; slider_set_value_internal &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_vertical
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_value
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_step
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_min
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_max
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_set_bar_size
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata)
</UL>
<P><STRONG><a name="[835]"></a>expand_var</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, str.o(i.expand_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_eval
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_expand_vars
</UL>

<P><STRONG><a name="[c4b]"></a>str_count_sub_str</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, str.o(i.str_count_sub_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = str_count_sub_str &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
</UL>

<P><STRONG><a name="[c65]"></a>get_str</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, suggest_words.o(i.get_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_update
</UL>

<P><STRONG><a name="[c63]"></a>suggest_words_find_data</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, suggest_words.o(i.suggest_words_find_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = suggest_words_find_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_find
</UL>

<P><STRONG><a name="[c64]"></a>suggest_words_update</STRONG> (Thumb, 162 bytes, Stack size 144 bytes, suggest_words.o(i.suggest_words_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = suggest_words_update &rArr; wbuffer_write_string &rArr; wbuffer_write_binary &rArr; wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_string
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_init
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_str
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_find
</UL>

<P><STRONG><a name="[c74]"></a>system_info_eval_one</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, system_info.o(i.system_info_eval_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_expand_vars
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
</UL>

<P><STRONG><a name="[228]"></a>system_info_get_prop</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, system_info.o(i.system_info_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = system_info_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_info.o(.constdata)
</UL>
<P><STRONG><a name="[c77]"></a>system_info_normalize_app_root</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system_info.o(i.system_info_normalize_app_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
</UL>

<P><STRONG><a name="[227]"></a>system_info_on_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, system_info.o(i.system_info_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = system_info_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_info.o(.constdata)
</UL>
<P><STRONG><a name="[c7a]"></a>tab_button_get_min_w</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tab_button.o(i.tab_button_get_min_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tab_button_get_min_w &rArr; widget_measure_text &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_measure_text
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_prop
</UL>

<P><STRONG><a name="[c7c]"></a>tab_button_get_pages</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tab_button.o(i.tab_button_get_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tab_button_get_pages &rArr; widget_lookup_by_type &rArr; widget_lookup_by_type_child
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_sync_pages
</UL>

<P><STRONG><a name="[22a]"></a>tab_button_get_prop</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tab_button.o(i.tab_button_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tab_button_get_prop &rArr; tab_button_get_min_w &rArr; widget_measure_text &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_min_w
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>tab_button_on_destroy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tab_button.o(i.tab_button_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tab_button_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>tab_button_on_event</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tab_button.o(i.tab_button_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = tab_button_on_event &rArr; tab_button_set_value &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>tab_button_on_paint_self</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tab_button.o(i.tab_button_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = tab_button_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>tab_button_set_prop</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tab_button.o(i.tab_button_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = tab_button_set_prop &rArr; tab_button_set_value &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_icon
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_active_icon
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(.constdata)
</UL>
<P><STRONG><a name="[c79]"></a>tab_button_set_value_only</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tab_button.o(i.tab_button_set_value_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tab_button_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_set_value
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_create
</UL>

<P><STRONG><a name="[164]"></a>tab_button_sync_pages</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tab_button.o(i.tab_button_sync_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = tab_button_sync_pages &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_index_of
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_get_pages
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button.o(i.tab_button_set_value)
</UL>
<P><STRONG><a name="[c7e]"></a>tab_button_group_get_pages</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tab_button_group.o(i.tab_button_group_get_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tab_button_group_get_pages &rArr; widget_lookup_by_type &rArr; widget_lookup_by_type_child
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
</UL>

<P><STRONG><a name="[230]"></a>tab_button_group_get_prop</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tab_button_group.o(i.tab_button_group_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tab_button_group_get_prop &rArr; hscrollable_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>tab_button_group_invalidate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tab_button_group_invalidate &rArr; hscrollable_invalidate &rArr; rect_intersect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>tab_button_group_on_destroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tab_button_group_on_destroy &rArr; hscrollable_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_destroy
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[238]"></a>tab_button_group_on_event</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tab_button_group_on_event &rArr; hscrollable_on_event &rArr; hscrollable_on_pointer_up &rArr; hscrollable_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>tab_button_group_on_layout_children</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_on_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tab_button_group_on_layout_children &rArr; tab_button_group_on_layout_children_compact &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_non_compact
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children_compact
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[c7f]"></a>tab_button_group_on_layout_children_compact</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, tab_button_group.o(i.tab_button_group_on_layout_children_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tab_button_group_on_layout_children_compact &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_xoffset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_virtual_w
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_always_scrollable
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children
</UL>

<P><STRONG><a name="[c80]"></a>tab_button_group_on_layout_children_non_compact</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, tab_button_group.o(i.tab_button_group_on_layout_children_non_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tab_button_group_on_layout_children_non_compact &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_xoffset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_virtual_w
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_always_scrollable
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_layout_children
</UL>

<P><STRONG><a name="[c81]"></a>tab_button_group_on_paint_active_button</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, tab_button_group.o(i.tab_button_group_on_paint_active_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tab_button_group_on_paint_active_button &rArr; canvas_draw_hline &rArr; canvas_draw_hline_impl &rArr; lcd_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_get_pages
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_end
</UL>

<P><STRONG><a name="[234]"></a>tab_button_group_on_paint_border</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, tab_button_group.o(i.tab_button_group_on_paint_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tab_button_group_on_paint_border &rArr; widget_stroke_border_rect &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[233]"></a>tab_button_group_on_paint_children</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = tab_button_group_on_paint_children &rArr; hscrollable_on_paint_children &rArr; widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>tab_button_group_on_paint_end</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, tab_button_group.o(i.tab_button_group_on_paint_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tab_button_group_on_paint_end &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_on_paint_active_button
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[232]"></a>tab_button_group_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tab_button_group.o(i.tab_button_group_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = tab_button_group_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>tab_button_group_set_prop</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tab_button_group.o(i.tab_button_group_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tab_button_group_set_prop &rArr; hscrollable_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_prop
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_scrollable
<LI><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_set_compact
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_button_group_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_button_group.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>tab_control_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tab_control.o(i.tab_control_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = tab_control_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tab_control.o(.constdata)
</UL>
<P><STRONG><a name="[d12]"></a>tokenizer_skip_non_separator</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tokenizer.o(i.tokenizer_skip_non_separator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tokenizer_skip_non_separator
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
</UL>

<P><STRONG><a name="[d11]"></a>tokenizer_skip_separator</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tokenizer.o(i.tokenizer_skip_separator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tokenizer_skip_separator
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenizer_next
</UL>

<P><STRONG><a name="[d36]"></a>velocity_do_update</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, velocity.o(i.velocity_do_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = velocity_do_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
</UL>

<P><STRONG><a name="[d35]"></a>velocity_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, velocity.o(i.velocity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
</UL>

<P><STRONG><a name="[19d]"></a>widget_apply_tr_text_before_paint</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, widget.o(i.widget_apply_tr_text_before_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = widget_apply_tr_text_before_paint &rArr; widget_get_locale_info &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_str
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
<LI><a href="#[d5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_locale_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(i.widget_set_tr_text)
</UL>
<P><STRONG><a name="[d67]"></a>widget_destroy_async</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, widget.o(i.widget_destroy_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = widget_destroy_async &rArr; idle_add &rArr; idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_do_destroy
</UL>

<P><STRONG><a name="[199]"></a>widget_destroy_in_idle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, widget.o(i.widget_destroy_in_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = widget_destroy_in_idle &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(i.widget_destroy_async)
</UL>
<P><STRONG><a name="[d69]"></a>widget_destroy_sync</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, widget.o(i.widget_destroy_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_destroy
<LI><a href="#[d6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_destroy
<LI><a href="#[d6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_destroy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
<LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_destroy_widget
<LI><a href="#[d61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_destroy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_destroy
<LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_children
</UL>
<BR>[Called By]<UL><LI><a href="#[d66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_do_destroy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_in_idle
</UL>

<P><STRONG><a name="[d6d]"></a>widget_dispatch_blur_event</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, widget.o(i.widget_dispatch_blur_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = widget_dispatch_blur_event &rArr;  widget_set_focused (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
</UL>

<P><STRONG><a name="[d6e]"></a>widget_dispatch_leave_event</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, widget.o(i.widget_dispatch_leave_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = widget_dispatch_leave_event &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
</UL>

<P><STRONG><a name="[d66]"></a>widget_do_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, widget.o(i.widget_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_sync
<LI><a href="#[d67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_async
</UL>
<BR>[Called By]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy_children
</UL>

<P><STRONG><a name="[d6f]"></a>widget_draw_background</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, widget.o(i.widget_draw_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_background
</UL>

<P><STRONG><a name="[d71]"></a>widget_draw_border</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, widget.o(i.widget_draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = widget_draw_border &rArr; widget_stroke_border_rect &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_stroke_border_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_border
</UL>

<P><STRONG><a name="[d73]"></a>widget_ensure_style_mutable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, widget.o(i.widget_ensure_style_mutable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = widget_ensure_style_mutable &rArr; style_mutable_create &rArr; style_const_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_create
</UL>
<BR>[Called By]<UL><LI><a href="#[dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_style
</UL>

<P><STRONG><a name="[d74]"></a>widget_ensure_visible_in_scroll_view</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, widget.o(i.widget_ensure_visible_in_scroll_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = widget_ensure_visible_in_scroll_view &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[d75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_viewport
</UL>

<P><STRONG><a name="[d7e]"></a>widget_get_all_focusable_widgets_in_window</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, widget.o(i.widget_get_all_focusable_widgets_in_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = widget_get_all_focusable_widgets_in_window &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[d7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_focus
</UL>

<P><STRONG><a name="[d7b]"></a>widget_get_first_focusable_widget_in_window</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, widget.o(i.widget_get_first_focusable_widget_in_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = widget_get_first_focusable_widget_in_window &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_first
</UL>

<P><STRONG><a name="[d9b]"></a>widget_is_activate_key</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, widget.o(i.widget_is_activate_key))
<BR><BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d85]"></a>widget_is_focusable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, widget.o(i.widget_is_focusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_state_for_style
<LI><a href="#[d86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_has_focused_widget_in_window
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_visit_focusable
<LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
<LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d8b]"></a>widget_is_move_focus_next_key</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, widget.o(i.widget_is_move_focus_next_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = widget_is_move_focus_next_key &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d8c]"></a>widget_is_move_focus_prev_key</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, widget.o(i.widget_is_move_focus_prev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = widget_is_move_focus_prev_key &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d76]"></a>widget_is_scrollable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, widget.o(i.widget_is_scrollable))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_as_key_target
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ensure_visible_in_viewport
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
</UL>

<P><STRONG><a name="[d92]"></a>widget_lookup_all</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, widget.o(i.widget_lookup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = widget_lookup_all &rArr;  widget_lookup_all (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_all
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[d92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_all
</UL>

<P><STRONG><a name="[d94]"></a>widget_lookup_by_type_all</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, widget.o(i.widget_lookup_by_type_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = widget_lookup_by_type_all &rArr;  widget_lookup_by_type_all (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_all
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
<LI><a href="#[d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type_all
</UL>

<P><STRONG><a name="[d95]"></a>widget_lookup_by_type_child</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, widget.o(i.widget_lookup_by_type_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = widget_lookup_by_type_child
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
</UL>

<P><STRONG><a name="[d93]"></a>widget_lookup_child</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, widget.o(i.widget_lookup_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = widget_lookup_child
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>

<P><STRONG><a name="[d97]"></a>widget_on_keydown_after_children</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, widget.o(i.widget_on_keydown_after_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_keydown_after_children &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d98]"></a>widget_on_keydown_before_children</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, widget.o(i.widget_on_keydown_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_keydown_before_children &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_before_children
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d9a]"></a>widget_on_keydown_children</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, widget.o(i.widget_on_keydown_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = widget_on_keydown_children &rArr;  widget_on_keydown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown
</UL>
<BR>[Called By]<UL><LI><a href="#[d96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_impl
</UL>

<P><STRONG><a name="[d96]"></a>widget_on_keydown_impl</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, widget.o(i.widget_on_keydown_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = widget_on_keydown_impl &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_prev
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_next
<LI><a href="#[d4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_manager
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window
<LI><a href="#[d86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_has_focused_widget_in_window
<LI><a href="#[d7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_focus_first
<LI><a href="#[d9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_children
<LI><a href="#[d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_before_children
<LI><a href="#[d97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown_after_children
<LI><a href="#[d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_prev_key
<LI><a href="#[d8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_move_focus_next_key
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_activate_key
</UL>
<BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keydown
</UL>

<P><STRONG><a name="[d9d]"></a>widget_on_keyup_after_children</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, widget.o(i.widget_on_keyup_after_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_keyup_after_children &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
</UL>

<P><STRONG><a name="[d9e]"></a>widget_on_keyup_before_children</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, widget.o(i.widget_on_keyup_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_keyup_before_children &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_before_children
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
</UL>

<P><STRONG><a name="[d9f]"></a>widget_on_keyup_children</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, widget.o(i.widget_on_keyup_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = widget_on_keyup_children &rArr;  widget_on_keyup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup
</UL>
<BR>[Called By]<UL><LI><a href="#[d9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_impl
</UL>

<P><STRONG><a name="[d9c]"></a>widget_on_keyup_impl</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, widget.o(i.widget_on_keyup_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = widget_on_keyup_impl &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[d9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_children
<LI><a href="#[d9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_before_children
<LI><a href="#[d9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup_after_children
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
<LI><a href="#[d9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_activate_key
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_keyup
</UL>

<P><STRONG><a name="[da4]"></a>widget_on_paint_done</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, widget.o(i.widget_on_paint_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = widget_on_paint_done &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_impl
</UL>

<P><STRONG><a name="[da8]"></a>widget_on_pointer_down_after_children</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_down_after_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_pointer_down_after_children &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_impl
</UL>

<P><STRONG><a name="[da9]"></a>widget_on_pointer_down_before_children</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, widget.o(i.widget_on_pointer_down_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = widget_on_pointer_down_before_children &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_before_children
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_impl
</UL>

<P><STRONG><a name="[daa]"></a>widget_on_pointer_down_children</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, widget.o(i.widget_on_pointer_down_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_on_pointer_down_children &rArr;  widget_on_pointer_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_focused
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down
<LI><a href="#[d8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[da7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_impl
</UL>

<P><STRONG><a name="[da7]"></a>widget_on_pointer_down_impl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_down_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_down_impl &rArr; widget_on_pointer_down_children &rArr;  widget_on_pointer_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[daa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_children
<LI><a href="#[da9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_before_children
<LI><a href="#[da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down_after_children
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_down
</UL>

<P><STRONG><a name="[dac]"></a>widget_on_pointer_move_after_children</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_move_after_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_pointer_move_after_children &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_impl
</UL>

<P><STRONG><a name="[dad]"></a>widget_on_pointer_move_before_children</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, widget.o(i.widget_on_pointer_move_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = widget_on_pointer_move_before_children &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_before_children
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_impl
</UL>

<P><STRONG><a name="[dae]"></a>widget_on_pointer_move_children</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, widget.o(i.widget_on_pointer_move_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_on_pointer_move_children &rArr;  widget_on_pointer_move (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move
<LI><a href="#[d6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_leave_event
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_impl
</UL>

<P><STRONG><a name="[dab]"></a>widget_on_pointer_move_impl</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, widget.o(i.widget_on_pointer_move_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_move_impl &rArr; widget_on_pointer_move_children &rArr;  widget_on_pointer_move (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[dae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_children
<LI><a href="#[dad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_before_children
<LI><a href="#[dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move_after_children
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_move
</UL>

<P><STRONG><a name="[db0]"></a>widget_on_pointer_up_after_children</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, widget.o(i.widget_on_pointer_up_after_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = widget_on_pointer_up_after_children &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_impl
</UL>

<P><STRONG><a name="[db1]"></a>widget_on_pointer_up_before_children</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, widget.o(i.widget_on_pointer_up_before_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = widget_on_pointer_up_before_children &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[d99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_event_before_children
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_impl
</UL>

<P><STRONG><a name="[db2]"></a>widget_on_pointer_up_children</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, widget.o(i.widget_on_pointer_up_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = widget_on_pointer_up_children &rArr;  widget_on_pointer_up (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up
</UL>
<BR>[Called By]<UL><LI><a href="#[daf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_impl
</UL>

<P><STRONG><a name="[daf]"></a>widget_on_pointer_up_impl</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, widget.o(i.widget_on_pointer_up_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = widget_on_pointer_up_impl &rArr; widget_on_pointer_up_children &rArr;  widget_on_pointer_up (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[db2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_children
<LI><a href="#[db1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_before_children
<LI><a href="#[db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up_after_children
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_pointer_up
</UL>

<P><STRONG><a name="[19b]"></a>widget_on_visit_focusable</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, widget.o(i.widget_on_visit_focusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = widget_on_visit_focusable &rArr; widget_find_target &rArr; widget_find_target_default &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[d85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_focusable
</UL>
<BR>[Address Reference Count : 3]<UL><LI> widget.o(i.widget_get_all_focusable_widgets_in_window)
<LI> widget.o(i.widget_get_first_focusable_widget_in_window)
<LI> widget.o(i.widget_on_visit_focusable)
</UL>
<P><STRONG><a name="[db3]"></a>widget_paint_impl</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, widget.o(i.widget_paint_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[da6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_self
<LI><a href="#[da5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_end
<LI><a href="#[da3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children
<LI><a href="#[da2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_border
<LI><a href="#[da1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_begin
<LI><a href="#[da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_background
<LI><a href="#[da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_done
</UL>
<BR>[Called By]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
</UL>

<P><STRONG><a name="[190]"></a>widget_remove_idle_on_destroy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget.o(i.widget_remove_idle_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = widget_remove_idle_on_destroy &rArr; idle_remove &rArr; idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(i.widget_add_idle)
</UL>
<P><STRONG><a name="[191]"></a>widget_remove_timer_on_destroy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget.o(i.widget_remove_timer_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_remove_timer_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(i.widget_add_timer)
</UL>
<P><STRONG><a name="[d89]"></a>widget_set_dirty</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, widget.o(i.widget_set_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = widget_set_dirty &rArr;  widget_set_dirty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[d89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_dirty
</UL>

<P><STRONG><a name="[dbe]"></a>widget_set_visible_recursive</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, widget.o(i.widget_set_visible_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = widget_set_visible_recursive &rArr;  widget_set_visible_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[dbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_recursive
</UL>

<P><STRONG><a name="[dbf]"></a>widget_set_visible_self</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, widget.o(i.widget_set_visible_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = widget_set_visible_self &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_update_style
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
</UL>

<P><STRONG><a name="[192]"></a>widget_animator_on_widget_destroy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, widget_animator.o(i.widget_animator_on_widget_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = widget_animator_on_widget_destroy &rArr; widget_animator_destroy &rArr; widget_off &rArr; emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator.o(i.widget_animator_init)
</UL>
<P><STRONG><a name="[d5d]"></a>widget_animator_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, widget_animator.o(i.widget_animator_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_animator_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_time_elapse
</UL>

<P><STRONG><a name="[19a]"></a>creator_item_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_factory.o(i.creator_item_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = creator_item_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_factory.o(i.widget_factory_init)
</UL>
<P><STRONG><a name="[d79]"></a>widget_factory_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, widget_factory.o(i.widget_factory_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = widget_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_destroy
</UL>

<P><STRONG><a name="[d78]"></a>widget_factory_find_builtin_creator</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, widget_factory.o(i.widget_factory_find_builtin_creator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = widget_factory_find_builtin_creator
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create_widget
</UL>

<P><STRONG><a name="[d77]"></a>widget_factory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, widget_factory.o(i.widget_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = widget_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create
</UL>

<P><STRONG><a name="[250]"></a>window_get_prop</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, window.o(i.window_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = window_get_prop &rArr; window_base_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_get_prop
<LI><a href="#[de2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>window_set_prop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, window.o(i.window_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = window_set_prop &rArr; window_set_fullscreen &rArr; window_manager_layout_children &rArr; window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_set_prop
<LI><a href="#[e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_set_fullscreen
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata)
</UL>
<P><STRONG><a name="[dc3]"></a>window_animator_begin_frame_normal</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, window_animator.o(i.window_animator_begin_frame_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = window_animator_begin_frame_normal &rArr; window_animator_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_paint_system_bar
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame
</UL>

<P><STRONG><a name="[dc2]"></a>window_animator_begin_frame_overlap</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, window_animator.o(i.window_animator_begin_frame_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = window_animator_begin_frame_overlap &rArr; window_animator_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[dc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_is_dynamic
<LI><a href="#[dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_paint_system_bar
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame
</UL>

<P><STRONG><a name="[dc8]"></a>window_animator_close_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_close_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = window_animator_close_destroy &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
<LI><a href="#[dc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_open_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_destroy
</UL>

<P><STRONG><a name="[ddc]"></a>window_animator_draw_curr_window</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_draw_curr_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = window_animator_draw_curr_window
</UL>
<BR>[Called By]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update
</UL>

<P><STRONG><a name="[dd0]"></a>window_animator_draw_prev_window</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, window_animator.o(i.window_animator_draw_prev_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = window_animator_draw_prev_window &rArr; dialog_highlighter_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[dd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update
</UL>

<P><STRONG><a name="[dd6]"></a>window_animator_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, window_animator.o(i.window_animator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = window_animator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
</UL>

<P><STRONG><a name="[dc1]"></a>window_animator_is_overlap</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, window_animator.o(i.window_animator_is_overlap))
<BR><BR>[Called By]<UL><LI><a href="#[dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_prepare
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame
</UL>

<P><STRONG><a name="[dc9]"></a>window_animator_open_destroy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_open_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = window_animator_open_destroy &rArr; bitmap_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_destroy
<LI><a href="#[dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_close_destroy
</UL>

<P><STRONG><a name="[dc4]"></a>window_animator_paint_system_bar</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, window_animator.o(i.window_animator_paint_system_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = window_animator_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[dc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_overlap
<LI><a href="#[dc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame_normal
</UL>

<P><STRONG><a name="[ddb]"></a>window_animator_update_percent</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_update_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = window_animator_update_percent &rArr; window_animator_update_percent_default
</UL>
<BR>[Calls]<UL><LI><a href="#[ddd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update_percent_default
</UL>
<BR>[Called By]<UL><LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update
</UL>

<P><STRONG><a name="[ddd]"></a>window_animator_update_percent_default</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, window_animator.o(i.window_animator_update_percent_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = window_animator_update_percent_default
</UL>
<BR>[Called By]<UL><LI><a href="#[ddb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update_percent
</UL>

<P><STRONG><a name="[940]"></a>is_dialog</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, window_manager.o(i.is_dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_dialog
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_target
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
</UL>

<P><STRONG><a name="[943]"></a>is_normal_window</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, window_manager.o(i.is_normal_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_normal_window
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_paint_children
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_top_main_window
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
<LI><a href="#[de7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_prev_window
</UL>

<P><STRONG><a name="[944]"></a>is_popup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, window_manager.o(i.is_popup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_popup
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_target
</UL>

<P><STRONG><a name="[945]"></a>is_system_bar</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, window_manager.o(i.is_system_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_system_bar
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
</UL>

<P><STRONG><a name="[de8]"></a>is_window</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, window_manager.o(i.is_window))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
</UL>

<P><STRONG><a name="[946]"></a>is_window_fullscreen</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, window_manager.o(i.is_window_fullscreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = is_window_fullscreen &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_on_paint_children
<LI><a href="#[df2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_child
</UL>

<P><STRONG><a name="[947]"></a>is_window_opened</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, window_manager.o(i.is_window_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
</UL>

<P><STRONG><a name="[1aa]"></a>on_idle_invalidate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_manager.o(i.on_idle_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_idle_invalidate &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_check_if_need_open_animation)
</UL>
<P><STRONG><a name="[de3]"></a>window_manager_calc_dirty_rect</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, window_manager.o(i.window_manager_calc_dirty_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = window_manager_calc_dirty_rect &rArr; rect_fix
</UL>
<BR>[Calls]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_fix
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
</UL>

<P><STRONG><a name="[de4]"></a>window_manager_check_if_need_close_animation</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_check_if_need_close_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
</UL>

<P><STRONG><a name="[1ac]"></a>window_manager_check_if_need_open_animation</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_check_if_need_open_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = window_manager_check_if_need_open_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_timer
<LI><a href="#[de7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_prev_window
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_do_open_window)
</UL>
<P><STRONG><a name="[de5]"></a>window_manager_create_animator</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, window_manager.o(i.window_manager_create_animator))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_open
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_close
<LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_dialog_highlighter
<LI><a href="#[de7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_find_prev_window
<LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_open_animation
<LI><a href="#[de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_close_animation
</UL>

<P><STRONG><a name="[deb]"></a>window_manager_create_dialog_highlighter</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, window_manager.o(i.window_manager_create_dialog_highlighter))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = window_manager_create_dialog_highlighter &rArr; dialog_highlighter_factory_create_highlighter &rArr; func_call_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create_highlighter
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_dialog_highlighter
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog
</UL>
<BR>[Called By]<UL><LI><a href="#[dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_prepare_dialog_highlighter
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>

<P><STRONG><a name="[def]"></a>window_manager_dispatch_top_window_changed</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, window_manager.o(i.window_manager_dispatch_top_window_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = window_manager_dispatch_top_window_changed &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_top_main_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_on_destroy_child
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
</UL>

<P><STRONG><a name="[de6]"></a>window_manager_dispatch_window_event</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, window_manager.o(i.window_manager_dispatch_window_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = window_manager_dispatch_window_event &rArr; window_manager_dispatch_top_window_changed &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_top_window_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
<LI><a href="#[df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_open
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_open_animation
</UL>

<P><STRONG><a name="[df0]"></a>window_manager_dispatch_window_open</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, window_manager.o(i.window_manager_dispatch_window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = window_manager_dispatch_window_open &rArr; window_manager_dispatch_window_event &rArr; window_manager_dispatch_top_window_changed &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_idle_dispatch_window_open
</UL>

<P><STRONG><a name="[df1]"></a>window_manager_do_open_window</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_do_open_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = window_manager_do_open_window &rArr; widget_add_idle &rArr; idle_add &rArr; idle_manager_add &rArr; idle_info_create &rArr; idle_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_add_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[de7]"></a>window_manager_find_prev_window</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_find_prev_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = window_manager_find_prev_window &rArr; is_normal_window
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_normal_window
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_check_if_need_open_animation
</UL>

<P><STRONG><a name="[252]"></a>window_manager_get_prop</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = window_manager_get_prop &rArr; value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>window_manager_idle_destroy_window</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_idle_destroy_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = window_manager_idle_destroy_window &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_close_window)
</UL>
<P><STRONG><a name="[1ad]"></a>window_manager_idle_dispatch_window_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, window_manager.o(i.window_manager_idle_dispatch_window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = window_manager_idle_dispatch_window_open &rArr; window_manager_dispatch_window_open &rArr; window_manager_dispatch_window_event &rArr; window_manager_dispatch_top_window_changed &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_do_open_window)
</UL>
<P><STRONG><a name="[df8]"></a>window_manager_inc_fps</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, window_manager.o(i.window_manager_inc_fps))
<BR><BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
<LI><a href="#[df6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_animation
</UL>

<P><STRONG><a name="[255]"></a>window_manager_invalidate</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = window_manager_invalidate &rArr; rect_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[dee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_update_cursor
<LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[df2]"></a>window_manager_layout_child</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, window_manager.o(i.window_manager_layout_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = window_manager_layout_child &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_window_fullscreen
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_system_bar
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_normal_window
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dialog
</UL>
<BR>[Called By]<UL><LI><a href="#[ddf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_open_window
<LI><a href="#[df3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_layout_children
</UL>

<P><STRONG><a name="[258]"></a>window_manager_on_destroy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, window_manager.o(i.window_manager_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = window_manager_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[df6]"></a>window_manager_paint_animation</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, window_manager.o(i.window_manager_paint_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = window_manager_paint_animation &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_event_init
<LI><a href="#[df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_inc_fps
<LI><a href="#[df1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_do_open_window
<LI><a href="#[de6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_window_event
<LI><a href="#[dda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_update
<LI><a href="#[dd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_end_frame
<LI><a href="#[dcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_destroy
<LI><a href="#[dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_begin_frame
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint
</UL>

<P><STRONG><a name="[df9]"></a>window_manager_paint_cursor</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, window_manager.o(i.window_manager_paint_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = window_manager_paint_cursor &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_get_bitmap
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[df7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_normal
</UL>

<P><STRONG><a name="[df7]"></a>window_manager_paint_normal</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, window_manager.o(i.window_manager_paint_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = window_manager_paint_normal &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_end_frame
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_begin_frame
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[df9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_cursor
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_invalidate
<LI><a href="#[df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_inc_fps
<LI><a href="#[de3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_calc_dirty_rect
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint
</UL>

<P><STRONG><a name="[dec]"></a>window_manager_prepare_dialog_highlighter</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, window_manager.o(i.window_manager_prepare_dialog_highlighter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[deb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_dialog_highlighter
<LI><a href="#[dd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_snap_prev_window
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_create_animator
</UL>

<P><STRONG><a name="[253]"></a>window_manager_set_prop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = window_manager_set_prop &rArr; window_manager_set_cursor &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[dfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_cursor
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ded]"></a>window_manager_start_or_reset_screen_saver_timer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, window_manager.o(i.window_manager_start_or_reset_screen_saver_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = window_manager_start_or_reset_screen_saver_timer &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[cda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_modify
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_input_event
</UL>

<P><STRONG><a name="[dee]"></a>window_manager_update_cursor</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, window_manager.o(i.window_manager_update_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = window_manager_update_cursor &rArr; window_manager_invalidate &rArr; rect_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_input_event
</UL>

<P><STRONG><a name="[df5]"></a>window_manager_update_fps</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, window_manager.o(i.window_manager_update_fps))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = window_manager_update_fps &rArr; time_now_ms &rArr; get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[dfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fps
</UL>
<BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint
</UL>

<P><STRONG><a name="[1af]"></a>wm_on_destroy_child</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, window_manager.o(i.wm_on_destroy_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wm_on_destroy_child &rArr; window_manager_dispatch_top_window_changed &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[def]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_top_window_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_open_window)
</UL>
<P><STRONG><a name="[1ae]"></a>wm_on_locale_changed</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, window_manager.o(i.wm_on_locale_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = wm_on_locale_changed &rArr; widget_re_translate_text &rArr;  widget_re_translate_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[db9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_re_translate_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_init)
</UL>
<P><STRONG><a name="[256]"></a>wm_on_remove_child</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, window_manager.o(i.wm_on_remove_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wm_on_remove_child &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_top_main_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>wm_on_screen_saver_timer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window_manager.o(i.wm_on_screen_saver_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wm_on_screen_saver_timer &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_manager.o(i.window_manager_start_or_reset_screen_saver_timer)
</UL>
<P><STRONG><a name="[7e0]"></a>double_fraction_nr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wstr.o(i.double_fraction_nr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = double_fraction_nr &rArr; __hardfp_floor
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
</UL>

<P><STRONG><a name="[e04]"></a>wstr_extend</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wstr.o(i.wstr_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_init
<LI><a href="#[e06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_push
<LI><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_insert
<LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_append_with_len
</UL>

<P><STRONG><a name="[e02]"></a>wstr_fraction_nr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wstr.o(i.wstr_fraction_nr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wstr_fraction_nr &rArr; wcslen &rArr; wcs_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcschr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_add_float
</UL>

<P><STRONG><a name="[108]"></a>input_method_default_on_keyboard_open</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, input_method_creator.o(i.input_method_default_on_keyboard_open))
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_type_open_keyboard)
</UL>
<P><STRONG><a name="[105]"></a>input_method_default_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, input_method_creator.o(i.input_method_default_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = input_method_default_request &rArr; input_method_default_show_keyboard &rArr; keyboard_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_reset_input
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_close
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_method_default_create)
</UL>
<P><STRONG><a name="[937]"></a>input_method_default_restore_win_position</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, input_method_creator.o(i.input_method_default_restore_win_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = input_method_default_restore_win_position &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle_close_keyboard
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_on_win_close
</UL>

<P><STRONG><a name="[935]"></a>input_method_default_show_keyboard</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, input_method_creator.o(i.input_method_default_show_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = input_method_default_show_keyboard &rArr; keyboard_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_close
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_request
</UL>

<P><STRONG><a name="[10a]"></a>input_method_on_win_close</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, input_method_creator.o(i.input_method_on_win_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = input_method_on_win_close &rArr; window_manager_close_window_force &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_restore_win_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_type_open_keyboard)
</UL>
<P><STRONG><a name="[938]"></a>input_type_open_keyboard</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, input_method_creator.o(i.input_type_open_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = input_type_open_keyboard &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_to_keyboard_name
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_show_keyboard
</UL>

<P><STRONG><a name="[93f]"></a>input_type_to_keyboard_name</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, input_method_creator.o(i.input_type_to_keyboard_name))
<BR><BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_type_open_keyboard
</UL>

<P><STRONG><a name="[107]"></a>on_idle_close_keyboard</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, input_method_creator.o(i.on_idle_close_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = on_idle_close_keyboard &rArr; keyboard_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_close
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_default_restore_win_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_method_default_request)
</UL>
<P><STRONG><a name="[109]"></a>on_push_window</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, input_method_creator.o(i.on_push_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_push_window &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_method_creator.o(i.input_type_open_keyboard)
</UL>
<P><STRONG><a name="[259]"></a>image_loader_stb_load</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, image_loader_stb.o(i.image_loader_stb_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 35696 + Unknown Stack Size
<LI>Call Chain = image_loader_stb_load &rArr; stb_load_image &rArr; stbi_load_from_memory &rArr; stbi__load_and_postprocess_8bit &rArr; stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_load_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(.constdata)
</UL>
<P><STRONG><a name="[989]"></a>load_jpeg_image</STRONG> (Thumb, 1380 bytes, Stack size 216 bytes, image_loader_stb.o(i.load_jpeg_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = load_jpeg_image &rArr; stbi__decode_jpeg_image &rArr; stbi__parse_entropy_coded_data &rArr; stbi__jpeg_decode_block &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_y
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__cleanup_jpeg
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__blinn_8x8
</UL>
<BR>[Called By]<UL><LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_load
</UL>

<P><STRONG><a name="[126]"></a>resample_row_1</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, image_loader_stb.o(i.resample_row_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = resample_row_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.load_jpeg_image)
</UL>
<P><STRONG><a name="[15f]"></a>stbi__YCbCr_to_RGB_row</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, image_loader_stb.o(i.stbi__YCbCr_to_RGB_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = stbi__YCbCr_to_RGB_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.stbi__setup_jpeg)
</UL>
<P><STRONG><a name="[bf3]"></a>stbi__addsizes_valid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__addsizes_valid))
<BR><BR>[Called By]<UL><LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad4sizes_valid
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad2sizes_valid
</UL>

<P><STRONG><a name="[bb5]"></a>stbi__at_eof</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__at_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__readval
<LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_skip_whitespace
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_getinteger
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_gettoken
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
</UL>

<P><STRONG><a name="[b92]"></a>stbi__bit_reverse</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__bit_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bitreverse16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode_slowpath
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zbuild_huffman
</UL>

<P><STRONG><a name="[b9a]"></a>stbi__bitcount</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__bitcount))
<BR><BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[b93]"></a>stbi__bitreverse16</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__bitreverse16))
<BR><BR>[Called By]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bit_reverse
</UL>

<P><STRONG><a name="[98f]"></a>stbi__blinn_8x8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__blinn_8x8))
<BR><BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[b94]"></a>stbi__bmp_load</STRONG> (Thumb, 1646 bytes, Stack size 1184 bytes, image_loader_stb.o(i.stbi__bmp_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = stbi__bmp_load &rArr; stbi__convert_format &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__shiftsigned
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__high_bit
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32le
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_parse_header
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bitcount
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[b95]"></a>stbi__bmp_parse_header</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__bmp_parse_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__bmp_parse_header &rArr; stbi__get32le &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32le
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[b9f]"></a>stbi__bmp_test</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__bmp_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stbi__bmp_test &rArr; stbi__bmp_test_raw &rArr; stbi__get32le &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[ba0]"></a>stbi__bmp_test_raw</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__bmp_test_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__bmp_test_raw &rArr; stbi__get32le &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32le
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test
</UL>

<P><STRONG><a name="[c05]"></a>stbi__build_fast_ac</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__build_fast_ac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbi__build_fast_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
</UL>

<P><STRONG><a name="[ba2]"></a>stbi__build_huffman</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__build_huffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = stbi__build_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
</UL>

<P><STRONG><a name="[ba3]"></a>stbi__check_png_header</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__check_png_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__check_png_header &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__png_test
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[bd8]"></a>stbi__clamp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__clamp))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__idct_block
</UL>

<P><STRONG><a name="[98c]"></a>stbi__cleanup_jpeg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__cleanup_jpeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__cleanup_jpeg &rArr; stbi__free_jpeg_components &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__free_jpeg_components
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[ba5]"></a>stbi__compute_huffman_codes</STRONG> (Thumb, 332 bytes, Stack size 2536 bytes, image_loader_stb.o(i.stbi__compute_huffman_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792 + Unknown Stack Size
<LI>Call Chain = stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zreceive
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zbuild_huffman
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
</UL>

<P><STRONG><a name="[ba9]"></a>stbi__compute_transparency</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__compute_transparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbi__compute_transparency &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[baa]"></a>stbi__compute_transparency16</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__compute_transparency16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbi__compute_transparency16 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[990]"></a>stbi__compute_y</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__compute_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stbi__compute_y
</UL>
<BR>[Called By]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[bad]"></a>stbi__compute_y_16</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__compute_y_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stbi__compute_y_16
</UL>
<BR>[Called By]<UL><LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
</UL>

<P><STRONG><a name="[bab]"></a>stbi__convert_16_to_8</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__convert_16_to_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__convert_16_to_8 &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_and_postprocess_8bit
</UL>

<P><STRONG><a name="[b9e]"></a>stbi__convert_format</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__convert_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = stbi__convert_format &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_y
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[bac]"></a>stbi__convert_format16</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__convert_format16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = stbi__convert_format16 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_y_16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
</UL>

<P><STRONG><a name="[bfe]"></a>stbi__copyval</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, image_loader_stb.o(i.stbi__copyval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stbi__copyval
</UL>
<BR>[Called By]<UL><LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
</UL>

<P><STRONG><a name="[bae]"></a>stbi__create_png_image</STRONG> (Thumb, 420 bytes, Stack size 192 bytes, image_loader_stb.o(i.stbi__create_png_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = stbi__create_png_image &rArr; stbi__create_png_image_raw &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[baf]"></a>stbi__create_png_image_raw</STRONG> (Thumb, 2220 bytes, Stack size 88 bytes, image_loader_stb.o(i.stbi__create_png_image_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stbi__create_png_image_raw &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__paeth
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
</UL>

<P><STRONG><a name="[bb1]"></a>stbi__de_iphone</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__de_iphone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbi__de_iphone &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[bb2]"></a>stbi__decode_jpeg_header</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__decode_jpeg_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stbi__decode_jpeg_header &rArr; stbi__process_marker &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get_marker
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
</UL>

<P><STRONG><a name="[98b]"></a>stbi__decode_jpeg_image</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__decode_jpeg_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = stbi__decode_jpeg_image &rArr; stbi__parse_entropy_coded_data &rArr; stbi__jpeg_decode_block &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_scan_header
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_finish
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get_marker
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[bbb]"></a>stbi__do_png</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__do_png))
<BR><BR>[Stack]<UL><LI>Max Depth = 8120 + Unknown Stack Size
<LI>Call Chain = stbi__do_png &rArr; stbi__parse_png_file &rArr; stbi_zlib_decode_malloc_guesssize_headerflag &rArr; stbi__do_zlib &rArr; stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
</UL>
<BR>[Called By]<UL><LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__png_load
</UL>

<P><STRONG><a name="[bbd]"></a>stbi__do_zlib</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__do_zlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = stbi__do_zlib &rArr; stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
</UL>
<BR>[Called By]<UL><LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_zlib_decode_malloc_guesssize_headerflag
</UL>

<P><STRONG><a name="[98a]"></a>stbi__err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__err))
<BR><BR>[Called By]<UL><LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zexpand
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zbuild_huffman
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__readval
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_scan_header
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_gif_raster
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib_header
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_huffman_block
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_to_ldr
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_header
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__expand_png_palette
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_16_to_8
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__check_png_header
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__build_huffman
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_parse_header
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[bbf]"></a>stbi__expand_png_palette</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__expand_png_palette))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stbi__expand_png_palette &rArr; stbi__malloc_mad2 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[bc1]"></a>stbi__extend_receive</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__extend_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbi__extend_receive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
</UL>

<P><STRONG><a name="[bc3]"></a>stbi__fill_bits</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__fill_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = stbi__fill_bits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zget8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zreceive
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode
</UL>

<P><STRONG><a name="[ba4]"></a>stbi__free_jpeg_components</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__free_jpeg_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__free_jpeg_components &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__cleanup_jpeg
</UL>

<P><STRONG><a name="[bb9]"></a>stbi__get16be</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__get16be))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_scan_header
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
</UL>

<P><STRONG><a name="[b9b]"></a>stbi__get16le</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__get16le))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_test
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_read_rgb16
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_header
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32le
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test_raw
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_parse_header
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[bc5]"></a>stbi__get32be</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__get32be))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__get32be &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
</UL>
<BR>[Called By]<UL><LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_test
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get_chunk_header
</UL>

<P><STRONG><a name="[b9c]"></a>stbi__get32le</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__get32le))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__get32le &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
</UL>
<BR>[Called By]<UL><LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test_raw
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_parse_header
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[b97]"></a>stbi__get8</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__get8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__refill_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_test
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__readval
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_decode_rle
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_scan_header
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_gif_raster
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_test
<LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_skip_whitespace
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_getinteger
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test_core
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_is4
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test_core
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_gettoken
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test_raw
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_parse_colortable
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_header
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get_marker
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__check_png_header
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test_raw
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_parse_header
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[bc7]"></a>stbi__get_chunk_header</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__get_chunk_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__get_chunk_header &rArr; stbi__get32be &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
</UL>

<P><STRONG><a name="[bb3]"></a>stbi__get_marker</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__get_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__get_marker &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
</UL>

<P><STRONG><a name="[bc8]"></a>stbi__getn</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbi__getn
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[bc9]"></a>stbi__gif_header</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__gif_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__gif_header &rArr; stbi__gif_parse_colortable &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_parse_colortable
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
</UL>

<P><STRONG><a name="[bcb]"></a>stbi__gif_load</STRONG> (Thumb, 130 bytes, Stack size 35104 bytes, image_loader_stb.o(i.stbi__gif_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 35264 + Unknown Stack Size
<LI>Call Chain = stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bcc]"></a>stbi__gif_load_next</STRONG> (Thumb, 934 bytes, Stack size 64 bytes, image_loader_stb.o(i.stbi__gif_load_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_gif_raster
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_parse_colortable
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_header
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load
</UL>

<P><STRONG><a name="[bca]"></a>stbi__gif_parse_colortable</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__gif_parse_colortable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stbi__gif_parse_colortable &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_header
</UL>

<P><STRONG><a name="[bce]"></a>stbi__gif_test</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__gif_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__gif_test &rArr; stbi__gif_test_raw &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
</UL>

<P><STRONG><a name="[bcf]"></a>stbi__gif_test_raw</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__gif_test_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__gif_test_raw &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test
</UL>

<P><STRONG><a name="[bc2]"></a>stbi__grow_buffer_unsafe</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__grow_buffer_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__grow_buffer_unsafe &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_huff_decode
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_get_bits
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_get_bit
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__extend_receive
</UL>

<P><STRONG><a name="[bd0]"></a>stbi__hdr_convert</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__hdr_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__hdr_convert &rArr; __hardfp_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[bd1]"></a>stbi__hdr_gettoken</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__hdr_gettoken))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stbi__hdr_gettoken &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[bd2]"></a>stbi__hdr_load</STRONG> (Thumb, 928 bytes, Stack size 1120 bytes, image_loader_stb.o(i.stbi__hdr_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = stbi__hdr_load &rArr; stbi__malloc_mad4 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad4
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad4sizes_valid
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_gettoken
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_convert
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__getn
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bd5]"></a>stbi__hdr_test</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__hdr_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__hdr_test &rArr; stbi__hdr_test_core &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test_core
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bd6]"></a>stbi__hdr_test_core</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__hdr_test_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__hdr_test_core &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test
</UL>

<P><STRONG><a name="[bd7]"></a>stbi__hdr_to_ldr</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, image_loader_stb.o(i.stbi__hdr_to_ldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = stbi__hdr_to_ldr &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[b99]"></a>stbi__high_bit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__high_bit))
<BR><BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[15e]"></a>stbi__idct_block</STRONG> (Thumb, 920 bytes, Stack size 344 bytes, image_loader_stb.o(i.stbi__idct_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = stbi__idct_block
</UL>
<BR>[Calls]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__clamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.stbi__setup_jpeg)
</UL>
<P><STRONG><a name="[bd9]"></a>stbi__jpeg_decode_block</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, image_loader_stb.o(i.stbi__jpeg_decode_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_decode_block &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_huff_decode
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__extend_receive
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
</UL>

<P><STRONG><a name="[bdb]"></a>stbi__jpeg_decode_block_prog_ac</STRONG> (Thumb, 672 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__jpeg_decode_block_prog_ac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_decode_block_prog_ac &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_huff_decode
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_get_bits
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_get_bit
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__extend_receive
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
</UL>

<P><STRONG><a name="[bde]"></a>stbi__jpeg_decode_block_prog_dc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__jpeg_decode_block_prog_dc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_decode_block_prog_dc &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_huff_decode
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_get_bit
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__extend_receive
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
</UL>

<P><STRONG><a name="[bdf]"></a>stbi__jpeg_dequantize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__jpeg_dequantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stbi__jpeg_dequantize
</UL>
<BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_finish
</UL>

<P><STRONG><a name="[bba]"></a>stbi__jpeg_finish</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__jpeg_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stbi__jpeg_finish &rArr; stbi__jpeg_dequantize
</UL>
<BR>[Calls]<UL><LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_dequantize
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
</UL>

<P><STRONG><a name="[bdd]"></a>stbi__jpeg_get_bit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__jpeg_get_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__jpeg_get_bit &rArr; stbi__grow_buffer_unsafe &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
</UL>

<P><STRONG><a name="[bdc]"></a>stbi__jpeg_get_bits</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__jpeg_get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__jpeg_get_bits &rArr; stbi__grow_buffer_unsafe &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
</UL>

<P><STRONG><a name="[bda]"></a>stbi__jpeg_huff_decode</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__jpeg_huff_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
</UL>

<P><STRONG><a name="[be0]"></a>stbi__jpeg_load</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__jpeg_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_load &rArr; load_jpeg_image &rArr; stbi__decode_jpeg_image &rArr; stbi__parse_entropy_coded_data &rArr; stbi__jpeg_decode_block &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__setup_jpeg
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bf5]"></a>stbi__jpeg_reset</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__jpeg_reset))
<BR><BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_entropy_coded_data
</UL>

<P><STRONG><a name="[be2]"></a>stbi__jpeg_test</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__jpeg_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stbi__jpeg_test &rArr; stbi__decode_jpeg_header &rArr; stbi__process_marker &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__setup_jpeg
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[be3]"></a>stbi__load_and_postprocess_8bit</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__load_and_postprocess_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 35368 + Unknown Stack Size
<LI>Call Chain = stbi__load_and_postprocess_8bit &rArr; stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__vertical_flip
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_16_to_8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_from_memory
</UL>

<P><STRONG><a name="[be6]"></a>stbi__load_gif_main</STRONG> (Thumb, 360 bytes, Stack size 35128 bytes, image_loader_stb.o(i.stbi__load_gif_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 35288 + Unknown Stack Size
<LI>Call Chain = stbi__load_gif_main &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_gif_from_memory
</UL>

<P><STRONG><a name="[be4]"></a>stbi__load_main</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, image_loader_stb.o(i.stbi__load_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 35312 + Unknown Stack Size
<LI>Call Chain = stbi__load_main &rArr; stbi__gif_load &rArr; stbi__gif_load_next &rArr; stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_test
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_test
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_test
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__png_test
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__png_load
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_load
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_to_ldr
<LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>
<BR>[Called By]<UL><LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_and_postprocess_8bit
</UL>

<P><STRONG><a name="[bf1]"></a>stbi__mad2sizes_valid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__mad2sizes_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbi__mad2sizes_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mul2sizes_valid
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__addsizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
</UL>

<P><STRONG><a name="[b96]"></a>stbi__mad3sizes_valid</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__mad3sizes_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbi__mad3sizes_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mul2sizes_valid
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__addsizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[bd3]"></a>stbi__mad4sizes_valid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__mad4sizes_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbi__mad4sizes_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mul2sizes_valid
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__addsizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad4
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[98d]"></a>stbi__malloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_zlib_decode_malloc_guesssize_headerflag
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad4
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_gif_main
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_load
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_16_to_8
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[bc0]"></a>stbi__malloc_mad2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__malloc_mad2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbi__malloc_mad2 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad2sizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__expand_png_palette
</UL>

<P><STRONG><a name="[98e]"></a>stbi__malloc_mad3</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__malloc_mad3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_frame_header
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_to_ldr
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_jpeg_image
</UL>

<P><STRONG><a name="[bd4]"></a>stbi__malloc_mad4</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__malloc_mad4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__malloc_mad4 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad4sizes_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_load
</UL>

<P><STRONG><a name="[bf2]"></a>stbi__mul2sizes_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__mul2sizes_valid))
<BR><BR>[Called By]<UL><LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad4sizes_valid
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad2sizes_valid
</UL>

<P><STRONG><a name="[bf4]"></a>stbi__out_gif_code</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__out_gif_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__out_gif_code
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_gif_raster
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__out_gif_code
</UL>

<P><STRONG><a name="[bb0]"></a>stbi__paeth</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, image_loader_stb.o(i.stbi__paeth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stbi__paeth
</UL>
<BR>[Called By]<UL><LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image_raw
</UL>

<P><STRONG><a name="[bb8]"></a>stbi__parse_entropy_coded_data</STRONG> (Thumb, 1456 bytes, Stack size 184 bytes, image_loader_stb.o(i.stbi__parse_entropy_coded_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = stbi__parse_entropy_coded_data &rArr; stbi__jpeg_decode_block &rArr; stbi__jpeg_huff_decode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_reset
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_dc
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block_prog_ac
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_decode_block
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__grow_buffer_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
</UL>

<P><STRONG><a name="[bf6]"></a>stbi__parse_huffman_block</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__parse_huffman_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stbi__parse_huffman_block &rArr; stbi__zhuffman_decode &rArr; stbi__zhuffman_decode_slowpath &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zreceive
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zexpand
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
</UL>

<P><STRONG><a name="[bbc]"></a>stbi__parse_png_file</STRONG> (Thumb, 1742 bytes, Stack size 1136 bytes, image_loader_stb.o(i.stbi__parse_png_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8080 + Unknown Stack Size
<LI>Call Chain = stbi__parse_png_file &rArr; stbi_zlib_decode_malloc_guesssize_headerflag &rArr; stbi__do_zlib &rArr; stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_zlib_decode_malloc_guesssize_headerflag
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__getn
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get_chunk_header
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__expand_png_palette
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__de_iphone
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__create_png_image
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_transparency16
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_transparency
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__check_png_header
</UL>
<BR>[Called By]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
</UL>

<P><STRONG><a name="[bf9]"></a>stbi__parse_uncompressed_block</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__parse_uncompressed_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = stbi__parse_uncompressed_block &rArr; stbi__zexpand &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zreceive
<LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zget8
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zexpand
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
</UL>

<P><STRONG><a name="[bbe]"></a>stbi__parse_zlib</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__parse_zlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 2816 + Unknown Stack Size
<LI>Call Chain = stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zreceive
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zbuild_huffman
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib_header
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_huffman_block
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_zlib
</UL>

<P><STRONG><a name="[bfa]"></a>stbi__parse_zlib_header</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__parse_zlib_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbi__parse_zlib_header
</UL>
<BR>[Calls]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zget8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
</UL>

<P><STRONG><a name="[bfb]"></a>stbi__pic_is4</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pic_is4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__pic_is4 &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test_core
</UL>

<P><STRONG><a name="[bec]"></a>stbi__pic_load</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, image_loader_stb.o(i.stbi__pic_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = stbi__pic_load &rArr; stbi__pic_load_core &rArr; stbi__readval &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bfc]"></a>stbi__pic_load_core</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, image_loader_stb.o(i.stbi__pic_load_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stbi__pic_load_core &rArr; stbi__readval &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__readval
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__copyval
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load
</UL>

<P><STRONG><a name="[beb]"></a>stbi__pic_test</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pic_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__pic_test &rArr; stbi__pic_test_core &rArr; stbi__pic_is4 &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test_core
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bff]"></a>stbi__pic_test_core</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pic_test_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__pic_test_core &rArr; stbi__pic_is4 &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_is4
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test
</UL>

<P><STRONG><a name="[be8]"></a>stbi__png_load</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__png_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 8176 + Unknown Stack Size
<LI>Call Chain = stbi__png_load &rArr; stbi__do_png &rArr; stbi__parse_png_file &rArr; stbi_zlib_decode_malloc_guesssize_headerflag &rArr; stbi__do_zlib &rArr; stbi__parse_zlib &rArr; stbi__compute_huffman_codes &rArr; stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__do_png
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[be7]"></a>stbi__png_test</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__png_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__png_test &rArr; stbi__check_png_header &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__check_png_header
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[c00]"></a>stbi__pnm_getinteger</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pnm_getinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__pnm_getinteger &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_isdigit
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
</UL>

<P><STRONG><a name="[c02]"></a>stbi__pnm_info</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__pnm_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stbi__pnm_info &rArr; stbi__pnm_skip_whitespace &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_skip_whitespace
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_getinteger
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_load
</UL>

<P><STRONG><a name="[c01]"></a>stbi__pnm_isdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__pnm_isdigit))
<BR><BR>[Called By]<UL><LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_getinteger
</UL>

<P><STRONG><a name="[c04]"></a>stbi__pnm_isspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__pnm_isspace))
<BR><BR>[Called By]<UL><LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_skip_whitespace
</UL>

<P><STRONG><a name="[bee]"></a>stbi__pnm_load</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__pnm_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = stbi__pnm_load &rArr; stbi__convert_format &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__getn
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[c03]"></a>stbi__pnm_skip_whitespace</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pnm_skip_whitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__pnm_skip_whitespace &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_isspace
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
</UL>

<P><STRONG><a name="[bed]"></a>stbi__pnm_test</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__pnm_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stbi__pnm_test &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bb6]"></a>stbi__process_frame_header</STRONG> (Thumb, 1396 bytes, Stack size 56 bytes, image_loader_stb.o(i.stbi__process_frame_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stbi__process_frame_header &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__free_jpeg_components
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
</UL>

<P><STRONG><a name="[bcd]"></a>stbi__process_gif_raster</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, image_loader_stb.o(i.stbi__process_gif_raster))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stbi__process_gif_raster &rArr; stbi__out_gif_code &rArr;  stbi__out_gif_code (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__out_gif_code
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
</UL>

<P><STRONG><a name="[bb4]"></a>stbi__process_marker</STRONG> (Thumb, 702 bytes, Stack size 104 bytes, image_loader_stb.o(i.stbi__process_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stbi__process_marker &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__build_huffman
<LI><a href="#[c05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__build_fast_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_header
</UL>

<P><STRONG><a name="[bb7]"></a>stbi__process_scan_header</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__process_scan_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__process_scan_header &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__decode_jpeg_image
</UL>

<P><STRONG><a name="[c06]"></a>stbi__psd_decode_rle</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__psd_decode_rle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stbi__psd_decode_rle &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>
<BR>[Called By]<UL><LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
</UL>

<P><STRONG><a name="[bea]"></a>stbi__psd_load</STRONG> (Thumb, 1276 bytes, Stack size 64 bytes, image_loader_stb.o(i.stbi__psd_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = stbi__psd_load &rArr; stbi__convert_format &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_decode_rle
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16be
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format16
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[be9]"></a>stbi__psd_test</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__psd_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__psd_test &rArr; stbi__get32be &rArr; stbi__get16be &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get32be
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[bfd]"></a>stbi__readval</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__readval))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stbi__readval &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__at_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_load_core
</UL>

<P><STRONG><a name="[bc6]"></a>stbi__refill_buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__refill_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbi__refill_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
</UL>

<P><STRONG><a name="[129]"></a>stbi__resample_row_generic</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, image_loader_stb.o(i.stbi__resample_row_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stbi__resample_row_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.load_jpeg_image)
</UL>
<P><STRONG><a name="[128]"></a>stbi__resample_row_h_2</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__resample_row_h_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbi__resample_row_h_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.load_jpeg_image)
</UL>
<P><STRONG><a name="[160]"></a>stbi__resample_row_hv_2</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, image_loader_stb.o(i.stbi__resample_row_hv_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stbi__resample_row_hv_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.stbi__setup_jpeg)
</UL>
<P><STRONG><a name="[127]"></a>stbi__resample_row_v_2</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, image_loader_stb.o(i.stbi__resample_row_v_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stbi__resample_row_v_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_loader_stb.o(i.load_jpeg_image)
</UL>
<P><STRONG><a name="[ba1]"></a>stbi__rewind</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__rewind))
<BR><BR>[Called By]<UL><LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_test
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_test
<LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_test
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pnm_info
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__png_test
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__pic_test
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test_core
<LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__hdr_test
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_test
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_test
</UL>

<P><STRONG><a name="[be1]"></a>stbi__setup_jpeg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__setup_jpeg))
<BR><BR>[Called By]<UL><LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_test
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__jpeg_load
</UL>

<P><STRONG><a name="[b9d]"></a>stbi__shiftsigned</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__shiftsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = stbi__shiftsigned &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[b98]"></a>stbi__skip</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbi__skip
</UL>
<BR>[Called By]<UL><LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_test
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__psd_load
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_marker
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__process_gif_raster
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_png_file
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__gif_load_next
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bmp_load
</UL>

<P><STRONG><a name="[c0b]"></a>stbi__start_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__start_mem))
<BR><BR>[Called By]<UL><LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_gif_from_memory
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_from_memory
</UL>

<P><STRONG><a name="[c07]"></a>stbi__tga_get_comp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, image_loader_stb.o(i.stbi__tga_get_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stbi__tga_get_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
</UL>

<P><STRONG><a name="[bf0]"></a>stbi__tga_load</STRONG> (Thumb, 928 bytes, Stack size 120 bytes, image_loader_stb.o(i.stbi__tga_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = stbi__tga_load &rArr; stbi__convert_format &rArr; stbi__malloc_mad3 &rArr; stbi__malloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_read_rgb16
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_get_comp
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad3
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__malloc_mad2
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__mad3sizes_valid
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__getn
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__convert_format
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[c08]"></a>stbi__tga_read_rgb16</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__tga_read_rgb16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbi__tga_read_rgb16 &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__tga_load
</UL>

<P><STRONG><a name="[bef]"></a>stbi__tga_test</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__tga_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbi__tga_test &rArr; stbi__get16le &rArr; stbi__get8 &rArr; stbi__refill_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__skip
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__rewind
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get8
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__get16le
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_main
</UL>

<P><STRONG><a name="[be5]"></a>stbi__vertical_flip</STRONG> (Thumb, 130 bytes, Stack size 2104 bytes, image_loader_stb.o(i.stbi__vertical_flip))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = stbi__vertical_flip
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__vertical_flip_slices
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__load_and_postprocess_8bit
</UL>

<P><STRONG><a name="[c09]"></a>stbi__vertical_flip_slices</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, image_loader_stb.o(i.stbi__vertical_flip_slices))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = stbi__vertical_flip_slices &rArr; stbi__vertical_flip
</UL>
<BR>[Calls]<UL><LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__vertical_flip
</UL>
<BR>[Called By]<UL><LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi_load_gif_from_memory
</UL>

<P><STRONG><a name="[ba7]"></a>stbi__zbuild_huffman</STRONG> (Thumb, 346 bytes, Stack size 176 bytes, image_loader_stb.o(i.stbi__zbuild_huffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = stbi__zbuild_huffman &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bit_reverse
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
</UL>

<P><STRONG><a name="[bf7]"></a>stbi__zexpand</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, image_loader_stb.o(i.stbi__zexpand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stbi__zexpand &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__err
</UL>
<BR>[Called By]<UL><LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_huffman_block
</UL>

<P><STRONG><a name="[bc4]"></a>stbi__zget8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, image_loader_stb.o(i.stbi__zget8))
<BR><BR>[Called By]<UL><LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib_header
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__fill_bits
</UL>

<P><STRONG><a name="[ba8]"></a>stbi__zhuffman_decode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__zhuffman_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = stbi__zhuffman_decode &rArr; stbi__zhuffman_decode_slowpath &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode_slowpath
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__fill_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_huffman_block
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
</UL>

<P><STRONG><a name="[c0a]"></a>stbi__zhuffman_decode_slowpath</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, image_loader_stb.o(i.stbi__zhuffman_decode_slowpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = stbi__zhuffman_decode_slowpath &rArr; stbi__bit_reverse &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__bit_reverse
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__zhuffman_decode
</UL>

<P><STRONG><a name="[ba6]"></a>stbi__zreceive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, image_loader_stb.o(i.stbi__zreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbi__zreceive &rArr; stbi__fill_bits &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__fill_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_zlib
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_uncompressed_block
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__parse_huffman_block
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbi__compute_huffman_codes
</UL>

<P><STRONG><a name="[99a]"></a>main_loop_dispatch_events</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, main_loop_simple.o(i.main_loop_dispatch_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + Unknown Stack Size
<LI>Call Chain = main_loop_dispatch_events &rArr; window_manager_dispatch_input_event &rArr; input_device_status_on_input_event &rArr; widget_on_keydown &rArr; widget_on_keydown_impl &rArr; widget_focus_prev &rArr; widget_move_focus &rArr; widget_set_prop_bool &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_dispatch_input_event
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_step
</UL>

<P><STRONG><a name="[9b0]"></a>main_loop_dispatch_input</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_loop_simple.o(i.main_loop_dispatch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_loop_dispatch_input
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_step
</UL>

<P><STRONG><a name="[12f]"></a>main_loop_simple_queue_event</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main_loop_simple.o(i.main_loop_simple_queue_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main_loop_simple_queue_event &rArr; event_queue_send &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_send
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_unlock
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop_simple.o(i.main_loop_simple_init)
</UL>
<P><STRONG><a name="[99c]"></a>main_loop_simple_recv_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main_loop_simple.o(i.main_loop_simple_recv_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main_loop_simple_recv_event &rArr; event_queue_recv &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_queue_recv
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_unlock
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_events
</UL>

<P><STRONG><a name="[12d]"></a>main_loop_simple_run</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_loop_simple.o(i.main_loop_simple_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main_loop_simple_run &rArr; main_loop_sleep &rArr; main_loop_sleep_default &rArr; sleep_ms &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_step
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop_simple.o(i.main_loop_simple_init)
</UL>
<P><STRONG><a name="[12e]"></a>main_loop_simple_step</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_loop_simple.o(i.main_loop_simple_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = main_loop_simple_step &rArr; window_manager_paint &rArr; window_manager_paint_animation &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_dispatch
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_dispatch
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_input
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_dispatch_events
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop_simple.o(i.main_loop_simple_init)
</UL>
<P><STRONG><a name="[18e]"></a>ui_builder_default_on_end</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ui_builder_default.o(i.ui_builder_default_on_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ui_builder_default_on_end &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_builder_default.o(i.ui_builder_default)
</UL>
<P><STRONG><a name="[18d]"></a>ui_builder_default_on_widget_end</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ui_builder_default.o(i.ui_builder_default_on_widget_end))
<BR>[Address Reference Count : 1]<UL><LI> ui_builder_default.o(i.ui_builder_default)
</UL>
<P><STRONG><a name="[18b]"></a>ui_builder_default_on_widget_prop</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ui_builder_default.o(i.ui_builder_default_on_widget_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = ui_builder_default_on_widget_prop &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_builder_default.o(i.ui_builder_default)
</UL>
<P><STRONG><a name="[18c]"></a>ui_builder_default_on_widget_prop_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ui_builder_default.o(i.ui_builder_default_on_widget_prop_end))
<BR>[Address Reference Count : 1]<UL><LI> ui_builder_default.o(i.ui_builder_default)
</UL>
<P><STRONG><a name="[18a]"></a>ui_builder_default_on_widget_start</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, ui_builder_default.o(i.ui_builder_default_on_widget_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ui_builder_default_on_widget_start &rArr; widget_factory_create_widget &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory_create_widget
<LI><a href="#[cef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_factory
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_builder_default.o(i.ui_builder_default)
</UL>
<P><STRONG><a name="[1b2]"></a>on_window_open</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, window_open.o(i.on_window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = on_window_open &rArr; window_manager_close_window_force &rArr; widget_destroy &rArr; widget_do_destroy &rArr; widget_destroy_sync &rArr; widget_pool_destroy_widget &rArr; widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_close_window_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_open.o(i.window_open_with_name)
</UL>
<P><STRONG><a name="[1b1]"></a>ui_on_expr</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window_open.o(i.ui_on_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ui_on_expr &rArr; window_open_with_name &rArr; ui_loader_load_widget &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_with_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_open.o(i.window_open_with_expr)
</UL>
<P><STRONG><a name="[dff]"></a>window_open_with_expr</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, window_open.o(i.window_open_with_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_eval_exprs
</UL>
<BR>[Called By]<UL><LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_and_close
</UL>

<P><STRONG><a name="[d23]"></a>window_open_with_name</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, window_open.o(i.window_open_with_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = window_open_with_name &rArr; ui_loader_load_widget &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_loader_load_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_on_expr
<LI><a href="#[dfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_open_and_close
</UL>

<P><STRONG><a name="[198]"></a>widget_animator_scroll_update</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, widget_animator_scroll.o(i.widget_animator_scroll_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = widget_animator_scroll_update &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_scroll.o(i.widget_animator_scroll_create)
</UL>
<P><STRONG><a name="[c4f]"></a>strtrim</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xml_parser.o(i.strtrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strtrim &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
</UL>

<P><STRONG><a name="[e0e]"></a>xml_parser_on_text</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xml_parser.o(i.xml_parser_on_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xml_parser_on_text &rArr; xml_builder_on_text
</UL>
<BR>[Calls]<UL><LI><a href="#[e0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_text
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_text
</UL>

<P><STRONG><a name="[e18]"></a>xml_parser_parse_attrs</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, xml_parser.o(i.xml_parser_parse_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_to_int
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
</UL>

<P><STRONG><a name="[e16]"></a>xml_parser_parse_comment</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, xml_parser.o(i.xml_parser_parse_comment))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xml_parser_parse_comment &rArr; xml_builder_on_comment
</UL>
<BR>[Calls]<UL><LI><a href="#[e1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_comment
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e17]"></a>xml_parser_parse_doctype</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, xml_parser.o(i.xml_parser_parse_doctype))
<BR><BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e13]"></a>xml_parser_parse_end_tag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xml_parser.o(i.xml_parser_parse_end_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xml_parser_parse_end_tag &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[e1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_end
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e14]"></a>xml_parser_parse_pi</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, xml_parser.o(i.xml_parser_parse_pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xml_parser_parse_pi &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_to_int
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
<LI><a href="#[e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_pi
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e12]"></a>xml_parser_parse_start_tag</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, xml_parser.o(i.xml_parser_parse_start_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xml_parser_parse_start_tag &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_to_int
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
<LI><a href="#[e19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_strdup
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
<LI><a href="#[e1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_start
<LI><a href="#[e1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_builder_on_end
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e15]"></a>xml_parser_parse_text</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, xml_parser.o(i.xml_parser_parse_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xml_parser_parse_text &rArr; str_append_char &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_char
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append_with_len
<LI><a href="#[d0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_start_with
<LI><a href="#[e0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_on_text
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e10]"></a>xml_parser_reset_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xml_parser.o(i.xml_parser_reset_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse
</UL>

<P><STRONG><a name="[e19]"></a>xml_parser_strdup</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, xml_parser.o(i.xml_parser_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_start_tag
<LI><a href="#[e14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_pi
<LI><a href="#[e13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_end_tag
<LI><a href="#[e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parser_parse_attrs
</UL>

<P><STRONG><a name="[189]"></a>awtk_mem_on_out_of_memory</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, awtk_global.o(i.awtk_mem_on_out_of_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = awtk_mem_on_out_of_memory &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_unload_unused
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
</UL>
<BR>[Address Reference Count : 1]<UL><LI> awtk_global.o(i.tk_init_internal)
</UL>
<P><STRONG><a name="[cdd]"></a>tk_add_font</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, awtk_global.o(i.tk_add_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tk_add_font &rArr; font_stb_create &rArr; stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_add_font
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_init_assets
</UL>

<P><STRONG><a name="[96c]"></a>blend_pixel</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.blend_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[110]"></a>lcd_mem_begin_frame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_mem_bgr565.o(i.lcd_mem_begin_frame))
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[964]"></a>lcd_mem_create</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_w
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_type
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_h
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_device_pixel_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create_double_fb
</UL>

<P><STRONG><a name="[963]"></a>lcd_mem_create_double_fb</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_create_double_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_bgr565_create_double_fb
</UL>

<P><STRONG><a name="[11d]"></a>lcd_mem_destroy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd_mem_bgr565.o(i.lcd_mem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_mem_destroy &rArr; vgcanvas_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[116]"></a>lcd_mem_draw_glyph</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_mem_draw_glyph &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[112]"></a>lcd_mem_draw_hline</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = lcd_mem_draw_hline &rArr; lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[114]"></a>lcd_mem_draw_image</STRONG> (Thumb, 250 bytes, Stack size 136 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lcd_mem_draw_image &rArr; image_blend &rArr; soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[115]"></a>lcd_mem_draw_image_matrix</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_image_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_mem_draw_image_matrix &rArr; vgcanvas_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_clip_rect
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_transform
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[117]"></a>lcd_mem_draw_points</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_mem_draw_points &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[111]"></a>lcd_mem_draw_vline</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_mem_draw_vline &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[11c]"></a>lcd_mem_end_frame</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd_mem_bgr565.o(i.lcd_mem_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_mem_end_frame &rArr; lcd_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sync
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_swap
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_is_swappable
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[113]"></a>lcd_mem_fill_rect</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = lcd_mem_fill_rect &rArr; lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[96d]"></a>lcd_mem_fill_rect_with_color</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, lcd_mem_bgr565.o(i.lcd_mem_fill_rect_with_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_hline
</UL>

<P><STRONG><a name="[11f]"></a>lcd_mem_flush</STRONG> (Thumb, 102 bytes, Stack size 160 bytes, lcd_mem_bgr565.o(i.lcd_mem_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = lcd_mem_flush &rArr; image_rotate &rArr; soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[11b]"></a>lcd_mem_get_desired_bitmap_format</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_desired_bitmap_format))
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[96a]"></a>lcd_mem_get_line_length</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_mem_get_line_length
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Called By]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_point_color
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[118]"></a>lcd_mem_get_point_color</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_point_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lcd_mem_get_point_color &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[119]"></a>lcd_mem_get_vgcanvas</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_vgcanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lcd_mem_get_vgcanvas &rArr; vgcanvas_create &rArr; nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_clip_rect
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_reinit
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[96b]"></a>lcd_mem_init_drawing_fb</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_init_drawing_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_mem_init_drawing_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_is_swappable
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_point_color
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[972]"></a>lcd_mem_init_online_fb</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lcd_mem_bgr565.o(i.lcd_mem_init_online_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_mem_init_online_fb &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
</UL>

<P><STRONG><a name="[11e]"></a>lcd_mem_resize</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_mem_resize
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[11a]"></a>lcd_mem_take_snapshot</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, lcd_mem_bgr565.o(i.lcd_mem_take_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lcd_mem_take_snapshot &rArr; image_rotate &rArr; soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[658]"></a>blend_a_bgr565_bgra8888</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, blend_image_bgr565_bgr565.o(i.blend_a_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[62d]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr565_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>

<P><STRONG><a name="[62c]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>

<P><STRONG><a name="[659]"></a>blend_a_bgr565_bgra8888</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, blend_image_bgr565_bgra8888.o(i.blend_a_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[630]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
</UL>

<P><STRONG><a name="[62f]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
</UL>

<P><STRONG><a name="[65a]"></a>blend_a_bgr565_rgba8888</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, blend_image_bgr565_rgba8888.o(i.blend_a_bgr565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blend_a_bgr565_rgba8888
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[633]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_rgba8888
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
</UL>

<P><STRONG><a name="[632]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
</UL>

<P><STRONG><a name="[65b]"></a>blend_a</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, blend_image_bgr888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[636]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
</UL>

<P><STRONG><a name="[635]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
</UL>

<P><STRONG><a name="[65c]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_bgr888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[639]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
</UL>

<P><STRONG><a name="[638]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
</UL>

<P><STRONG><a name="[65d]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_bgr888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[63c]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
</UL>

<P><STRONG><a name="[63b]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
</UL>

<P><STRONG><a name="[65e]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_bgra8888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[63f]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
</UL>

<P><STRONG><a name="[63e]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
</UL>

<P><STRONG><a name="[65f]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_bgra8888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[642]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
</UL>

<P><STRONG><a name="[641]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
</UL>

<P><STRONG><a name="[660]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_bgra8888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[645]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
</UL>

<P><STRONG><a name="[644]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
</UL>

<P><STRONG><a name="[625]"></a>blend_a</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, blend_image_rgb565_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[648]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgb565_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
</UL>

<P><STRONG><a name="[647]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
</UL>

<P><STRONG><a name="[626]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_bgr565.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[627]"></a>blend_a</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blend_image_rgb565_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[64b]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
</UL>

<P><STRONG><a name="[64a]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
</UL>

<P><STRONG><a name="[628]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_bgra8888.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[629]"></a>blend_a</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blend_image_rgb565_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[64e]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
</UL>

<P><STRONG><a name="[64d]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
</UL>

<P><STRONG><a name="[62a]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_rgba8888.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[661]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_rgba8888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[651]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
</UL>

<P><STRONG><a name="[650]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
</UL>

<P><STRONG><a name="[662]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_rgba8888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[654]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[653]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
</UL>

<P><STRONG><a name="[663]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_rgba8888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[657]"></a>blend_image_with_alpha</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[656]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
</UL>

<P><STRONG><a name="[74c]"></a>clear_image</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, fill_image_bgr565.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[855]"></a>fill_image</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, fill_image_bgr565.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr565_rect
</UL>

<P><STRONG><a name="[750]"></a>clear_image</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, fill_image_bgr888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[857]"></a>fill_image</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, fill_image_bgr888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr888_rect
</UL>

<P><STRONG><a name="[751]"></a>clear_image</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, fill_image_bgra8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[859]"></a>fill_image</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, fill_image_bgra8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgra8888_rect
</UL>

<P><STRONG><a name="[752]"></a>clear_image</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, fill_image_rgb565.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[85a]"></a>fill_image</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, fill_image_rgb565.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb565_rect
</UL>

<P><STRONG><a name="[753]"></a>clear_image</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, fill_image_rgba8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[85b]"></a>fill_image</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, fill_image_rgba8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgba8888_rect
</UL>

<P><STRONG><a name="[ad0]"></a>rotate_image</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, rotate_image_bgr565.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr565_image
</UL>

<P><STRONG><a name="[ad2]"></a>rotate_image</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, rotate_image_bgr888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr888_image
</UL>

<P><STRONG><a name="[ad4]"></a>rotate_image</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, rotate_image_bgra8888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgra8888_image
</UL>

<P><STRONG><a name="[ad5]"></a>rotate_image</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, rotate_image_rgb565.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb565_image
</UL>

<P><STRONG><a name="[ad6]"></a>rotate_image</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, rotate_image_rgba8888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgba8888_image
</UL>

<P><STRONG><a name="[698]"></a>calibration_win_get_current_point</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, calibration_win.o(i.calibration_win_get_current_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calibration_win_get_current_point &rArr; calibration_win_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_paint_self
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_invalidate
</UL>

<P><STRONG><a name="[699]"></a>calibration_win_invalidate</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, calibration_win.o(i.calibration_win_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = calibration_win_invalidate &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_get_current_point
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_on_event
</UL>

<P><STRONG><a name="[25e]"></a>calibration_win_on_event</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, calibration_win.o(i.calibration_win_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = calibration_win_on_event &rArr; window_base_on_event &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration_win.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>calibration_win_on_paint_self</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, calibration_win.o(i.calibration_win_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = calibration_win_on_paint_self &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_cast
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_win_get_current_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibration_win.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>destroy_glyph</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, font_loader_stb.o(i.destroy_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = destroy_glyph &rArr; glyph_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_stb_create)
</UL>
<P><STRONG><a name="[db]"></a>font_stb_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, font_loader_stb.o(i.font_stb_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = font_stb_destroy &rArr; glyph_cache_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_stb_create)
</UL>
<P><STRONG><a name="[dd]"></a>font_stb_get_baseline</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, font_loader_stb.o(i.font_stb_get_baseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = font_stb_get_baseline &rArr; stbtt_ScaleForPixelHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_ScaleForPixelHeight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_stb_create)
</UL>
<P><STRONG><a name="[dc]"></a>font_stb_get_glyph</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, font_loader_stb.o(i.font_stb_get_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = font_stb_get_glyph &rArr; stbtt_GetCodepointBitmap &rArr; stbtt_GetCodepointBitmapSubpixel &rArr; stbtt_GetGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_lookup
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_cache_add
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glyph_clone
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_ScaleForPixelHeight
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointHMetrics
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_stb_create)
</UL>
<P><STRONG><a name="[d7]"></a>font_stb_load</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, font_loader_stb.o(i.font_stb_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = font_stb_load &rArr; font_stb_create &rArr; stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_stb_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_loader_stb)
</UL>
<P><STRONG><a name="[da]"></a>font_stb_match</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, font_loader_stb.o(i.font_stb_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = font_stb_match
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_loader_stb.o(i.font_stb_create)
</UL>
<P><STRONG><a name="[c10]"></a>stbtt_FlattenCurves</STRONG> (Thumb, 796 bytes, Stack size 64 bytes, font_loader_stb.o(i.stbtt_FlattenCurves))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = stbtt_FlattenCurves &rArr; stbtt__tesselate_cubic &rArr;  stbtt__tesselate_cubic (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[c11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
</UL>

<P><STRONG><a name="[c17]"></a>stbtt_GetFontOffsetForIndex_internal</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt_GetFontOffsetForIndex_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbtt_GetFontOffsetForIndex_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttLONG
<LI><a href="#[c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__isfont
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex
</UL>

<P><STRONG><a name="[c22]"></a>stbtt_InitFont_internal</STRONG> (Thumb, 734 bytes, Stack size 112 bytes, font_loader_stb.o(i.stbtt_InitFont_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont
</UL>

<P><STRONG><a name="[c1f]"></a>stbtt__GetGlyfOffset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt__GetGlyfOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbtt__GetGlyfOffset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[c1e]"></a>stbtt__GetGlyphInfoT2</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, font_loader_stb.o(i.stbtt__GetGlyphInfoT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
</UL>

<P><STRONG><a name="[c21]"></a>stbtt__GetGlyphShapeT2</STRONG> (Thumb, 114 bytes, Stack size 112 bytes, font_loader_stb.o(i.stbtt__GetGlyphShapeT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = stbtt__GetGlyphShapeT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
</UL>

<P><STRONG><a name="[c20]"></a>stbtt__GetGlyphShapeTT</STRONG> (Thumb, 1918 bytes, Stack size 152 bytes, font_loader_stb.o(i.stbtt__GetGlyphShapeTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = stbtt__GetGlyphShapeTT &rArr;  stbtt_GetGlyphShape (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__close_shape
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
</UL>

<P><STRONG><a name="[c11]"></a>stbtt__add_point</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__add_point))
<BR><BR>[Called By]<UL><LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[c31]"></a>stbtt__buf_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt__buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = stbtt__buf_get &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
</UL>

<P><STRONG><a name="[c26]"></a>stbtt__buf_get8</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__buf_get8))
<BR><BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c35]"></a>stbtt__buf_peek8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__buf_peek8))
<BR><BR>[Called By]<UL><LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
</UL>

<P><STRONG><a name="[c2c]"></a>stbtt__buf_range</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__buf_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c27]"></a>stbtt__buf_seek</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt__buf_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = stbtt__buf_seek &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c25]"></a>stbtt__buf_skip</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt__buf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbtt__buf_skip &rArr; stbtt__buf_seek &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c28]"></a>stbtt__cff_get_index</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__cff_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stbtt__cff_get_index &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c32]"></a>stbtt__cff_index_count</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, font_loader_stb.o(i.stbtt__cff_index_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbtt__cff_index_count &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
</UL>

<P><STRONG><a name="[c29]"></a>stbtt__cff_index_get</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, font_loader_stb.o(i.stbtt__cff_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stbtt__cff_index_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c33]"></a>stbtt__cff_int</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt__cff_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = stbtt__cff_int &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
</UL>

<P><STRONG><a name="[c34]"></a>stbtt__cff_skip_operand</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt__cff_skip_operand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = stbtt__cff_skip_operand &rArr; stbtt__cff_int &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_peek8
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
</UL>

<P><STRONG><a name="[c36]"></a>stbtt__cid_get_glyph_subrs</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, font_loader_stb.o(i.stbtt__cid_get_glyph_subrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[c2f]"></a>stbtt__close_shape</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, font_loader_stb.o(i.stbtt__close_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__close_shape &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
</UL>
<BR>[Called By]<UL><LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[c37]"></a>stbtt__csctx_close_shape</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt__csctx_close_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stbtt__csctx_close_shape &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
</UL>

<P><STRONG><a name="[c39]"></a>stbtt__csctx_rccurve_to</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, font_loader_stb.o(i.stbtt__csctx_rccurve_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stbtt__csctx_rccurve_to &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[c3a]"></a>stbtt__csctx_rline_to</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__csctx_rline_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stbtt__csctx_rline_to &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[c3b]"></a>stbtt__csctx_rmove_to</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__csctx_rmove_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = stbtt__csctx_rmove_to &rArr; stbtt__csctx_close_shape &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[c38]"></a>stbtt__csctx_v</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, font_loader_stb.o(i.stbtt__csctx_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__track_vertex
</UL>
<BR>[Called By]<UL><LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rline_to
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rccurve_to
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
</UL>

<P><STRONG><a name="[c3d]"></a>stbtt__dict_get</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__dict_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_peek8
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
</UL>

<P><STRONG><a name="[c2a]"></a>stbtt__dict_get_ints</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, font_loader_stb.o(i.stbtt__dict_get_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c3e]"></a>stbtt__fill_active_edges_new</STRONG> (Thumb, 1790 bytes, Stack size 104 bytes, font_loader_stb.o(i.stbtt__fill_active_edges_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__handle_clipped_edge
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[c24]"></a>stbtt__find_table</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__find_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbtt__find_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
</UL>
<BR>[Called By]<UL><LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c40]"></a>stbtt__get_subr</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, font_loader_stb.o(i.stbtt__get_subr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = stbtt__get_subr &rArr; stbtt__cff_index_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[c2b]"></a>stbtt__get_subrs</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, font_loader_stb.o(i.stbtt__get_subrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c3f]"></a>stbtt__handle_clipped_edge</STRONG> (Thumb, 780 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__handle_clipped_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
</UL>

<P><STRONG><a name="[c41]"></a>stbtt__hheap_alloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt__hheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__hheap_alloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
</UL>

<P><STRONG><a name="[c42]"></a>stbtt__hheap_cleanup</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, font_loader_stb.o(i.stbtt__hheap_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stbtt__hheap_cleanup &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[c46]"></a>stbtt__hheap_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__hheap_free))
<BR><BR>[Called By]<UL><LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[c18]"></a>stbtt__isfont</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__isfont))
<BR><BR>[Called By]<UL><LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex_internal
</UL>

<P><STRONG><a name="[c43]"></a>stbtt__new_active</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__new_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbtt__new_active &rArr; stbtt__hheap_alloc &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_alloc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[c23]"></a>stbtt__new_buf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, font_loader_stb.o(i.stbtt__new_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[c2d]"></a>stbtt__rasterize</STRONG> (Thumb, 482 bytes, Stack size 112 bytes, font_loader_stb.o(i.stbtt__rasterize))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = stbtt__rasterize &rArr; stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
<LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>
<BR>[Called By]<UL><LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
</UL>

<P><STRONG><a name="[c45]"></a>stbtt__rasterize_sorted_edges</STRONG> (Thumb, 574 bytes, Stack size 600 bytes, font_loader_stb.o(i.stbtt__rasterize_sorted_edges))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_free
<LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_cleanup
<LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
</UL>

<P><STRONG><a name="[c2e]"></a>stbtt__run_charstring</STRONG> (Thumb, 2256 bytes, Stack size 488 bytes, font_loader_stb.o(i.stbtt__run_charstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rline_to
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rccurve_to
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
</UL>

<P><STRONG><a name="[c44]"></a>stbtt__sort_edges</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt__sort_edges))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stbtt__sort_edges &rArr; stbtt__sort_edges_quicksort &rArr;  stbtt__sort_edges_quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_ins_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
</UL>

<P><STRONG><a name="[c48]"></a>stbtt__sort_edges_ins_sort</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, font_loader_stb.o(i.stbtt__sort_edges_ins_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__sort_edges_ins_sort &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
</UL>

<P><STRONG><a name="[c47]"></a>stbtt__sort_edges_quicksort</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, font_loader_stb.o(i.stbtt__sort_edges_quicksort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = stbtt__sort_edges_quicksort &rArr;  stbtt__sort_edges_quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
</UL>

<P><STRONG><a name="[c13]"></a>stbtt__tesselate_cubic</STRONG> (Thumb, 614 bytes, Stack size 192 bytes, font_loader_stb.o(i.stbtt__tesselate_cubic))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = stbtt__tesselate_cubic &rArr;  stbtt__tesselate_cubic (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[c11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[c12]"></a>stbtt__tesselate_curve</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, font_loader_stb.o(i.stbtt__tesselate_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = stbtt__tesselate_curve &rArr;  stbtt__tesselate_curve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[c11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[c3c]"></a>stbtt__track_vertex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, font_loader_stb.o(i.stbtt__track_vertex))
<BR><BR>[Called By]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>

<P><STRONG><a name="[c30]"></a>stbtt_setvertex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, font_loader_stb.o(i.stbtt_setvertex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbtt_setvertex
</UL>
<BR>[Called By]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__close_shape
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[c19]"></a>ttLONG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, font_loader_stb.o(i.ttLONG))
<BR><BR>[Called By]<UL><LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex_internal
</UL>

<P><STRONG><a name="[c0e]"></a>ttSHORT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, font_loader_stb.o(i.ttSHORT))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_ScaleForPixelHeight
<LI><a href="#[c16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontVMetrics
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[c0f]"></a>ttULONG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, font_loader_stb.o(i.ttULONG))
<BR><BR>[Called By]<UL><LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
<LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontOffsetForIndex_internal
</UL>

<P><STRONG><a name="[c0d]"></a>ttUSHORT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, font_loader_stb.o(i.ttUSHORT))
<BR><BR>[Called By]<UL><LI><a href="#[c16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
<LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[de0]"></a>window_base_load_theme_obj</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, window_base.o(i.window_base_load_theme_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = window_base_load_theme_obj &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_create
<LI><a href="#[d7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_assets_manager
<LI><a href="#[dde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_event
</UL>

<P><STRONG><a name="[194]"></a>parser_on_name</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, widget_animator_factory.o(i.parser_on_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = parser_on_name &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_factory.o(i.widget_animator_parser_parse)
</UL>
<P><STRONG><a name="[195]"></a>parser_on_param</STRONG> (Thumb, 790 bytes, Stack size 32 bytes, widget_animator_factory.o(i.parser_on_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = parser_on_param &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_type_find
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atof
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atob
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_factory.o(i.widget_animator_parser_parse)
</UL>
<P><STRONG><a name="[d4e]"></a>widget_animator_parser_parse</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, widget_animator_factory.o(i.widget_animator_parser_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = widget_animator_parser_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_parse
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parser_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_create
</UL>

<P><STRONG><a name="[df]"></a>parser_on_name</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, func_call_parser.o(i.parser_on_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = parser_on_name &rArr; object_set_name &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_call_parser.o(i.func_call_parse)
</UL>
<P><STRONG><a name="[e0]"></a>parser_on_param</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, func_call_parser.o(i.parser_on_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = parser_on_param &rArr; object_set_prop_str &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_call_parser.o(i.func_call_parse)
</UL>
<P><STRONG><a name="[d80]"></a>is_valid_style_name</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, style_const.o(i.is_valid_style_name))
<BR><BR>[Called By]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
</UL>

<P><STRONG><a name="[264]"></a>style_const_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, style_const.o(i.style_const_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = style_const_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[263]"></a>style_const_notify_widget_state_changed</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, style_const.o(i.style_const_notify_widget_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = style_const_notify_widget_state_changed &rArr; widget_get_const_style_data &rArr; widget_get_window_theme &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_const.o(.constdata)
</UL>
<P><STRONG><a name="[c54]"></a>widget_get_const_style_data</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, style_const.o(i.widget_get_const_style_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = widget_get_const_style_data &rArr; widget_get_window_theme &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_find_style
<LI><a href="#[cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_str
<LI><a href="#[d81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window_theme
<LI><a href="#[d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_style_name
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_notify_widget_state_changed
</UL>

<P><STRONG><a name="[d81]"></a>widget_get_window_theme</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, style_const.o(i.widget_get_window_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = widget_get_window_theme &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_const_style_data
</UL>

<P><STRONG><a name="[5db]"></a>animator_is_equal</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, widget_animator_manager.o(i.animator_is_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = animator_is_equal
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_find
</UL>

<P><STRONG><a name="[193]"></a>widget_animator_manager_on_timer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, widget_animator_manager.o(i.widget_animator_manager_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = widget_animator_manager_on_timer &rArr; widget_animator_manager_time_elapse &rArr; widget_animator_time_elapse &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_time_elapse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_manager.o(i.widget_animator_manager_init)
</UL>
<P><STRONG><a name="[611]"></a>bitmap_format_to_nanovg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.bitmap_format_to_nanovg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = bitmap_format_to_nanovg &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_reinit
</UL>

<P><STRONG><a name="[d0f]"></a>toNVGcolor</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.toNVGcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = toNVGcolor &rArr; nvgRGBA
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_color
</UL>

<P><STRONG><a name="[26d]"></a>vgcanvas_nanovg_arc</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = vgcanvas_nanovg_arc &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>vgcanvas_nanovg_arc_to</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = vgcanvas_nanovg_arc_to &rArr; nvgArcTo &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>vgcanvas_nanovg_begin_frame</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vgcanvas_nanovg_begin_frame &rArr; nvgBeginFrame &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>vgcanvas_nanovg_begin_path</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vgcanvas_nanovg_begin_path &rArr; nvgBeginPath
</UL>
<BR>[Calls]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>vgcanvas_nanovg_bezier_to</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bezier_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vgcanvas_nanovg_bezier_to &rArr; nvgBezierTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>vgcanvas_nanovg_bind_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bind_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[269]"></a>vgcanvas_nanovg_clear_rect</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clear_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = vgcanvas_nanovg_clear_rect &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[27a]"></a>vgcanvas_nanovg_clip_rect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vgcanvas_nanovg_clip_rect &rArr; nvgScissor
</UL>
<BR>[Calls]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[274]"></a>vgcanvas_nanovg_close_path</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_close_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vgcanvas_nanovg_close_path &rArr; nvgClosePath &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[294]"></a>vgcanvas_nanovg_create_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_create_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>vgcanvas_nanovg_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vgcanvas_nanovg_destroy &rArr; nvgDeleteInternal &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>vgcanvas_nanovg_destroy_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[284]"></a>vgcanvas_nanovg_draw_image</STRONG> (Thumb, 260 bytes, Stack size 224 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_draw_image &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRestore
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>vgcanvas_nanovg_ellipse</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = vgcanvas_nanovg_ellipse &rArr; nvgEllipse &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>vgcanvas_nanovg_end_frame</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vgcanvas_nanovg_end_frame &rArr; nvgEndFrame &rArr; nvgImageSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[d37]"></a>vgcanvas_nanovg_ensure_image</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ensure_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_ensure_image &rArr; image_manager_update_specific &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager_update_specific
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_manager
<LI><a href="#[d39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_to_int
<LI><a href="#[d3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pointer_from_int
<LI><a href="#[d3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateImageRaw
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[27b]"></a>vgcanvas_nanovg_fill</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vgcanvas_nanovg_fill &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>vgcanvas_nanovg_fill_text</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_fill_text &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextAlign
<LI><a href="#[d3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgText
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[268]"></a>vgcanvas_nanovg_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_flush))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>vgcanvas_nanovg_is_point_in_path</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_is_point_in_path))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[26c]"></a>vgcanvas_nanovg_line_to</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_line_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vgcanvas_nanovg_line_to &rArr; nvgLineTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>vgcanvas_nanovg_measure_text</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_measure_text &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextBounds
<LI><a href="#[d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextAlign
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>vgcanvas_nanovg_move_to</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vgcanvas_nanovg_move_to &rArr; nvgMoveTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMoveTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>vgcanvas_nanovg_paint</STRONG> (Thumb, 170 bytes, Stack size 192 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_paint &rArr; nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[d37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>vgcanvas_nanovg_quad_to</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_quad_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vgcanvas_nanovg_quad_to &rArr; nvgQuadTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>vgcanvas_nanovg_reinit</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_reinit &rArr; nvgReinitAgge &rArr; nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[267]"></a>vgcanvas_nanovg_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reset))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>vgcanvas_nanovg_restore</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_nanovg_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRestore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[276]"></a>vgcanvas_nanovg_rotate</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = vgcanvas_nanovg_rotate &rArr; nvgRotate &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[273]"></a>vgcanvas_nanovg_rounded_rect</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rounded_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = vgcanvas_nanovg_rounded_rect &rArr; nvgRoundedRect &rArr; nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[291]"></a>vgcanvas_nanovg_save</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_nanovg_save &rArr; nvgSave &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[275]"></a>vgcanvas_nanovg_scale</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vgcanvas_nanovg_scale &rArr; nvgScale &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[285]"></a>vgcanvas_nanovg_set_antialias</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_antialias))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>vgcanvas_nanovg_set_fill_color</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vgcanvas_nanovg_set_fill_color &rArr; nvgFillColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>vgcanvas_nanovg_set_fill_linear_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_linear_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = vgcanvas_nanovg_set_fill_linear_gradient &rArr; nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>vgcanvas_nanovg_set_fill_radial_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_radial_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vgcanvas_nanovg_set_fill_radial_gradient &rArr; nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>vgcanvas_nanovg_set_font</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_set_font &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[d41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontFaceId
<LI><a href="#[d3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFindFont
<LI><a href="#[d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateFontMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[27f]"></a>vgcanvas_nanovg_set_font_size</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_font_size &rArr; nvgFontSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[286]"></a>vgcanvas_nanovg_set_global_alpha</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_global_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_global_alpha &rArr; nvgGlobalAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGlobalAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>vgcanvas_nanovg_set_line_cap</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_nanovg_set_line_cap &rArr; nvgLineCap
</UL>
<BR>[Calls]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineCap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>vgcanvas_nanovg_set_line_join</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_nanovg_set_line_join &rArr; nvgLineJoin
</UL>
<BR>[Calls]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>vgcanvas_nanovg_set_line_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_line_width &rArr; nvgStrokeWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>vgcanvas_nanovg_set_miter_limit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_miter_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_miter_limit &rArr; nvgMiterLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMiterLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28b]"></a>vgcanvas_nanovg_set_stroke_color</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vgcanvas_nanovg_set_stroke_color &rArr; nvgStrokeColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>vgcanvas_nanovg_set_stroke_linear_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_linear_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = vgcanvas_nanovg_set_stroke_linear_gradient &rArr; nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>vgcanvas_nanovg_set_stroke_radial_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_radial_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vgcanvas_nanovg_set_stroke_radial_gradient &rArr; nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[d0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[280]"></a>vgcanvas_nanovg_set_text_align</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_align))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>vgcanvas_nanovg_set_text_baseline</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_baseline))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[279]"></a>vgcanvas_nanovg_set_transform</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vgcanvas_nanovg_set_transform &rArr; nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>vgcanvas_nanovg_stroke</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_stroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = vgcanvas_nanovg_stroke &rArr; nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[278]"></a>vgcanvas_nanovg_transform</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vgcanvas_nanovg_transform &rArr; nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[277]"></a>vgcanvas_nanovg_translate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vgcanvas_nanovg_translate &rArr; nvgTranslate &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>vgcanvas_nanovg_unbind_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_unbind_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[5e4]"></a>arc_info_init</STRONG> (Thumb, 1040 bytes, Stack size 120 bytes, bsvg_draw.o(i.arc_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arc_info_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_vector_angle
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_arc_path
</UL>

<P><STRONG><a name="[669]"></a>bsvg_draw_arc_path</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, bsvg_draw.o(i.bsvg_draw_arc_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bsvg_draw_arc_path &rArr; arc_info_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_bezier_to
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_next
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
</UL>

<P><STRONG><a name="[af]"></a>bsvg_draw_on_path</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bsvg_draw.o(i.bsvg_draw_on_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = bsvg_draw_on_path &rArr; bsvg_draw_path &rArr; bsvg_draw_arc_path &rArr; arc_info_init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsvg_draw.o(i.bsvg_draw)
</UL>
<P><STRONG><a name="[b0]"></a>bsvg_draw_on_shape</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsvg_draw.o(i.bsvg_draw_on_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = bsvg_draw_on_shape &rArr; bsvg_draw_shape &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsvg_draw.o(i.bsvg_draw)
</UL>
<P><STRONG><a name="[672]"></a>bsvg_draw_set_line_cap</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsvg_draw.o(i.bsvg_draw_set_line_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsvg_draw_set_line_cap &rArr; vgcanvas_set_line_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
</UL>

<P><STRONG><a name="[674]"></a>bsvg_draw_set_line_join</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsvg_draw.o(i.bsvg_draw_set_line_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsvg_draw_set_line_join &rArr; vgcanvas_set_line_join
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_join
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw_shape_end
</UL>

<P><STRONG><a name="[5e5]"></a>calc_vector_angle</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsvg_draw.o(i.calc_vector_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = calc_vector_angle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_info_init
</UL>

<P><STRONG><a name="[299]"></a>clip_board_default_clear</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, clip_board_default.o(i.clip_board_default_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = clip_board_default_clear &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clip_board_default.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>clip_board_default_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, clip_board_default.o(i.clip_board_default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clip_board_default_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clip_board_default.o(.constdata)
</UL>
<P><STRONG><a name="[29a]"></a>clip_board_default_get_data</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, clip_board_default.o(i.clip_board_default_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clip_board_default_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clip_board_default.o(.constdata)
</UL>
<P><STRONG><a name="[29b]"></a>clip_board_default_set_data</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, clip_board_default.o(i.clip_board_default_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = clip_board_default_set_data &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set_with_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clip_board_default.o(.constdata)
</UL>
<P><STRONG><a name="[922]"></a>input_device_status_init_key_event</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, input_device_status.o(i.input_device_status_init_key_event))
<BR><BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[91d]"></a>input_device_status_init_pointer_event</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, input_device_status.o(i.input_device_status_init_pointer_event))
<BR><BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[927]"></a>input_device_status_init_wheel_event</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, input_device_status.o(i.input_device_status_init_wheel_event))
<BR><BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[923]"></a>input_device_status_shift_key</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, input_device_status.o(i.input_device_status_shift_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_device_status_shift_key &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[921]"></a>input_device_status_update_key_status</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, input_device_status.o(i.input_device_status_update_key_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_device_status_update_key_status
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_device_status_on_input_event
</UL>

<P><STRONG><a name="[29e]"></a>system_bar_on_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_bar.o(i.system_bar_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = system_bar_on_destroy &rArr; window_base_on_destroy &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_off_by_ctx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bar.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>system_bar_on_request_close_window</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, system_bar.o(i.system_bar_on_request_close_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = system_bar_on_request_close_window &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_get_top_main_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bar.o(i.system_bar_on_event)
</UL>
<P><STRONG><a name="[162]"></a>system_bar_on_top_window_changed</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, system_bar.o(i.system_bar_on_top_window_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = system_bar_on_top_window_changed &rArr; widget_set_text &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_tr_text
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_enable
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bar.o(i.system_bar_create)
</UL>
<P><STRONG><a name="[197]"></a>widget_animator_prop_update</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, widget_animator_prop.o(i.widget_animator_prop_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = widget_animator_prop_update &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_prop.o(i.widget_animator_prop_create)
</UL>
<P><STRONG><a name="[196]"></a>widget_animator_prop2_update</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, widget_animator_prop2.o(i.widget_animator_prop2_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = widget_animator_prop2_update &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_animator_prop2.o(i.widget_animator_prop2_create)
</UL>
<P><STRONG><a name="[2a4]"></a>children_layouter_default_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, children_layouter_default.o(i.children_layouter_default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = children_layouter_default_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>children_layouter_default_get_param</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, children_layouter_default.o(i.children_layouter_default_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = children_layouter_default_get_param &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>children_layouter_default_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, children_layouter_default.o(i.children_layouter_default_is_valid))
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a0]"></a>children_layouter_default_layout</STRONG> (Thumb, 1358 bytes, Stack size 152 bytes, children_layouter_default.o(i.children_layouter_default_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = children_layouter_default_layout &rArr; widget_layout_floating_children &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_int
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_floating_children
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_children_for_layout
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_default_is_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>children_layouter_default_set_param</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, children_layouter_default.o(i.children_layouter_default_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = children_layouter_default_set_param &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[29f]"></a>children_layouter_default_to_string</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, children_layouter_default.o(i.children_layouter_default_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = children_layouter_default_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_trim_right
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>self_layouter_default_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, self_layouter_default.o(i.self_layouter_default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = self_layouter_default_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_default.o(.constdata)
</UL>
<P><STRONG><a name="[d91]"></a>widget_layout_calc</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, self_layouter_default.o(i.widget_layout_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = widget_layout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_with_rect
</UL>

<P><STRONG><a name="[2aa]"></a>idle_info_on_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, idle_info.o(i.idle_info_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = idle_info_on_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle_info.o(.constdata)
</UL>
<P><STRONG><a name="[8d5]"></a>idle_manager_dispatch_one</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, idle_manager_1.o(i.idle_manager_dispatch_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = idle_manager_dispatch_one &rArr; idle_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_remove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_manager_dispatch
</UL>

<P><STRONG><a name="[2ab]"></a>timer_info_on_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_info.o(i.timer_info_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_info_on_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_info.o(.constdata)
</UL>
<P><STRONG><a name="[cd6]"></a>timer_manager_dispatch_one</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer_manager.o(i.timer_manager_dispatch_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = timer_manager_dispatch_one &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_remove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[ccb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch
</UL>

<P><STRONG><a name="[cd5]"></a>timer_manager_update_time</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, timer_manager.o(i.timer_manager_update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_manager_update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[ccb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_manager_dispatch
</UL>

<P><STRONG><a name="[b67]"></a>slist_node_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, slist.o(i.slist_node_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_append
</UL>

<P><STRONG><a name="[b69]"></a>slist_node_destroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, slist.o(i.slist_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_remove_all
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_remove
</UL>

<P><STRONG><a name="[13f]"></a>obj_get_func</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, object.o(i.obj_get_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obj_get_func
</UL>
<BR>[Calls]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_default_hooks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object.o(i.object_eval)
</UL>
<P><STRONG><a name="[140]"></a>obj_get_variable</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, object.o(i.obj_get_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = obj_get_variable &rArr; value_double &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_double
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_default_hooks
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object.o(i.object_eval)
</UL>
<P><STRONG><a name="[a3e]"></a>object_destroy</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.object_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_dispatch
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
</UL>

<P><STRONG><a name="[a37]"></a>object_default_check</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object_default.o(i.object_default_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = object_default_check &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_remove_prop
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_insert_prop_at
</UL>

<P><STRONG><a name="[a38]"></a>object_default_clean_invalid_props</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object_default.o(i.object_default_clean_invalid_props))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = object_default_clean_invalid_props &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_remove_prop
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_foreach_prop
</UL>

<P><STRONG><a name="[2ad]"></a>object_default_compare</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, object_default.o(i.object_default_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = object_default_compare &rArr; tk_str_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[a3a]"></a>object_default_extend</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, object_default.o(i.object_default_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = object_default_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_insert_prop_at
</UL>

<P><STRONG><a name="[a3b]"></a>object_default_find</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, object_default.o(i.object_default_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = object_default_find &rArr; tk_str_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_remove_prop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_get_prop
</UL>

<P><STRONG><a name="[2b1]"></a>object_default_foreach_prop</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, object_default.o(i.object_default_foreach_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = object_default_foreach_prop &rArr; named_value_deinit &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_deinit
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_clean_invalid_props
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[2ae]"></a>object_default_get_prop</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, object_default.o(i.object_default_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = object_default_get_prop &rArr; object_default_find &rArr; tk_str_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_copy
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_find
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[a3d]"></a>object_default_insert_prop_at</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, object_default.o(i.object_default_insert_prop_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = object_default_insert_prop_at &rArr; named_value_init &rArr; named_value_set_value &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_init
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_extend
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_check
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_set_prop
</UL>

<P><STRONG><a name="[2ac]"></a>object_default_on_destroy</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, object_default.o(i.object_default_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = object_default_on_destroy &rArr; named_value_deinit &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[2b0]"></a>object_default_remove_prop</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, object_default.o(i.object_default_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = object_default_remove_prop &rArr; named_value_deinit &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_deinit
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_find
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_clean_invalid_props
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_check
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>object_default_set_prop</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, object_default.o(i.object_default_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = object_default_set_prop &rArr; object_default_insert_prop_at &rArr; named_value_init &rArr; named_value_set_value &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_cmp
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;named_value_set_value
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_insert_prop_at
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_find
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_default_extend
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_default.o(.constdata)
</UL>
<P><STRONG><a name="[db4]"></a>widget_pool_get</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, widget_pool.o(i.widget_pool_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = widget_pool_get &rArr; object_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_create_widget
</UL>

<P><STRONG><a name="[db6]"></a>widget_pool_put</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, widget_pool.o(i.widget_pool_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = widget_pool_put &rArr; object_set_prop &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_pointer
<LI><a href="#[d56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_pointer
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_set_prop
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_destroy
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_destroy_widget
</UL>

<P><STRONG><a name="[db5]"></a>widget_pool_real_create_widget</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, widget_pool.o(i.widget_pool_real_create_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = widget_pool_real_create_widget &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_create_widget
</UL>

<P><STRONG><a name="[19c]"></a>widget_pool_real_destroy_widget</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, widget_pool.o(i.widget_pool_real_destroy_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = widget_pool_real_destroy_widget &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_destroy_widget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_pool.o(i.widget_pool_put)
</UL>
<P><STRONG><a name="[db7]"></a>widget_pool_reset_widget</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, widget_pool.o(i.widget_pool_reset_widget))
<BR><BR>[Called By]<UL><LI><a href="#[d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_pool_destroy_widget
</UL>

<P><STRONG><a name="[7ad]"></a>darray_extend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, darray.o(i.darray_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
</UL>

<P><STRONG><a name="[5e7]"></a>args_clear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, expr_eval.o(i.args_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = args_clear &rArr; expr_value_clear &rArr; expr_value_set_number &rArr; expr_str_clear &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_func
</UL>

<P><STRONG><a name="[878]"></a>args_count</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, expr_eval.o(i.args_count))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_if
</UL>

<P><STRONG><a name="[5e9]"></a>args_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, expr_eval.o(i.args_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = args_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_func
</UL>

<P><STRONG><a name="[2c6]"></a>default_get_func</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, expr_eval.o(i.default_get_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = default_get_func
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>default_get_variable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, expr_eval.o(i.default_get_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = default_get_variable &rArr; expr_value_set_number &rArr; expr_str_clear &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[838]"></a>expr_str_append_char</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, expr_eval.o(i.expr_str_append_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = expr_str_append_char &rArr; expr_str_append_str &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_str
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string
</UL>

<P><STRONG><a name="[839]"></a>expr_str_append_str</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, expr_eval.o(i.expr_str_append_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = expr_str_append_str &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_append_string
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_char
</UL>

<P><STRONG><a name="[82f]"></a>expr_str_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, expr_eval.o(i.expr_str_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = expr_str_clear &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_execute
</UL>

<P><STRONG><a name="[82d]"></a>expr_str_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, expr_eval.o(i.expr_str_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = expr_str_init &rArr; malloc &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_execute
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
</UL>

<P><STRONG><a name="[83a]"></a>expr_value_append_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, expr_eval.o(i.expr_value_append_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = expr_value_append_string &rArr; expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_str
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
</UL>

<P><STRONG><a name="[83c]"></a>expr_value_copy</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, expr_eval.o(i.expr_value_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = expr_value_copy &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_string
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_if
</UL>

<P><STRONG><a name="[841]"></a>expr_value_op</STRONG> (Thumb, 1024 bytes, Stack size 24 bytes, expr_eval.o(i.expr_value_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = expr_value_op &rArr; expr_value_to_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_number
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_append_string
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
</UL>

<P><STRONG><a name="[842]"></a>expr_value_to_number</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, expr_eval.o(i.expr_value_to_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = expr_value_to_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
</UL>

<P><STRONG><a name="[83b]"></a>expr_value_to_string</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, expr_eval.o(i.expr_value_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_init
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_string
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_append_string
</UL>

<P><STRONG><a name="[2bb]"></a>func_acos</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_acos &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2bc]"></a>func_asin</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_asin &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>func_atan</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_atan &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>func_ceil</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_ceil &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b8]"></a>func_cos</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_cos &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>func_exp</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_exp &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c3]"></a>func_floor</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_floor &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c5]"></a>func_if</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, expr_eval.o(i.func_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = func_if &rArr; expr_value_copy &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>func_log</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_log &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>func_log10</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_log10 &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b2]"></a>func_number</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, expr_eval.o(i.func_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = func_number &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>func_path</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, expr_eval.o(i.func_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = func_path &rArr; expr_value_set_string &rArr; expr_value_append_string &rArr; expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>func_round</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, expr_eval.o(i.func_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_round &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>func_sin</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_sin &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2c1]"></a>func_sqrt</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_sqrt &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>func_string</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, expr_eval.o(i.func_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = func_string &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>func_strlen</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, expr_eval.o(i.func_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = func_strlen &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>func_tan</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, expr_eval.o(i.func_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = func_tan &rArr; expr_value_get_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>func_tolower</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, expr_eval.o(i.func_tolower))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = func_tolower &rArr; expr_value_set_string &rArr; expr_value_append_string &rArr; expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>func_toupper</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, expr_eval.o(i.func_toupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = func_toupper &rArr; expr_value_set_string &rArr; expr_value_append_string &rArr; expr_value_to_string &rArr; number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_to_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> expr_eval.o(.constdata)
</UL>
<P><STRONG><a name="[880]"></a>get_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, expr_eval.o(i.get_char))
<BR><BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[87f]"></a>get_name</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, expr_eval.o(i.get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_name &rArr; is_name
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_name
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
</UL>

<P><STRONG><a name="[883]"></a>get_number</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, expr_eval.o(i.get_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_number
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_exp
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dp
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
</UL>

<P><STRONG><a name="[887]"></a>get_string</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, expr_eval.o(i.get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_string &rArr; expr_str_append_char &rArr; expr_str_append_str &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_str_append_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
</UL>

<P><STRONG><a name="[82e]"></a>get_token</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, expr_eval.o(i.get_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_token &rArr; get_string &rArr; expr_str_append_char &rArr; expr_str_append_str &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_name_start
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dp
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_execute
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_func
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
</UL>

<P><STRONG><a name="[885]"></a>is_digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, expr_eval.o(i.is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_name
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
</UL>

<P><STRONG><a name="[884]"></a>is_dp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, expr_eval.o(i.is_dp))
<BR><BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
</UL>

<P><STRONG><a name="[886]"></a>is_exp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, expr_eval.o(i.is_exp))
<BR><BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
</UL>

<P><STRONG><a name="[881]"></a>is_name</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, expr_eval.o(i.is_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_name
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_name_start
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[889]"></a>is_name_start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, expr_eval.o(i.is_name_start))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_name
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
</UL>

<P><STRONG><a name="[843]"></a>number_to_string</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, expr_eval.o(i.number_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = number_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceill
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_toupper
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_tolower
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_strlen
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_to_string
</UL>

<P><STRONG><a name="[a68]"></a>parse_compare</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, expr_eval.o(i.parse_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
</UL>

<P><STRONG><a name="[830]"></a>parse_expr</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, expr_eval.o(i.parse_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_get_number
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_logic
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_copy
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eval_execute
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_func
</UL>

<P><STRONG><a name="[a6b]"></a>parse_func</STRONG> (Thumb, 194 bytes, Stack size 288 bytes, expr_eval.o(i.parse_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + In Cycle
<LI>Call Chain = parse_func &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_init
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;args_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
</UL>

<P><STRONG><a name="[a6a]"></a>parse_logic</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, expr_eval.o(i.parse_logic))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
</UL>

<P><STRONG><a name="[a6c]"></a>parse_product</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, expr_eval.o(i.parse_product))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sum
</UL>

<P><STRONG><a name="[a69]"></a>parse_sum</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, expr_eval.o(i.parse_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_clear
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_op
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_compare
</UL>

<P><STRONG><a name="[a6e]"></a>parse_term</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, expr_eval.o(i.parse_term))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_string
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_func
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_expr
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
</UL>
<BR>[Called By]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_unary
</UL>

<P><STRONG><a name="[a6d]"></a>parse_unary</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, expr_eval.o(i.parse_unary))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_set_number
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr_value_init
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_term
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_product
</UL>

<P><STRONG><a name="[882]"></a>put_char</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, expr_eval.o(i.put_char))
<BR><BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[135]"></a>mutable_image_invalidate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mutable_image.o(i.mutable_image_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mutable_image_invalidate &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mutable_image.o(i.mutable_image_create)
</UL>
<P><STRONG><a name="[2cb]"></a>mutable_image_on_destroy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mutable_image.o(i.mutable_image_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mutable_image_on_destroy &rArr; image_base_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_destroy
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mutable_image.o(.constdata)
</UL>
<P><STRONG><a name="[2ca]"></a>mutable_image_on_paint_self</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, mutable_image.o(i.mutable_image_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mutable_image_on_paint_self &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_icon
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_need_transform
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_cast
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_prepare_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mutable_image.o(.constdata)
</UL>
<P><STRONG><a name="[9cb]"></a>mutable_image_prepare_image</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mutable_image.o(i.mutable_image_prepare_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mutable_image_prepare_image &rArr; bitmap_create_ex &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_desired_bitmap_format
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutable_image_on_paint_self
</UL>

<P><STRONG><a name="[2ce]"></a>window_animator_center_scale_draw_curr</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, window_animator_center_scale.o(i.window_animator_center_scale_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = window_animator_center_scale_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_global_alpha
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_center_scale.o(.constdata)
</UL>
<P><STRONG><a name="[2cc]"></a>window_animator_center_scale_update_percent</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, window_animator_center_scale.o(i.window_animator_center_scale_update_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = window_animator_center_scale_update_percent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_center_scale.o(.constdata)
</UL>
<P><STRONG><a name="[2cf]"></a>window_animator_fade_draw_curr</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, window_animator_fade.o(i.window_animator_fade_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = window_animator_fade_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_global_alpha
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_fade.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>window_animator_htranslate_draw_curr</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, window_animator_htranslate.o(i.window_animator_htranslate_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_htranslate_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_htranslate.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>window_animator_htranslate_draw_prev</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, window_animator_htranslate.o(i.window_animator_htranslate_draw_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_htranslate_draw_prev &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_htranslate.o(.constdata)
</UL>
<P><STRONG><a name="[2d0]"></a>window_animator_htranslate_update_percent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, window_animator_htranslate.o(i.window_animator_htranslate_update_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = window_animator_htranslate_update_percent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_htranslate.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>on_prev_window_paint_done</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, window_animator_slide.o(i.on_prev_window_paint_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_prev_window_paint_done &rArr; window_animator_slide_draw_mask &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_slide.o(i.window_animator_slide_init)
</UL>
<P><STRONG><a name="[a4c]"></a>window_animator_slide_draw_mask</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, window_animator_slide.o(i.window_animator_slide_draw_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = window_animator_slide_draw_mask &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_slide_draw_prev
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_prev_window_paint_done
</UL>

<P><STRONG><a name="[2db]"></a>window_animator_vtranslate_draw_curr</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, window_animator_vtranslate.o(i.window_animator_vtranslate_draw_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = window_animator_vtranslate_draw_curr &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_vtranslate.o(.constdata)
</UL>
<P><STRONG><a name="[2da]"></a>window_animator_vtranslate_draw_prev</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, window_animator_vtranslate.o(i.window_animator_vtranslate_draw_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = window_animator_vtranslate_draw_prev &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[dc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_vtranslate.o(.constdata)
</UL>
<P><STRONG><a name="[2d9]"></a>window_animator_vtranslate_update_percent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, window_animator_vtranslate.o(i.window_animator_vtranslate_update_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = window_animator_vtranslate_update_percent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_vtranslate.o(.constdata)
</UL>
<P><STRONG><a name="[2dc]"></a>dialog_highlighter_default_draw</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, dialog_highlighter_default.o(i.dialog_highlighter_default_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = dialog_highlighter_default_draw &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_image
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_width
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_height
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_system_bar
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_default.o(.constdata)
</UL>
<P><STRONG><a name="[7be]"></a>dialog_highlighter_default_draw_mask</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dialog_highlighter_default.o(i.dialog_highlighter_default_draw_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dialog_highlighter_default_draw_mask &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_width
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_height
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_prepare
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw
</UL>

<P><STRONG><a name="[2de]"></a>dialog_highlighter_default_is_dynamic</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dialog_highlighter_default.o(i.dialog_highlighter_default_is_dynamic))
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_default.o(.constdata)
</UL>
<P><STRONG><a name="[2dd]"></a>dialog_highlighter_default_prepare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dialog_highlighter_default.o(i.dialog_highlighter_default_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = dialog_highlighter_default_prepare &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_paint_system_bar
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_default_draw_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_default.o(.constdata)
</UL>
<P><STRONG><a name="[7c0]"></a>dialog_highlighter_on_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dialog_highlighter.o(i.dialog_highlighter_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dialog_highlighter_on_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
</UL>

<P><STRONG><a name="[cb]"></a>creator_item_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dialog_highlighter_factory.o(i.creator_item_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = creator_item_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_factory.o(i.dialog_highlighter_factory_init)
</UL>
<P><STRONG><a name="[7c6]"></a>dialog_highlighter_factory_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dialog_highlighter_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_destroy
</UL>

<P><STRONG><a name="[7c3]"></a>dialog_highlighter_factory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dialog_highlighter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_factory_create
</UL>

<P><STRONG><a name="[ca]"></a>dialog_highlighter_on_dialog_destroy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dialog_highlighter_factory.o(i.dialog_highlighter_on_dialog_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dialog_highlighter_on_dialog_destroy &rArr; dialog_highlighter_destroy &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager_set_dialog_highlighter
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_highlighter_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialog_highlighter_factory.o(i.dialog_highlighter_factory_create_highlighter)
</UL>
<P><STRONG><a name="[19e]"></a>creator_item_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_animator_factory.o(i.creator_item_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = creator_item_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_animator_factory.o(i.window_animator_factory_init)
</UL>
<P><STRONG><a name="[dcb]"></a>window_animator_create_impl</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, window_animator_factory.o(i.window_animator_create_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = window_animator_create_impl &rArr; func_call_parse &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_type_find
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_unref
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_get_prop
<LI><a href="#[ce7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_call_parse
<LI><a href="#[dce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_create_animator
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_open
<LI><a href="#[dca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_create_for_close
</UL>

<P><STRONG><a name="[dd4]"></a>window_animator_factory_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, window_animator_factory.o(i.window_animator_factory_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = window_animator_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_destroy
</UL>

<P><STRONG><a name="[dd3]"></a>window_animator_factory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, window_animator_factory.o(i.window_animator_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = window_animator_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_animator_factory_create
</UL>

<P><STRONG><a name="[754]"></a>clear_image</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, fill_image_abgr8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[851]"></a>fill_image</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, fill_image_abgr8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_abgr8888_rect
</UL>

<P><STRONG><a name="[755]"></a>clear_image</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, fill_image_argb8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[853]"></a>fill_image</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, fill_image_argb8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fill_image &rArr; clear_image &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_argb8888_rect
</UL>

<P><STRONG><a name="[737]"></a>children_layouter_factory_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, children_layouter_factory.o(i.children_layouter_factory_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = children_layouter_factory_deinit &rArr; darray_deinit &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_destroy
</UL>

<P><STRONG><a name="[734]"></a>children_layouter_factory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, children_layouter_factory.o(i.children_layouter_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = children_layouter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_create
</UL>

<P><STRONG><a name="[bc]"></a>creator_item_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, children_layouter_factory.o(i.creator_item_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = creator_item_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_factory.o(i.children_layouter_factory_init)
</UL>
<P><STRONG><a name="[8b9]"></a>hscrollable_fix_end_offset_default</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hscrollable.o(i.hscrollable_fix_end_offset_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hscrollable_fix_end_offset_default
</UL>
<BR>[Calls]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
</UL>

<P><STRONG><a name="[8ba]"></a>hscrollable_get_widget</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hscrollable.o(i.hscrollable_get_widget))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_pointer_move
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_fix_end_offset_default
</UL>

<P><STRONG><a name="[8bb]"></a>hscrollable_invalidate_self</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, hscrollable.o(i.hscrollable_invalidate_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hscrollable_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_prop
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_scroll_done
</UL>

<P><STRONG><a name="[8bc]"></a>hscrollable_on_pointer_down</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hscrollable.o(i.hscrollable_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hscrollable_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
</UL>

<P><STRONG><a name="[8be]"></a>hscrollable_on_pointer_move</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hscrollable.o(i.hscrollable_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hscrollable_on_pointer_move &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
</UL>

<P><STRONG><a name="[8bd]"></a>hscrollable_on_pointer_up</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hscrollable.o(i.hscrollable_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hscrollable_on_pointer_up &rArr; hscrollable_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
</UL>

<P><STRONG><a name="[e5]"></a>hscrollable_on_scroll_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hscrollable.o(i.hscrollable_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hscrollable_on_scroll_done &rArr; hscrollable_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscrollable.o(i.hscrollable_scroll_to)
</UL>
<P><STRONG><a name="[14e]"></a>creator_item_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, self_layouter_factory.o(i.creator_item_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = creator_item_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_factory.o(i.self_layouter_factory_init)
</UL>
<P><STRONG><a name="[af2]"></a>self_layouter_factory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, self_layouter_factory.o(i.self_layouter_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = self_layouter_factory_init &rArr; darray_init &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_create
</UL>

<P><STRONG><a name="[2e6]"></a>style_factory_create_style_mutable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, style_mutable.o(i.style_factory_create_style_mutable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = style_factory_create_style_mutable &rArr; style_mutable_create &rArr; style_const_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_create
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_const_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[c57]"></a>style_item_add</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, style_mutable.o(i.style_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = style_item_add &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_set_value
</UL>

<P><STRONG><a name="[c58]"></a>style_item_get</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, style_mutable.o(i.style_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = style_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_get_value
</UL>

<P><STRONG><a name="[c59]"></a>style_item_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, style_mutable.o(i.style_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = style_item_set &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_reset
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_deep_copy
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_set_value
</UL>

<P><STRONG><a name="[2e5]"></a>style_mutable_destroy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, style_mutable.o(i.style_mutable_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = style_mutable_destroy &rArr; style_mutable_reset &rArr; value_reset &rArr; object_unref &rArr; object_destroy &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_destroy
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>style_mutable_get_color</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, style_mutable.o(i.style_mutable_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = style_mutable_get_color &rArr; style_mutable_get_widget_state &rArr; widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_get_value
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[2e0]"></a>style_mutable_get_int</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, style_mutable.o(i.style_mutable_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = style_mutable_get_int &rArr; style_mutable_get_widget_state &rArr; widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_find
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_state_style_get_value
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_widget_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[c5d]"></a>style_mutable_get_widget_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, style_mutable.o(i.style_mutable_get_widget_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = style_mutable_get_widget_state &rArr; widget_get_prop_str &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_is_valid
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
</UL>

<P><STRONG><a name="[2e3]"></a>style_mutable_notify_widget_state_changed</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, style_mutable.o(i.style_mutable_notify_widget_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = style_mutable_notify_widget_state_changed &rArr; style_notify_widget_state_changed
</UL>
<BR>[Calls]<UL><LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_notify_widget_state_changed
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> style_mutable.o(.constdata)
</UL>
<P><STRONG><a name="[c5f]"></a>widget_state_style_get_value</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, style_mutable.o(i.widget_state_style_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = widget_state_style_get_value &rArr; style_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_str
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_mutable_get_color
</UL>

<P><STRONG><a name="[ba]"></a>children_layouter_parser_on_name</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, children_layouter_parser.o(i.children_layouter_parser_on_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = children_layouter_parser_on_name &rArr; children_layouter_factory_create_layouter &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_create_layouter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_parser.o(i.children_layouter_create_new)
</UL>
<P><STRONG><a name="[bb]"></a>children_layouter_parser_on_param</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, children_layouter_parser.o(i.children_layouter_parser_on_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = children_layouter_parser_on_param &rArr; children_layouter_set_param_str &rArr; children_layouter_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_set_param_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_parser.o(i.children_layouter_create_new)
</UL>
<P><STRONG><a name="[14c]"></a>self_layouter_parser_on_name</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, self_layouter_parser.o(i.self_layouter_parser_on_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = self_layouter_parser_on_name &rArr; self_layouter_factory_create_layouter &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory_create_layouter
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_factory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_parser.o(i.self_layouter_create)
</UL>
<P><STRONG><a name="[14d]"></a>self_layouter_parser_on_param</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, self_layouter_parser.o(i.self_layouter_parser_on_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = self_layouter_parser_on_param &rArr; self_layouter_set_param_str &rArr; self_layouter_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_set_param_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_parser.o(i.self_layouter_create)
</UL>
<P><STRONG><a name="[948]"></a>is_word_boundary</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, text_edit.o(i.is_word_boundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = is_word_boundary &rArr; iswspace &rArr; _iswspace &rArr; _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iswspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_word_previous
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_word_next
</UL>

<P><STRONG><a name="[ad9]"></a>rows_create</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, text_edit.o(i.rows_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rows_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_max_rows
</UL>

<P><STRONG><a name="[ada]"></a>rows_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, text_edit.o(i.rows_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rows_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_destroy
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_max_rows
</UL>

<P><STRONG><a name="[c98]"></a>rows_find_by_offset</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, text_edit.o(i.rows_find_by_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rows_find_by_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
</UL>

<P><STRONG><a name="[b6f]"></a>stb_text_create_undo_record</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, text_edit.o(i.stb_text_create_undo_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_flush_redo
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_undo
</UL>
<BR>[Called By]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_createundo
</UL>

<P><STRONG><a name="[b72]"></a>stb_text_createundo</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, text_edit.o(i.stb_text_createundo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_create_undo_record
</UL>
<BR>[Called By]<UL><LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_replace
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_insert
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_delete
</UL>

<P><STRONG><a name="[b73]"></a>stb_text_locate_coord</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, text_edit.o(i.stb_text_locate_coord))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stb_text_locate_coord &rArr; text_edit_get_char_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_char_width
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_drag
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_click
</UL>

<P><STRONG><a name="[b76]"></a>stb_text_makeundo_delete</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, text_edit.o(i.stb_text_makeundo_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stb_text_makeundo_delete &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_createundo
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete
</UL>

<P><STRONG><a name="[b77]"></a>stb_text_makeundo_insert</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, text_edit.o(i.stb_text_makeundo_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stb_text_makeundo_insert &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_createundo
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste_internal
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b78]"></a>stb_text_makeundo_replace</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, text_edit.o(i.stb_text_makeundo_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stb_text_makeundo_replace &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_createundo
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b79]"></a>stb_text_redo</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, text_edit.o(i.stb_text_redo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stb_text_redo &rArr; text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_remove
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b7c]"></a>stb_text_undo</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, text_edit.o(i.stb_text_undo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stb_text_undo &rArr; text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_remove
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_insert
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_discard_redo
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b82]"></a>stb_textedit_clamp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, text_edit.o(i.stb_textedit_clamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stb_textedit_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste_internal
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_last
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete_selection
</UL>

<P><STRONG><a name="[b88]"></a>stb_textedit_clear_state</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, text_edit.o(i.stb_textedit_clear_state))
<BR><BR>[Called By]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_initialize_state
</UL>

<P><STRONG><a name="[b7e]"></a>stb_textedit_click</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, text_edit.o(i.stb_textedit_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stb_textedit_click &rArr; stb_text_locate_coord &rArr; text_edit_get_char_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_locate_coord
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_click
</UL>

<P><STRONG><a name="[b7f]"></a>stb_textedit_cut</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stb_textedit_cut &rArr; stb_textedit_delete_selection &rArr; stb_textedit_delete &rArr; stb_text_makeundo_delete &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete_selection
</UL>
<BR>[Called By]<UL><LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_cut
</UL>

<P><STRONG><a name="[b81]"></a>stb_textedit_delete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, text_edit.o(i.stb_textedit_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = stb_textedit_delete &rArr; stb_text_makeundo_delete &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_remove
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete_selection
</UL>

<P><STRONG><a name="[b80]"></a>stb_textedit_delete_selection</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_delete_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stb_textedit_delete_selection &rArr; stb_textedit_delete &rArr; stb_text_makeundo_delete &rArr; stb_text_createundo &rArr; stb_text_create_undo_record &rArr; stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste_internal
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_cut
</UL>

<P><STRONG><a name="[b7d]"></a>stb_textedit_discard_redo</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, text_edit.o(i.stb_textedit_discard_redo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stb_textedit_discard_redo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_undo
</UL>

<P><STRONG><a name="[b71]"></a>stb_textedit_discard_undo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_discard_undo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stb_textedit_discard_undo &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_create_undo_record
</UL>

<P><STRONG><a name="[b85]"></a>stb_textedit_drag</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, text_edit.o(i.stb_textedit_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stb_textedit_drag &rArr; stb_text_locate_coord &rArr; text_edit_get_char_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_locate_coord
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_drag
</UL>

<P><STRONG><a name="[b86]"></a>stb_textedit_find_charpos</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, text_edit.o(i.stb_textedit_find_charpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stb_textedit_find_charpos &rArr; text_edit_get_char_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_char_width
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b70]"></a>stb_textedit_flush_redo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, text_edit.o(i.stb_textedit_flush_redo))
<BR><BR>[Called By]<UL><LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_create_undo_record
</UL>

<P><STRONG><a name="[b87]"></a>stb_textedit_initialize_state</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_initialize_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stb_textedit_initialize_state
</UL>
<BR>[Calls]<UL><LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_clear_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_create
</UL>

<P><STRONG><a name="[b89]"></a>stb_textedit_key</STRONG> (Thumb, 1654 bytes, Stack size 96 bytes, text_edit.o(i.stb_textedit_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = stb_textedit_key &rArr; stb_text_undo &rArr; text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_remove
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_for_stb
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_insert
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_char_width
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_prep_selection_at_cursor
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_word_previous
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_word_next
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_last
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_first
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_find_charpos
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete_selection
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_clamp
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_undo
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_redo
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_replace
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
</UL>

<P><STRONG><a name="[b8a]"></a>stb_textedit_move_to_first</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, text_edit.o(i.stb_textedit_move_to_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stb_textedit_move_to_first
</UL>
<BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_sortselection
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b8b]"></a>stb_textedit_move_to_last</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_move_to_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stb_textedit_move_to_last &rArr; stb_textedit_clamp
</UL>
<BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_sortselection
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b8e]"></a>stb_textedit_move_to_word_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_move_to_word_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stb_textedit_move_to_word_next &rArr; is_word_boundary &rArr; iswspace &rArr; _iswspace &rArr; _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_boundary
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b8d]"></a>stb_textedit_move_to_word_previous</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, text_edit.o(i.stb_textedit_move_to_word_previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stb_textedit_move_to_word_previous &rArr; is_word_boundary &rArr; iswspace &rArr; _iswspace &rArr; _wclass &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_boundary
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b90]"></a>stb_textedit_paste</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, text_edit.o(i.stb_textedit_paste))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = stb_textedit_paste &rArr; stb_textedit_paste_internal &rArr; text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paste
</UL>

<P><STRONG><a name="[b91]"></a>stb_textedit_paste_internal</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, text_edit.o(i.stb_textedit_paste_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stb_textedit_paste_internal &rArr; text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_insert
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete_selection
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_clamp
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_makeundo_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste
</UL>

<P><STRONG><a name="[b8c]"></a>stb_textedit_prep_selection_at_cursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, text_edit.o(i.stb_textedit_prep_selection_at_cursor))
<BR><BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
</UL>

<P><STRONG><a name="[b8f]"></a>stb_textedit_sortselection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, text_edit.o(i.stb_textedit_sortselection))
<BR><BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_last
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_move_to_first
</UL>

<P><STRONG><a name="[c88]"></a>text_edit_calc_x</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_calc_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = text_edit_calc_x &rArr; text_edit_measure_text &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_align_h
<LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_measure_text
</UL>
<BR>[Called By]<UL><LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
</UL>

<P><STRONG><a name="[c90]"></a>text_edit_do_paint</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_do_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = text_edit_do_paint &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
<LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_text
<LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_caret
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
</UL>

<P><STRONG><a name="[b75]"></a>text_edit_get_char_width</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_get_char_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = text_edit_get_char_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_find_charpos
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_locate_coord
</UL>

<P><STRONG><a name="[b7b]"></a>text_edit_insert</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = text_edit_insert &rArr; wstr_insert &rArr; wstr_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_paste_internal
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_undo
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_redo
</UL>

<P><STRONG><a name="[b74]"></a>text_edit_layout_for_stb</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, text_edit.o(i.text_edit_layout_for_stb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = text_edit_layout_for_stb &rArr; rows_find_by_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rows_find_by_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_find_charpos
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_drag
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_click
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_locate_coord
</UL>

<P><STRONG><a name="[c96]"></a>text_edit_layout_line</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_layout_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = text_edit_layout_line &rArr; text_edit_multi_line_layout_line &rArr; line_break_check &rArr; is_line_breakable &rArr; set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_multi_line_layout_line
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>

<P><STRONG><a name="[c8a]"></a>text_edit_measure_text</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, text_edit.o(i.text_edit_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = text_edit_measure_text &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
</UL>
<BR>[Called By]<UL><LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_calc_x
</UL>

<P><STRONG><a name="[c9a]"></a>text_edit_multi_line_layout_line</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, text_edit.o(i.text_edit_multi_line_layout_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = text_edit_multi_line_layout_line &rArr; line_break_check &rArr; is_line_breakable &rArr; set_linebreaks_utf32 &rArr; set_linebreaks &rArr; lb_init_break_context &rArr; get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_break_check
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_break_check
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_caret_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_line
</UL>

<P><STRONG><a name="[c8b]"></a>text_edit_normalize_point</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_normalize_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = text_edit_normalize_point &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_drag
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_click
</UL>

<P><STRONG><a name="[c97]"></a>text_edit_notify</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, text_edit.o(i.text_edit_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = text_edit_notify &rArr; text_edit_get_state &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_get_state
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_offset
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>

<P><STRONG><a name="[c92]"></a>text_edit_paint_caret</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, text_edit.o(i.text_edit_paint_caret))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = text_edit_paint_caret &rArr; canvas_draw_vline &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_do_paint
</UL>

<P><STRONG><a name="[c9c]"></a>text_edit_paint_line</STRONG> (Thumb, 406 bytes, Stack size 120 bytes, text_edit.o(i.text_edit_paint_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = text_edit_paint_line &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_calc_x
</UL>
<BR>[Called By]<UL><LI><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_real_text
</UL>

<P><STRONG><a name="[c9d]"></a>text_edit_paint_real_text</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, text_edit.o(i.text_edit_paint_real_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = text_edit_paint_real_text &rArr; text_edit_paint_line &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_line
</UL>
<BR>[Called By]<UL><LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_text
</UL>

<P><STRONG><a name="[c91]"></a>text_edit_paint_text</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, text_edit.o(i.text_edit_paint_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = text_edit_paint_text &rArr; text_edit_paint_real_text &rArr; text_edit_paint_line &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[c9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_tips_text
<LI><a href="#[c9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_real_text
</UL>
<BR>[Called By]<UL><LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_do_paint
</UL>

<P><STRONG><a name="[c9e]"></a>text_edit_paint_tips_text</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, text_edit.o(i.text_edit_paint_tips_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = text_edit_paint_tips_text &rArr; canvas_draw_text_in_rect &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint_text
</UL>

<P><STRONG><a name="[b7a]"></a>text_edit_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, text_edit.o(i.text_edit_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = text_edit_remove &rArr; wstr_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_key
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_textedit_delete
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_undo
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stb_text_redo
</UL>

<P><STRONG><a name="[c9b]"></a>text_edit_set_caret_pos</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, text_edit.o(i.text_edit_set_caret_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = text_edit_set_caret_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[c9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_multi_line_layout_line
</UL>

<P><STRONG><a name="[c99]"></a>text_edit_single_line_layout_line</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, text_edit.o(i.text_edit_single_line_layout_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = text_edit_single_line_layout_line &rArr; text_edit_calc_x &rArr; text_edit_measure_text &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_text_align_h
<LI><a href="#[c9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_caret_pos
<LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_measure_text
<LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_calc_x
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout_line
</UL>

<P><STRONG><a name="[c89]"></a>widget_get_text_align_h</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, text_edit.o(i.widget_get_text_align_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = widget_get_text_align_h &rArr; style_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[c99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_single_line_layout_line
<LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_calc_x
</UL>

<P><STRONG><a name="[c95]"></a>widget_get_text_layout_info</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, text_edit.o(i.widget_get_text_layout_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = widget_get_text_layout_info &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_layout
</UL>

<P><STRONG><a name="[2ea]"></a>self_layouter_menu_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, self_layouter_menu.o(i.self_layouter_menu_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = self_layouter_menu_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> self_layouter_menu.o(.constdata)
</UL>
<P><STRONG><a name="[d90]"></a>widget_layout_calc</STRONG> (Thumb, 538 bytes, Stack size 44 bytes, self_layouter_menu.o(i.widget_layout_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = widget_layout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_self_menu_with_rect
</UL>

<P><STRONG><a name="[af6]"></a>widget_layout_self_get_trigger</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, self_layouter_menu.o(i.widget_layout_self_get_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = widget_layout_self_get_trigger &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_manager
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_layouter_menu_layout
</UL>

<P><STRONG><a name="[104]"></a>input_engine_pinyin_input(_input_engine_t*, int)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, input_engine_pinyin.o(i._Z25input_engine_pinyin_inputP15_input_engine_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = input_engine_pinyin_input(_input_engine_t*, int) &rArr; im_search &rArr; ime_pinyin::MatrixSearch::search(const char*, unsigned) &rArr; ime_pinyin::MatrixSearch::reset_search(unsigned, bool, bool, bool) &rArr; ime_pinyin::MatrixSearch::add_char(char) &rArr; ime_pinyin::MatrixSearch::add_char_qwerty() &rArr; ime_pinyin::MatrixSearch::extend_dmi(ime_pinyin::DictExtPara*, ime_pinyin::DictMatchInfo*) &rArr; ime_pinyin::myqsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_string
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_search
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_engine_pinyin.o(i.input_engine_create)
</UL>
<P><STRONG><a name="[103]"></a>input_engine_pinyin_reset_input(_input_engine_t*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, input_engine_pinyin.o(i._Z31input_engine_pinyin_reset_inputP15_input_engine_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = input_engine_pinyin_reset_input(_input_engine_t*) &rArr; im_reset_search &rArr; ime_pinyin::MatrixSearch::reset_search() &rArr; ime_pinyin::MatrixSearch::reset_search0()
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_reset_search
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_engine_pinyin.o(i.input_engine_create)
</UL>
<P><STRONG><a name="[50a]"></a>input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 224 bytes, input_engine_pinyin.o(i._Z33input_engine_pinyin_add_candidateP15_input_engine_tP10_wbuffer_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = input_engine_pinyin_add_candidate(_input_engine_t*, _wbuffer_t*, unsigned) &rArr; im_get_candidate &rArr; ime_pinyin::MatrixSearch::get_candidate(unsigned, unsigned short*, unsigned) &rArr; ime_pinyin::MatrixSearch::get_candidate0(unsigned short*, unsigned, unsigned short*, bool) &rArr; ime_pinyin::MatrixSearch::get_lemma_str(unsigned, unsigned short*, unsigned short) &rArr; utf16_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbuffer_write_string
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_get_candidate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_engine_pinyin_input(_input_engine_t*, int)
</UL>

<P><STRONG><a name="[12b]"></a>main_loop_raw_destroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main_loop_stm32_raw.o(i.main_loop_raw_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main_loop_raw_destroy &rArr; main_loop_simple_reset &rArr; canvas_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_simple_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop_stm32_raw.o(i.main_loop_init)
</UL>
<P><STRONG><a name="[12c]"></a>main_loop_raw_dispatch</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main_loop_stm32_raw.o(i.main_loop_raw_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = main_loop_raw_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_disaptch_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop_stm32_raw.o(i.main_loop_init)
</UL>
<P><STRONG><a name="[99f]"></a>main_loop_raw_init_canvas</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main_loop_stm32_raw.o(i.main_loop_raw_init_canvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main_loop_raw_init_canvas &rArr; platform_create_lcd &rArr; stm32f769_create_lcd &rArr; lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_init
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop_init
</UL>

<P><STRONG><a name="[61a]"></a>bkgnd_change</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, window_main.o(i.bkgnd_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = bkgnd_change &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_delay_in
</UL>

<P><STRONG><a name="[620]"></a>bkgnd_image_fade_in</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, window_main.o(i.bkgnd_image_fade_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bkgnd_image_fade_in &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_delay_in
</UL>

<P><STRONG><a name="[624]"></a>bkgnd_image_fade_out</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, window_main.o(i.bkgnd_image_fade_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bkgnd_image_fade_out &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bkgnd_update
</UL>

<P><STRONG><a name="[5e0]"></a>change_locale</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, window_main.o(i.change_locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = change_locale &rArr; locale_info_change &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_change
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_language
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[5df]"></a>init_children_widget</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, window_main.o(i.init_children_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_children_widget &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f0]"></a>init_widget</STRONG> (Thumb, 748 bytes, Stack size 88 bytes, window_main.o(i.init_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = init_widget &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_repeat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_children_widget)
</UL>
<P><STRONG><a name="[94f]"></a>label_add</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, window_main.o(i.label_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_to_int
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_temperature_inc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_temperature_dec
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_humidity_inc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_humidity_dec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_frequency_inc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_frequency_dec
</UL>

<P><STRONG><a name="[957]"></a>label_set_random_double</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, window_main.o(i.label_set_random_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = label_set_random_double &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
</UL>

<P><STRONG><a name="[959]"></a>label_set_random_int</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, window_main.o(i.label_set_random_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = label_set_random_int &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_itoa
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
</UL>

<P><STRONG><a name="[a48]"></a>on_alarm_off</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, window_main.o(i.on_alarm_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_alarm_off &rArr; widget_set_visible &rArr; widget_set_visible_self &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
</UL>

<P><STRONG><a name="[a49]"></a>on_alarm_on</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, window_main.o(i.on_alarm_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_alarm_on &rArr; widget_set_visible &rArr; widget_set_visible_self &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reading_update
</UL>

<P><STRONG><a name="[f5]"></a>on_auto</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, window_main.o(i.on_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = on_auto &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[142]"></a>on_bkgnd_delay_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, window_main.o(i.on_bkgnd_delay_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = on_bkgnd_delay_in &rArr; bkgnd_change &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_in
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.on_bkgnd_update)
</UL>
<P><STRONG><a name="[141]"></a>on_bkgnd_update</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, window_main.o(i.on_bkgnd_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = on_bkgnd_update &rArr; bkgnd_image_fade_out &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkgnd_image_fade_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.on_auto)
</UL>
<P><STRONG><a name="[fa]"></a>on_frequency_dec</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window_main.o(i.on_frequency_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_frequency_dec &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[f9]"></a>on_frequency_inc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, window_main.o(i.on_frequency_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_frequency_inc &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[fe]"></a>on_humidity_dec</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window_main.o(i.on_humidity_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_humidity_dec &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[fd]"></a>on_humidity_inc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, window_main.o(i.on_humidity_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_humidity_inc &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[ab]"></a>on_language</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, window_main.o(i.on_language))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = on_language &rArr; change_locale &rArr; locale_info_change &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_locale
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.application_init)
</UL>
<P><STRONG><a name="[143]"></a>on_reading_update</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, window_main.o(i.on_reading_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + Unknown Stack Size
<LI>Call Chain = on_reading_update &rArr; label_set_random_double &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_on
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_alarm_off
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_int
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_set_random_double
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.on_switch)
</UL>
<P><STRONG><a name="[f7]"></a>on_record</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, window_main.o(i.on_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = on_record &rArr; open_record_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_record_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[f8]"></a>on_setting</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, window_main.o(i.on_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = on_setting &rArr; open_setting_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_setting_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[f4]"></a>on_switch</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, window_main.o(i.on_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = on_switch &rArr; on_wind_on &rArr; widget_animator_get &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_on
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_wind_off
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[ac]"></a>on_systime_update</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, window_main.o(i.on_systime_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = on_systime_update &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.application_init)
</UL>
<P><STRONG><a name="[fc]"></a>on_temperature_dec</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window_main.o(i.on_temperature_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_temperature_dec &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[fb]"></a>on_temperature_inc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, window_main.o(i.on_temperature_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = on_temperature_inc &rArr; label_add &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[f6]"></a>on_timing</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, window_main.o(i.on_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = on_timing &rArr; open_timing_window &rArr; window_open &rArr; window_open_and_close &rArr; window_open_with_expr &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_timing_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_main.o(i.init_widget)
</UL>
<P><STRONG><a name="[a50]"></a>on_wind_off</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, window_main.o(i.on_wind_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = on_wind_off &rArr; widget_animator_stop_with_name &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_set_rotation
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_pause
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_stop_with_name
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
</UL>

<P><STRONG><a name="[a4f]"></a>on_wind_on</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, window_main.o(i.on_wind_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = on_wind_on &rArr; widget_animator_get &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_yoyo
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_set_repeat
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_play
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_switch
</UL>

<P><STRONG><a name="[91a]"></a>time_now_str</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, window_main.o(i.time_now_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = time_now_str &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_systime_update
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_widget
</UL>

<P><STRONG><a name="[917]"></a>init_children_widget</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, window_record.o(i.init_children_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_children_widget &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_record_window
</UL>

<P><STRONG><a name="[f1]"></a>init_widget</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, window_record.o(i.init_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_widget &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_record.o(i.init_children_widget)
</UL>
<P><STRONG><a name="[ff]"></a>on_close</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_record.o(i.on_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = on_close &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_record.o(i.init_widget)
</UL>
<P><STRONG><a name="[918]"></a>init_children_widget</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, window_setting.o(i.init_children_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_children_widget &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_setting_window
</UL>

<P><STRONG><a name="[f2]"></a>init_widget</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, window_setting.o(i.init_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_widget &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_setting.o(i.init_children_widget)
</UL>
<P><STRONG><a name="[100]"></a>on_close</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, window_setting.o(i.on_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = on_close &rArr; window_close &rArr; window_manager_close_window &rArr; window_manager_check_if_need_close_animation &rArr; window_manager_create_animator &rArr; window_manager_prepare_dialog_highlighter &rArr; window_manager_snap_prev_window &rArr; window_manager_paint_system_bar &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_setting.o(i.init_widget)
</UL>
<P><STRONG><a name="[919]"></a>init_children_widget</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, window_timing.o(i.init_children_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_children_widget &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_timing_window
</UL>

<P><STRONG><a name="[f3]"></a>init_widget</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, window_timing.o(i.init_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_widget &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_timing.o(i.init_children_widget)
</UL>
<P><STRONG><a name="[102]"></a>on_cancle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, window_timing.o(i.on_cancle))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = on_cancle &rArr; dialog_quit &rArr; is_dialog_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_timing.o(i.init_widget)
</UL>
<P><STRONG><a name="[101]"></a>on_ok</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, window_timing.o(i.on_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = on_ok &rArr; dialog_quit &rArr; is_dialog_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_quit
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_text_selector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window_timing.o(i.init_widget)
</UL>
<P><STRONG><a name="[a4b]"></a>save_text_selector</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, window_timing.o(i.save_text_selector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = save_text_selector &rArr; widget_lookup &rArr; widget_lookup_child
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ok
</UL>

<P><STRONG><a name="[a56]"></a>set_text_selector</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, window_timing.o(i.set_text_selector))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = set_text_selector &rArr; text_selector_set_value &rArr; text_selector_set_selected_index &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_timing_window
</UL>

<P><STRONG><a name="[87a]"></a>get_char_lb_class</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, linebreak.o(i.get_char_lb_class))
<BR><BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_lang
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_default
</UL>

<P><STRONG><a name="[879]"></a>get_char_lb_class_default</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, linebreak.o(i.get_char_lb_class_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_lang
</UL>

<P><STRONG><a name="[87b]"></a>get_char_lb_class_lang</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, linebreak.o(i.get_char_lb_class_lang))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = get_char_lb_class_lang &rArr; get_char_lb_class_default &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class_default
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_lb_class
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_init_break_context
</UL>

<P><STRONG><a name="[87c]"></a>get_lb_prop_lang</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, linebreak.o(i.get_lb_prop_lang))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_lb_prop_lang &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_init_break_context
</UL>

<P><STRONG><a name="[87e]"></a>get_lb_result_lookup</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, linebreak.o(i.get_lb_result_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = get_lb_result_lookup &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
</UL>

<P><STRONG><a name="[95f]"></a>get_lb_result_simple</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, linebreak.o(i.get_lb_result_simple))
<BR><BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
</UL>

<P><STRONG><a name="[95c]"></a>resolve_lb_class</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, linebreak.o(i.resolve_lb_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = resolve_lb_class &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_init_break_context
</UL>

<P><STRONG><a name="[95d]"></a>treat_first_char</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, linebreak.o(i.treat_first_char))
<BR><BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_process_next_char
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lb_init_break_context
</UL>

<P><STRONG><a name="[b00]"></a>get_char_wb_class</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, wordbreak.o(i.get_char_wb_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_char_wb_class
</UL>
<BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
</UL>

<P><STRONG><a name="[afc]"></a>set_brks_to</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wordbreak.o(i.set_brks_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = set_brks_to &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks
</UL>

<P><STRONG><a name="[aff]"></a>set_wordbreaks</STRONG> (Thumb, 1084 bytes, Stack size 80 bytes, wordbreak.o(i.set_wordbreaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = set_wordbreaks &rArr; set_brks_to &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brks_to
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_wb_class
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ub_is_extended_pictographic
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wordbreaks_utf32
</UL>

<P><STRONG><a name="[9d6]"></a>nvg__absf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nanovg.o(i.nvg__absf))
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
</UL>

<P><STRONG><a name="[9e1]"></a>nvg__acosf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvg__acosf &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[a26]"></a>nvg__addPath</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nanovg.o(i.nvg__addPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvg__addPath &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a27]"></a>nvg__addPoint</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nanovg.o(i.nvg__addPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvg__addPoint &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPoint
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[9f0]"></a>nvg__allocPathCache</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nanovg.o(i.nvg__allocPathCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__allocPathCache &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[a2a]"></a>nvg__allocTempVerts</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nanovg.o(i.nvg__allocTempVerts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
</UL>

<P><STRONG><a name="[9db]"></a>nvg__appendCommands</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, nanovg.o(i.nvg__appendCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMoveTo
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[9e4]"></a>nvg__atan2f</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg.o(i.nvg__atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvg__atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[a1d]"></a>nvg__clampf</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvg__clampf))
<BR><BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[9ea]"></a>nvg__clearPathCache</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nanovg.o(i.nvg__clearPathCache))
<BR><BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>

<P><STRONG><a name="[a2c]"></a>nvg__closePath</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__closePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvg__closePath
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a10]"></a>nvg__compositeOperationState</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, nanovg.o(i.nvg__compositeOperationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvg__compositeOperationState
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[9d9]"></a>nvg__cosf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nvg__cosf &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
</UL>

<P><STRONG><a name="[9e3]"></a>nvg__cross</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__cross))
<BR><BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[a2d]"></a>nvg__curveDivs</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nanovg.o(i.nvg__curveDivs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvg__curveDivs &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxi
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
</UL>

<P><STRONG><a name="[9f1]"></a>nvg__deletePathCache</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nanovg.o(i.nvg__deletePathCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
</UL>

<P><STRONG><a name="[9de]"></a>nvg__distPtSeg</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, nanovg.o(i.nvg__distPtSeg))
<BR><BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[9f9]"></a>nvg__expandFill</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, nanovg.o(i.nvg__expandFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvg__expandFill &rArr; nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__vset
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>

<P><STRONG><a name="[a1e]"></a>nvg__expandStroke</STRONG> (Thumb, 618 bytes, Stack size 112 bytes, nanovg.o(i.nvg__expandStroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nvg__expandStroke &rArr; nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__vset
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[9f8]"></a>nvg__flattenPaths</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, nanovg.o(i.nvg__flattenPaths))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyReverse
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyArea
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__pathWinding
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__minf
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPoint
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__closePath
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>

<P><STRONG><a name="[a1c]"></a>nvg__getAverageScale</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nanovg.o(i.nvg__getAverageScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__getAverageScale &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[9f7]"></a>nvg__getState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nanovg.o(i.nvg__getState))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeWidth
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMiterLimit
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineJoin
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineCap
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGlobalAlpha
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontSize
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>

<P><STRONG><a name="[a28]"></a>nvg__lastPath</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__lastPath))
<BR><BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__pathWinding
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__closePath
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[a29]"></a>nvg__lastPoint</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvg__lastPoint))
<BR><BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[a06]"></a>nvg__maxf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg.o(i.nvg__maxf))
<BR><BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[9d8]"></a>nvg__maxi</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__maxi))
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
</UL>

<P><STRONG><a name="[a16]"></a>nvg__minf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg.o(i.nvg__minf))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[9d7]"></a>nvg__mini</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__mini))
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
</UL>

<P><STRONG><a name="[9e0]"></a>nvg__normalize</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nanovg.o(i.nvg__normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__normalize &rArr; nvg__sqrtf &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a30]"></a>nvg__pathWinding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__pathWinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvg__pathWinding
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a31]"></a>nvg__polyArea</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nanovg.o(i.nvg__polyArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__polyArea
</UL>
<BR>[Calls]<UL><LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__triarea2
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a32]"></a>nvg__polyReverse</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, nanovg.o(i.nvg__polyReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__polyReverse &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[9dd]"></a>nvg__ptEquals</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__ptEquals))
<BR><BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[9e8]"></a>nvg__setDevicePixelRatio</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__setDevicePixelRatio))
<BR><BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[9fb]"></a>nvg__setPaintColor</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nanovg.o(i.nvg__setPaintColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[a17]"></a>nvg__signf</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nanovg.o(i.nvg__signf))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[9da]"></a>nvg__sinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
</UL>

<P><STRONG><a name="[a33]"></a>nvg__sqrtf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__sqrtf &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
</UL>

<P><STRONG><a name="[9e2]"></a>nvg__tanf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nvg__tanf &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[a2f]"></a>nvg__tesselateBezier</STRONG> (Thumb, 458 bytes, Stack size 112 bytes, nanovg.o(i.nvg__tesselateBezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[a34]"></a>nvg__triarea2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__triarea2))
<BR><BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyArea
</UL>

<P><STRONG><a name="[a2e]"></a>nvg__vset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nanovg.o(i.nvg__vset))
<BR><BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
</UL>

<P><STRONG><a name="[37c]"></a>__sti___8_math_cpp_059a9964</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(i.__sti___8_math_cpp_059a9964))
<BR>[Address Reference Count : 1]<UL><LI> math.o(.init_array)
</UL>
<P><STRONG><a name="[580]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a614add_and_commitERPNS_17vector_rasterizer4cellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[57d]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a63addEPNS_17vector_rasterizer4cellEii))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[582]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a63setEPNS_17vector_rasterizer4cellEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[581]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a64setaEPNS_17vector_rasterizer4cellEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>

<P><STRONG><a name="[57c]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a67jump_xyERPNS_17vector_rasterizer4cellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[577]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_max&lang;int&rang;(T1&, T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a610update_maxIiEEvRT_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
</UL>

<P><STRONG><a name="[576]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_min&lang;int&rang;(T1&, T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a610update_minIiEEvRT_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
</UL>

<P><STRONG><a name="[58d]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a622sort_cells_x_ascendingIPNS_17vector_rasterizer4cellEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[57b]"></a>agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a69resize_byINS_10pod_vectorINS_17vector_rasterizer4cellEEEEEPS4_RT_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[4fa]"></a>nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[502]"></a>aggenvg__maxi(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z13aggenvg__maxiii))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
</UL>

<P><STRONG><a name="[4fb]"></a>to_pixel32_rgba(NVGcolor)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z15to_pixel32_rgba8NVGcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = to_pixel32_rgba(NVGcolor) &rArr; agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4fd]"></a>prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, nanovg_agge.o(i._Z17prepareRasterizerP14AGGENVGcontextP10NVGscissorP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*) &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[50b]"></a>aggenvg__findTexture(AGGENVGcontext*, int)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nanovg_agge.o(i._Z20aggenvg__findTextureP14AGGENVGcontexti))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderGetTextureSize(void*, int, int*, int*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)
<LI><a href="#[e29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[13d]"></a>aggenvg__renderFlush(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z20aggenvg__renderFlushPv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[501]"></a>aggenvg__allocTexture(AGGENVGcontext*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z21aggenvg__allocTextureP14AGGENVGcontext))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aggenvg__allocTexture(AGGENVGcontext*) &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__maxi(int, int)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderCreateTexture(void*, int, int, int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[13c]"></a>aggenvg__renderCancel(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z21aggenvg__renderCancelPv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[136]"></a>aggenvg__renderCreate(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z21aggenvg__renderCreatePv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[13e]"></a>aggenvg__renderDelete(void*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z21aggenvg__renderDeletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aggenvg__renderDelete(void*) &rArr; AGGENVGcontext::~AGGENVGcontext() &rArr; agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[506]"></a>aggenvg__deleteTexture(AGGENVGcontext*, int)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z22aggenvg__deleteTextureP14AGGENVGcontexti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aggenvg__deleteTexture(AGGENVGcontext*, int) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDeleteTexture(void*, int)
</UL>

<P><STRONG><a name="[13b]"></a>aggenvg__renderViewport(void*, float, float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z23aggenvg__renderViewportPvfff))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[137]"></a>aggenvg__renderCreateTexture(void*, int, int, int, int, const unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z28aggenvg__renderCreateTexturePviiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = aggenvg__renderCreateTexture(void*, int, int, int, int, const unsigned char*) &rArr; aggenvg__allocTexture(AGGENVGcontext*) &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[138]"></a>aggenvg__renderDeleteTexture(void*, int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z28aggenvg__renderDeleteTexturePvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aggenvg__renderDeleteTexture(void*, int) &rArr; aggenvg__deleteTexture(AGGENVGcontext*, int) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__deleteTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[139]"></a>aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z28aggenvg__renderUpdateTexturePviiiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*) &rArr; aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[13a]"></a>aggenvg__renderGetTextureSize(void*, int, int*, int*)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z29aggenvg__renderGetTextureSizePviPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aggenvg__renderGetTextureSize(void*, int, int*, int*) &rArr; aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[75d]"></a>color_component_create_image</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, color_component.o(i.color_component_create_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = color_component_create_image &rArr; bitmap_create_ex &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_create_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_create
</UL>

<P><STRONG><a name="[2ed]"></a>color_component_on_destroy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, color_component.o(i.color_component_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = color_component_on_destroy &rArr; bitmap_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_destroy
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_component.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>color_component_on_event</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, color_component.o(i.color_component_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = color_component_on_event &rArr; color_component_update_pressed &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_update_pressed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_component.o(.constdata)
</UL>
<P><STRONG><a name="[2eb]"></a>color_component_on_paint_self</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, color_component.o(i.color_component_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = color_component_on_paint_self &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_component.o(.constdata)
</UL>
<P><STRONG><a name="[762]"></a>color_component_set_type</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, color_component.o(i.color_component_set_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_component_set_type &rArr; color_component_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_paint_self
</UL>

<P><STRONG><a name="[c1]"></a>color_component_update_h</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, color_component.o(i.color_component_update_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = color_component_update_h &rArr; convertHSVtoRGB &rArr; convertHSVtoRGB_
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_component.o(i.color_component_set_type)
</UL>
<P><STRONG><a name="[761]"></a>color_component_update_pressed</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, color_component.o(i.color_component_update_pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = color_component_update_pressed &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_on_event
</UL>

<P><STRONG><a name="[c0]"></a>color_component_update_sv</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, color_component.o(i.color_component_update_sv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = color_component_update_sv &rArr; convertHSVtoRGB &rArr; convertHSVtoRGB_
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_cast
</UL>
<BR>[Address Reference Count : 3]<UL><LI> color_component.o(i.color_component_on_paint_self)
<LI> color_component.o(i.color_component_set_color)
<LI> color_component.o(i.color_component_set_type)
</UL>
<P><STRONG><a name="[2ee]"></a>color_picker_get_prop</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = color_picker_get_prop &rArr; value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>color_picker_hook_children</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_hook_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = color_picker_hook_children &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(i.color_picker_init_if_not_inited)
</UL>
<P><STRONG><a name="[774]"></a>color_picker_init_if_not_inited</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, color_picker.o(i.color_picker_init_if_not_inited))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = color_picker_init_if_not_inited &rArr; color_picker_sync_children &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_sync_children
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_paint_begin
</UL>

<P><STRONG><a name="[c2]"></a>color_picker_on_child_value_changing</STRONG> (Thumb, 978 bytes, Stack size 80 bytes, color_picker.o(i.color_picker_on_child_value_changing))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = color_picker_on_child_value_changing &rArr; color_picker_set_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_int
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_get_utf8
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_value
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_v
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_sv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_s
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_r
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_h
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_g
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_b
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_v
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_s
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_get_h
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(i.color_picker_hook_children)
</UL>
<P><STRONG><a name="[2f0]"></a>color_picker_on_paint_begin</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, color_picker.o(i.color_picker_on_paint_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = color_picker_on_paint_begin &rArr; color_picker_init_if_not_inited &rArr; color_picker_sync_children &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_init_if_not_inited
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(.constdata)
</UL>
<P><STRONG><a name="[77a]"></a>color_picker_set_color_b</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_set_color_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_b &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[779]"></a>color_picker_set_color_g</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_set_color_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_g &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[77b]"></a>color_picker_set_color_h</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, color_picker.o(i.color_picker_set_color_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_h &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[778]"></a>color_picker_set_color_r</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_set_color_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_r &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[77c]"></a>color_picker_set_color_s</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, color_picker.o(i.color_picker_set_color_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_s &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[780]"></a>color_picker_set_color_sv</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, color_picker.o(i.color_picker_set_color_sv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_sv &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[77d]"></a>color_picker_set_color_v</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, color_picker.o(i.color_picker_set_color_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = color_picker_set_color_v &rArr; color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertHSVtoRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_on_child_value_changing
</UL>

<P><STRONG><a name="[2ef]"></a>color_picker_set_prop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, color_picker.o(i.color_picker_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = color_picker_set_prop &rArr; color_picker_set_color &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(.constdata)
</UL>
<P><STRONG><a name="[776]"></a>color_picker_sync_children</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, color_picker.o(i.color_picker_sync_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = color_picker_sync_children &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_update_color
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_init_if_not_inited
</UL>

<P><STRONG><a name="[c4]"></a>color_picker_update_child</STRONG> (Thumb, 1344 bytes, Stack size 64 bytes, color_picker.o(i.color_picker_update_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = color_picker_update_child &rArr; widget_set_value &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_value
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tile_set_value
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_hex_str
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_set_int
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_enable
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_disable
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRGBtoHSV
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_component_set_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_picker.o(i.color_picker_sync_children)
</UL>
<P><STRONG><a name="[781]"></a>color_picker_update_color</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, color_picker.o(i.color_picker_update_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = color_picker_update_color &rArr; color_hex_str &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_hex_str
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_cast
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_sync_children
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_v
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_sv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_s
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_r
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_h
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_g
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_picker_set_color_b
</UL>

<P><STRONG><a name="[2f1]"></a>guage_get_prop</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, guage.o(i.guage_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = guage_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>guage_on_destroy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guage.o(i.guage_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = guage_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage.o(.constdata)
</UL>
<P><STRONG><a name="[2f3]"></a>guage_on_paint_self</STRONG> (Thumb, 78 bytes, Stack size 104 bytes, guage.o(i.guage_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = guage_on_paint_self &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>guage_set_prop</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, guage.o(i.guage_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = guage_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_type_find
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_image
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_set_draw_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>image_animation_delay_play</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_delay_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = image_animation_delay_play &rArr; image_animation_play &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_play
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(i.image_animation_start_init_if_not_inited)
</UL>
<P><STRONG><a name="[2f5]"></a>image_animation_get_prop</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, image_animation.o(i.image_animation_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = image_animation_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(.constdata)
</UL>
<P><STRONG><a name="[8e2]"></a>image_animation_load_image</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, image_animation.o(i.image_animation_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = image_animation_load_image &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strncpy
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_get_image_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
</UL>

<P><STRONG><a name="[8ef]"></a>image_animation_next</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, image_animation.o(i.image_animation_next))
<BR><BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
</UL>

<P><STRONG><a name="[2f8]"></a>image_animation_on_destroy</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = image_animation_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>image_animation_on_paint_self</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, image_animation.o(i.image_animation_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = image_animation_on_paint_self &rArr; image_animation_load_image &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_down
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_add
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_start_init_if_not_inited
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_load_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>image_animation_on_update</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_on_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = image_animation_on_update &rArr; image_animation_update &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(i.image_animation_play)
</UL>
<P><STRONG><a name="[8ee]"></a>image_animation_restart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, image_animation.o(i.image_animation_restart))
<BR><BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_update
</UL>

<P><STRONG><a name="[2f6]"></a>image_animation_set_prop</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, image_animation.o(i.image_animation_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = image_animation_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_unload_after_paint
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_sequence
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_loop
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_interval
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_image
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_format
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_delay
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_set_auto_play
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(.constdata)
</UL>
<P><STRONG><a name="[8e3]"></a>image_animation_start_init_if_not_inited</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, image_animation.o(i.image_animation_start_init_if_not_inited))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = image_animation_start_init_if_not_inited &rArr; image_animation_play &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_play
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_on_paint_self
</UL>

<P><STRONG><a name="[e8]"></a>on_idle_unload_image</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, image_animation.o(i.on_idle_unload_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = on_idle_unload_image &rArr; widget_unload_image &rArr; widget_get_image_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_image
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_animation_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_animation.o(i.image_animation_on_paint_self)
</UL>
<P><STRONG><a name="[6a3]"></a>candidates_calc_child_width</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, candidates.o(i.candidates_calc_child_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = candidates_calc_child_width &rArr; canvas_measure_text &rArr; canvas_measure_text_default &rArr; font_get_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
</UL>

<P><STRONG><a name="[6aa]"></a>candidates_create_button</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, candidates.o(i.candidates_create_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = candidates_create_button &rArr; button_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_ensure_children
</UL>

<P><STRONG><a name="[6ab]"></a>candidates_ensure_children</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, candidates.o(i.candidates_ensure_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = candidates_ensure_children &rArr; candidates_create_button &rArr; button_create &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_create_button
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
</UL>

<P><STRONG><a name="[2f9]"></a>candidates_get_prop</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, candidates.o(i.candidates_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = candidates_get_prop &rArr; hscrollable_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_get_prop
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[2fd]"></a>candidates_invalidate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, candidates.o(i.candidates_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = candidates_invalidate &rArr; hscrollable_invalidate &rArr; rect_intersect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_invalidate
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>candidates_on_button_click</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, candidates.o(i.candidates_on_button_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = candidates_on_button_click &rArr; suggest_words_find &rArr; suggest_words_update &rArr; wbuffer_write_string &rArr; wbuffer_write_binary &rArr; wbuffer_extend_delta &rArr; wbuffer_extend_capacity &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_candidates
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suggest_words_find
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_from_utf16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(i.candidates_create_button)
</UL>
<P><STRONG><a name="[2ff]"></a>candidates_on_destroy_default</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, candidates.o(i.candidates_on_destroy_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = candidates_on_destroy_default &rArr; input_method_off &rArr; emitter_off &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_off
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_destroy
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>candidates_on_event</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, candidates.o(i.candidates_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = candidates_on_event &rArr; hscrollable_on_event &rArr; hscrollable_on_pointer_up &rArr; hscrollable_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_event
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>candidates_on_im_candidates_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, candidates.o(i.candidates_on_im_candidates_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = candidates_on_im_candidates_event &rArr; candidates_update_candidates &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(i.candidates_create)
</UL>
<P><STRONG><a name="[2fc]"></a>candidates_on_paint_children</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, candidates.o(i.candidates_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = candidates_on_paint_children &rArr; hscrollable_on_paint_children &rArr; widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_on_paint_children
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[2fb]"></a>candidates_on_paint_self</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, candidates.o(i.candidates_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = candidates_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[6b6]"></a>candidates_relayout_children</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, candidates.o(i.candidates_relayout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = candidates_relayout_children &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_xoffset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_virtual_w
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_calc_child_width
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_update_candidates
</UL>

<P><STRONG><a name="[2fa]"></a>candidates_set_prop</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, candidates.o(i.candidates_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = candidates_set_prop &rArr; hscrollable_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscrollable_set_prop
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candidates.o(.constdata)
</UL>
<P><STRONG><a name="[6b4]"></a>candidates_update_candidates</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, candidates.o(i.candidates_update_candidates))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = candidates_update_candidates &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_cast
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_relayout_children
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_ensure_children
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;candidates_on_im_candidates_event
</UL>

<P><STRONG><a name="[10e]"></a>keyboard_hook_buttons</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, keyboard.o(i.keyboard_hook_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = keyboard_hook_buttons &rArr; keyboard_update_action_buton_info &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_cast
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.keyboard_on_load)
</UL>
<P><STRONG><a name="[10c]"></a>keyboard_on_action_info</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, keyboard.o(i.keyboard_on_action_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = keyboard_on_action_info &rArr; keyboard_update_action_buton_info &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_cast
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_update_action_buton_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.keyboard_create)
</UL>
<P><STRONG><a name="[10d]"></a>keyboard_on_button_click</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, keyboard.o(i.keyboard_on_button_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = keyboard_on_button_click &rArr; keyboard_set_active_page &rArr; pages_set_active_by_name &rArr; pages_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_key
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_dispatch_action
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_commit_text
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_set_active_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.keyboard_hook_buttons)
</UL>
<P><STRONG><a name="[300]"></a>keyboard_on_destroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, keyboard.o(i.keyboard_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = keyboard_on_destroy &rArr; window_base_on_destroy &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_base_on_destroy
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>keyboard_on_load</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, keyboard.o(i.keyboard_on_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = keyboard_on_load &rArr; widget_foreach &rArr;  widget_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_foreach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.keyboard_create)
</UL>
<P><STRONG><a name="[94c]"></a>keyboard_set_active_page</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, keyboard.o(i.keyboard_set_active_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = keyboard_set_active_page &rArr; pages_set_active_by_name &rArr; pages_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_set_active_by_name
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_button_click
</UL>

<P><STRONG><a name="[94b]"></a>keyboard_update_action_buton_info</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, keyboard.o(i.keyboard_update_action_buton_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = keyboard_update_action_buton_info &rArr; widget_set_text_utf8 &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_on_action_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_hook_buttons
</UL>

<P><STRONG><a name="[ab5]"></a>rich_text_ensure_render_node</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, rich_text.o(i.rich_text_ensure_render_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = rich_text_ensure_render_node &rArr; rich_text_render_node_layout &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_layout
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_self
</UL>

<P><STRONG><a name="[304]"></a>rich_text_on_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rich_text.o(i.rich_text_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rich_text_on_destroy &rArr; rich_text_reset &rArr; rich_text_node_destroy &rArr; rich_text_text_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>rich_text_on_event</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rich_text.o(i.rich_text_on_event))
<BR>[Address Reference Count : 1]<UL><LI> rich_text.o(.constdata)
</UL>
<P><STRONG><a name="[302]"></a>rich_text_on_paint_self</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rich_text.o(i.rich_text_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = rich_text_on_paint_self &rArr; rich_text_ensure_render_node &rArr; rich_text_render_node_layout &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_text
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_ensure_render_node
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text.o(.constdata)
</UL>
<P><STRONG><a name="[ac0]"></a>rich_text_on_paint_text</STRONG> (Thumb, 316 bytes, Stack size 120 bytes, rich_text.o(i.rich_text_on_paint_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = rich_text_on_paint_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_align
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_is_flexable_w_char
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_paint_self
</UL>

<P><STRONG><a name="[abf]"></a>rich_text_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rich_text.o(i.rich_text_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rich_text_reset &rArr; rich_text_node_destroy &rArr; rich_text_text_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_render_node_destroy
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_node_destroy
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_text
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_on_destroy
</UL>

<P><STRONG><a name="[301]"></a>rich_text_set_prop</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rich_text.o(i.rich_text_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = rich_text_set_prop &rArr; rich_text_set_text &rArr; rich_text_parse &rArr; xml_parser_parse &rArr; xml_parser_parse_start_tag &rArr; xml_parser_parse_attrs &rArr; xml_parser_strdup &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_set_text
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text.o(.constdata)
</UL>
<P><STRONG><a name="[682]"></a>builder_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rich_text_parser.o(i.builder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = builder_init &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_parse
</UL>

<P><STRONG><a name="[b5]"></a>xml_rich_text_destroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rich_text_parser.o(i.xml_rich_text_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xml_rich_text_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text_parser.o(i.builder_init)
</UL>
<P><STRONG><a name="[b2]"></a>xml_rich_text_on_end</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rich_text_parser.o(i.xml_rich_text_on_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xml_rich_text_on_end &rArr; xml_rich_text_pop_font &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_pop_font
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text_parser.o(i.builder_init)
</UL>
<P><STRONG><a name="[b4]"></a>xml_rich_text_on_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rich_text_parser.o(i.xml_rich_text_on_error))
<BR>[Address Reference Count : 1]<UL><LI> rich_text_parser.o(i.builder_init)
</UL>
<P><STRONG><a name="[b1]"></a>xml_rich_text_on_start</STRONG> (Thumb, 686 bytes, Stack size 56 bytes, rich_text_parser.o(i.xml_rich_text_on_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = xml_rich_text_on_start &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_atoi
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_parse
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_type_find
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_v_type_find
<LI><a href="#[e1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_push_font
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_node_append
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_image_create
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text_parser.o(i.builder_init)
</UL>
<P><STRONG><a name="[b3]"></a>xml_rich_text_on_text</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rich_text_parser.o(i.xml_rich_text_on_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xml_rich_text_on_text &rArr; str_decode_xml_entity_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_decode_xml_entity_with_len
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_text_create
<LI><a href="#[e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rich_text_node_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rich_text_parser.o(i.builder_init)
</UL>
<P><STRONG><a name="[e1e]"></a>xml_rich_text_pop_font</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rich_text_parser.o(i.xml_rich_text_pop_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xml_rich_text_pop_font &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_end
</UL>

<P><STRONG><a name="[e1f]"></a>xml_rich_text_push_font</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rich_text_parser.o(i.xml_rich_text_push_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xml_rich_text_push_font &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_rich_text_on_start
</UL>

<P><STRONG><a name="[307]"></a>list_item_on_destroy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, list_item.o(i.list_item_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_item_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_item.o(.constdata)
</UL>
<P><STRONG><a name="[306]"></a>list_item_on_event</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, list_item.o(i.list_item_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_item_on_event &rArr; list_item_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_remove_timer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_item.o(.constdata)
</UL>
<P><STRONG><a name="[305]"></a>list_item_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, list_item.o(i.list_item_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = list_item_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_item.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>list_item_on_timer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, list_item.o(i.list_item_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = list_item_on_timer &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_item.o(i.list_item_on_event)
</UL>
<P><STRONG><a name="[97f]"></a>list_item_remove_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, list_item.o(i.list_item_remove_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_item_remove_timer &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_on_event
</UL>

<P><STRONG><a name="[308]"></a>list_view_get_prop</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, list_view.o(i.list_view_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_view_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(.constdata)
</UL>
<P><STRONG><a name="[30b]"></a>list_view_on_add_child</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, list_view.o(i.list_view_on_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = list_view_on_add_child &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(.constdata)
</UL>
<P><STRONG><a name="[30c]"></a>list_view_on_event</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, list_view.o(i.list_view_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = list_view_on_event &rArr; scroll_bar_add_delta &rArr; scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_add_delta
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(.constdata)
</UL>
<P><STRONG><a name="[30a]"></a>list_view_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, list_view.o(i.list_view_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = list_view_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>list_view_on_scroll_bar_value_changed</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, list_view.o(i.list_view_on_scroll_bar_value_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = list_view_on_scroll_bar_value_changed &rArr; scroll_view_set_offset &rArr; scroll_view_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_offset
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_to_scroll_view
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(i.list_view_on_add_child)
</UL>
<P><STRONG><a name="[124]"></a>list_view_on_scroll_view_layout_children</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, list_view.o(i.list_view_on_scroll_view_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = list_view_on_scroll_view_layout_children &rArr; widget_set_children_layout &rArr; children_layouter_create &rArr; children_layouter_create_old &rArr; tokenizer_init &rArr; tokenizer_init_ex &rArr; str_init &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_children_layout
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_layout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(i.list_view_on_add_child)
</UL>
<P><STRONG><a name="[122]"></a>list_view_on_scroll_view_scroll</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, list_view.o(i.list_view_on_scroll_view_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = list_view_on_scroll_view_scroll &rArr; widget_set_opacity &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_only
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_opacity
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_to_scroll_bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(i.list_view_on_add_child)
</UL>
<P><STRONG><a name="[123]"></a>list_view_on_scroll_view_scroll_to</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, list_view.o(i.list_view_on_scroll_view_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = list_view_on_scroll_view_scroll_to &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_enable
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_disable
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_to
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_to_scroll_bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(i.list_view_on_add_child)
</UL>
<P><STRONG><a name="[309]"></a>list_view_set_prop</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, list_view.o(i.list_view_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = list_view_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view.o(.constdata)
</UL>
<P><STRONG><a name="[983]"></a>scroll_bar_to_scroll_view</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, list_view.o(i.scroll_bar_to_scroll_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scroll_bar_to_scroll_view &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_bar_value_changed
</UL>

<P><STRONG><a name="[985]"></a>scroll_view_to_scroll_bar</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, list_view.o(i.scroll_view_to_scroll_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scroll_view_to_scroll_bar &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll_to
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_on_scroll_view_scroll
</UL>

<P><STRONG><a name="[30d]"></a>list_view_h_get_prop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, list_view_h.o(i.list_view_h_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_view_h_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(.constdata)
</UL>
<P><STRONG><a name="[310]"></a>list_view_h_on_add_child</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, list_view_h.o(i.list_view_h_on_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_view_h_on_add_child &rArr; list_view_h_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(.constdata)
</UL>
<P><STRONG><a name="[311]"></a>list_view_h_on_event</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, list_view_h.o(i.list_view_h_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = list_view_h_on_event &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>list_view_h_on_paint_self</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, list_view_h.o(i.list_view_h_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = list_view_h_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>list_view_h_on_scroll_view_layout_children</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, list_view_h.o(i.list_view_h_on_scroll_view_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = list_view_h_on_scroll_view_layout_children &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_yslidable
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_xslidable
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_virtual_w
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(i.list_view_h_on_add_child)
</UL>
<P><STRONG><a name="[30e]"></a>list_view_h_set_prop</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, list_view_h.o(i.list_view_h_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = list_view_h_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_h_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_view_h.o(.constdata)
</UL>
<P><STRONG><a name="[add]"></a>scroll_bar_create_children</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_create_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create_children &rArr; widget_set_self_layout_params &rArr; widget_set_self_layout &rArr; self_layouter_create &rArr; func_call_parser_parse &rArr; tokenizer_next &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_repeat
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_create
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_use_style
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_name
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_create
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_self_layout_params
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_need_relayout_children
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_desktop
</UL>

<P><STRONG><a name="[ae0]"></a>scroll_bar_create_internal</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = scroll_bar_create_internal &rArr; widget_create &rArr; widget_init &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_create
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_mobile
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_create_desktop_self
</UL>

<P><STRONG><a name="[ae1]"></a>scroll_bar_desktop_on_click</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, scroll_bar.o(i.scroll_bar_desktop_on_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = scroll_bar_desktop_on_click &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_delta
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_event
</UL>

<P><STRONG><a name="[317]"></a>scroll_bar_desktop_on_event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_desktop_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = scroll_bar_desktop_on_event &rArr; scroll_bar_desktop_on_click &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_desktop_on_click
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[ae3]"></a>scroll_bar_destop_get_dragger_size</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_destop_get_dragger_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scroll_bar_destop_get_dragger_size &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_on_layout_children
</UL>

<P><STRONG><a name="[312]"></a>scroll_bar_get_prop</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = scroll_bar_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[ae4]"></a>scroll_bar_mobile_get_dragger_size</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_mobile_get_dragger_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scroll_bar_mobile_get_dragger_size &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_on_paint_self
</UL>

<P><STRONG><a name="[314]"></a>scroll_bar_mobile_on_paint_self</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_mobile_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scroll_bar_mobile_on_paint_self &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_mobile_get_dragger_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>scroll_bar_on_down_button_clicked</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_on_down_button_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = scroll_bar_on_down_button_clicked &rArr; scroll_bar_scroll_delta &rArr; scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_delta
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(i.scroll_bar_create_children)
</UL>
<P><STRONG><a name="[147]"></a>scroll_bar_on_drag</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, scroll_bar.o(i.scroll_bar_on_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = scroll_bar_on_drag &rArr; scroll_bar_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(i.scroll_bar_create_children)
</UL>
<P><STRONG><a name="[315]"></a>scroll_bar_on_layout_children</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, scroll_bar.o(i.scroll_bar_on_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = scroll_bar_on_layout_children &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragger_set_range
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_destop_get_dragger_size
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>scroll_bar_on_opactiy_animate_end</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_on_opactiy_animate_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scroll_bar_on_opactiy_animate_end &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_only
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(i.scroll_bar_scroll_to)
</UL>
<P><STRONG><a name="[145]"></a>scroll_bar_on_up_button_clicked</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scroll_bar.o(i.scroll_bar_on_up_button_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = scroll_bar_on_up_button_clicked &rArr; scroll_bar_scroll_delta &rArr; scroll_bar_add_delta_ex &rArr; scroll_bar_scroll_to &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_scroll_delta
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(i.scroll_bar_create_children)
</UL>
<P><STRONG><a name="[149]"></a>scroll_bar_on_value_animate_end</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_on_value_animate_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scroll_bar_on_value_animate_end &rArr; scroll_bar_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(i.scroll_bar_scroll_to)
</UL>
<P><STRONG><a name="[313]"></a>scroll_bar_set_prop</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, scroll_bar.o(i.scroll_bar_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = scroll_bar_set_prop &rArr; scroll_bar_update_dragger &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_update_dragger
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_bar.o(.constdata)
</UL>
<P><STRONG><a name="[ae7]"></a>scroll_bar_update_dragger</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, scroll_bar.o(i.scroll_bar_update_dragger))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = scroll_bar_update_dragger &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_destop_get_dragger_size
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_prop
</UL>

<P><STRONG><a name="[31f]"></a>scroll_view_find_target</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = scroll_view_find_target &rArr; widget_find_target_default &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target_default
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>scroll_view_fix_end_offset_default</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_fix_end_offset_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scroll_view_fix_end_offset_default &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(i.scroll_view_create)
</UL>
<P><STRONG><a name="[318]"></a>scroll_view_get_prop</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = scroll_view_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[aef]"></a>scroll_view_notify_scrolled</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_notify_scrolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scroll_view_notify_scrolled
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_prop
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_move
</UL>

<P><STRONG><a name="[31d]"></a>scroll_view_on_add_child</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_on_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scroll_view_on_add_child &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>scroll_view_on_event</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, scroll_view.o(i.scroll_view_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = scroll_view_on_event &rArr; scroll_view_on_pointer_up &rArr; scroll_view_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_event_to_target_recursive
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_up
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_move
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_down_abort
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_pointer_down
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[31b]"></a>scroll_view_on_layout_children</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_on_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scroll_view_on_layout_children &rArr; scroll_view_set_offset &rArr; scroll_view_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_update_virtual_size
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_offset
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[31a]"></a>scroll_view_on_paint_children</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, scroll_view.o(i.scroll_view_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = scroll_view_on_paint_children &rArr; widget_on_paint_children_default &rArr;  widget_paint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on_paint_children_default
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[ae9]"></a>scroll_view_on_pointer_down</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = scroll_view_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
</UL>

<P><STRONG><a name="[aea]"></a>scroll_view_on_pointer_down_abort</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scroll_view.o(i.scroll_view_on_pointer_down_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = scroll_view_on_pointer_down_abort &rArr; scroll_view_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
</UL>

<P><STRONG><a name="[aec]"></a>scroll_view_on_pointer_move</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = scroll_view_on_pointer_move &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_notify_scrolled
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
</UL>

<P><STRONG><a name="[aeb]"></a>scroll_view_on_pointer_up</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, scroll_view.o(i.scroll_view_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scroll_view_on_pointer_up &rArr; scroll_view_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_event
</UL>

<P><STRONG><a name="[14b]"></a>scroll_view_on_scroll_done</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scroll_view_on_scroll_done &rArr; scroll_view_invalidate_self &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(i.scroll_view_scroll_to)
</UL>
<P><STRONG><a name="[319]"></a>scroll_view_set_prop</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, scroll_view.o(i.scroll_view_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = scroll_view_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_invalidate_self
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_notify_scrolled
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scroll_view.o(.constdata)
</UL>
<P><STRONG><a name="[aed]"></a>scroll_view_update_virtual_size</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, scroll_view.o(i.scroll_view_update_virtual_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scroll_view_update_virtual_size &rArr; scroll_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_on_layout_children
</UL>

<P><STRONG><a name="[5d9]"></a>anim_hint_is_overlap</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, slide_view.o(i.anim_hint_is_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_hint_is_overlap
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
</UL>

<P><STRONG><a name="[5da]"></a>anim_hint_is_overlap_with_alpha</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, slide_view.o(i.anim_hint_is_overlap_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_hint_is_overlap_with_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prev_global_alpha_h
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_next_global_alpha_v
</UL>

<P><STRONG><a name="[701]"></a>canvas_set_clip_rect_with_offset</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, slide_view.o(i.canvas_set_clip_rect_with_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = canvas_set_clip_rect_with_offset &rArr; canvas_set_clip_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
</UL>

<P><STRONG><a name="[b40]"></a>slide_view_calc_dirty_rect</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, slide_view.o(i.slide_view_calc_dirty_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = slide_view_calc_dirty_rect &rArr; widget_calc_children_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_merge
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_calc_children_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_invalidate
</UL>

<P><STRONG><a name="[325]"></a>slide_view_find_target</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slide_view_find_target &rArr; slide_view_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[320]"></a>slide_view_get_prop</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = slide_view_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[b46]"></a>slide_view_invalidate</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, slide_view.o(i.slide_view_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = slide_view_invalidate &rArr; slide_view_calc_dirty_rect &rArr; widget_calc_children_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prop
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
</UL>

<P><STRONG><a name="[b3e]"></a>slide_view_is_loopable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, slide_view.o(i.slide_view_is_loopable))
<BR><BR>[Called By]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_prev
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_next
</UL>

<P><STRONG><a name="[326]"></a>slide_view_on_destroy</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = slide_view_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>slide_view_on_event</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, slide_view.o(i.slide_view_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = slide_view_on_event &rArr; slide_view_on_pointer_up &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_event_to_target_recursive
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_up
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_move
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_pointer_down
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>slide_view_on_paint_children</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, slide_view.o(i.slide_view_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = slide_view_on_paint_children &rArr; slide_view_paint_children_v_lt &rArr; slide_view_paint_prev_next_v_overlap &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>slide_view_on_paint_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slide_view.o(i.slide_view_on_paint_self))
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[b47]"></a>slide_view_on_pointer_down</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = slide_view_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
</UL>

<P><STRONG><a name="[b49]"></a>slide_view_on_pointer_move</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, slide_view.o(i.slide_view_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = slide_view_on_pointer_move &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
</UL>

<P><STRONG><a name="[b48]"></a>slide_view_on_pointer_up</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, slide_view.o(i.slide_view_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = slide_view_on_pointer_up &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_event
</UL>

<P><STRONG><a name="[159]"></a>slide_view_on_scroll_done</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = slide_view_on_scroll_done &rArr; slide_view_activate_prev &rArr; slide_view_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_prev
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_activate_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_view.o(i.slide_view_on_pointer_up)
<LI> slide_view.o(i.slide_view_on_timer_next)
</UL>
<P><STRONG><a name="[15a]"></a>slide_view_on_timer_next</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_on_timer_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = slide_view_on_timer_next &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(i.slide_view_set_auto_play)
</UL>
<P><STRONG><a name="[b4c]"></a>slide_view_paint_children_h_gt</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, slide_view.o(i.slide_view_paint_children_h_gt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_children_h_gt &rArr; slide_view_paint_prev_next_h_translate &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
</UL>

<P><STRONG><a name="[b4d]"></a>slide_view_paint_children_h_lt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, slide_view.o(i.slide_view_paint_children_h_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_children_h_lt &rArr; slide_view_paint_prev_next_h_translate &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_translate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
</UL>

<P><STRONG><a name="[b4a]"></a>slide_view_paint_children_v_gt</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, slide_view.o(i.slide_view_paint_children_v_gt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_children_v_gt &rArr; slide_view_paint_prev_next_v_overlap &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_prev
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
</UL>

<P><STRONG><a name="[b4b]"></a>slide_view_paint_children_v_lt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, slide_view.o(i.slide_view_paint_children_v_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_children_v_lt &rArr; slide_view_paint_prev_next_v_overlap &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_get_next
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_translate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_on_paint_children
</UL>

<P><STRONG><a name="[b4e]"></a>slide_view_paint_prev_next_h_overlap</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, slide_view.o(i.slide_view_paint_prev_next_h_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_prev_next_h_overlap &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_prev_global_alpha_h
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
</UL>

<P><STRONG><a name="[b4f]"></a>slide_view_paint_prev_next_h_translate</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, slide_view.o(i.slide_view_paint_prev_next_h_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_prev_next_h_translate &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_lt
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_h_gt
</UL>

<P><STRONG><a name="[b50]"></a>slide_view_paint_prev_next_v_overlap</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, slide_view.o(i.slide_view_paint_prev_next_v_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_prev_next_v_overlap &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_next_global_alpha_v
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
</UL>

<P><STRONG><a name="[b51]"></a>slide_view_paint_prev_next_v_translate</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, slide_view.o(i.slide_view_paint_prev_next_v_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = slide_view_paint_prev_next_v_translate &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_untranslate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_translate
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_lt
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_children_v_gt
</UL>

<P><STRONG><a name="[b53]"></a>slide_view_set_next_global_alpha_v</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_set_next_global_alpha_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slide_view_set_next_global_alpha_v &rArr; canvas_set_global_alpha &rArr; lcd_set_global_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_v_overlap
</UL>

<P><STRONG><a name="[b52]"></a>slide_view_set_prev_global_alpha_h</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_set_prev_global_alpha_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slide_view_set_prev_global_alpha_h &rArr; canvas_set_global_alpha &rArr; lcd_set_global_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_global_alpha
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_hint_is_overlap_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_paint_prev_next_h_overlap
</UL>

<P><STRONG><a name="[321]"></a>slide_view_set_prop</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, slide_view.o(i.slide_view_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = slide_view_set_prop &rArr; slide_view_set_active &rArr; widget_set_as_key_target &rArr;  widget_set_as_key_target (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_vertical
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_loop
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_auto_play
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_anim_hint
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_set_active
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_cast
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_invalidate
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_view.o(.constdata)
</UL>
<P><STRONG><a name="[b43]"></a>widget_calc_children_rect</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, slide_view.o(i.widget_calc_children_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = widget_calc_children_rect &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_merge
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
</UL>
<BR>[Called By]<UL><LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_view_calc_dirty_rect
</UL>

<P><STRONG><a name="[327]"></a>switch_get_prop</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, switch.o(i.switch_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = switch_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>switch_on_event</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, switch.o(i.switch_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = switch_on_event &rArr; switch_on_pointer_up &rArr; switch_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
<LI><a href="#[c6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_up
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_move
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.constdata)
</UL>
<P><STRONG><a name="[329]"></a>switch_on_paint_background</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, switch.o(i.switch_on_paint_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = switch_on_paint_background &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.constdata)
</UL>
<P><STRONG><a name="[c6c]"></a>switch_on_paint_background_img</STRONG> (Thumb, 464 bytes, Stack size 104 bytes, switch.o(i.switch_on_paint_background_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = switch_on_paint_background_img &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_scale
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rounded_rect
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_paint
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_paint_background
</UL>

<P><STRONG><a name="[c69]"></a>switch_on_pointer_down</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, switch.o(i.switch_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = switch_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
</UL>

<P><STRONG><a name="[c6b]"></a>switch_on_pointer_move</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, switch.o(i.switch_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = switch_on_pointer_move &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
</UL>

<P><STRONG><a name="[c6a]"></a>switch_on_pointer_up</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, switch.o(i.switch_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = switch_on_pointer_up &rArr; switch_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_event
</UL>

<P><STRONG><a name="[161]"></a>switch_on_scroll_done</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, switch.o(i.switch_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = switch_on_scroll_done &rArr; switch_set_value &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(i.switch_scroll_to)
</UL>
<P><STRONG><a name="[c6d]"></a>switch_scroll_to</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, switch.o(i.switch_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = switch_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[c6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_on_pointer_up
</UL>

<P><STRONG><a name="[328]"></a>switch_set_prop</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, switch.o(i.switch_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = switch_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_set_value
<LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.constdata)
</UL>
<P><STRONG><a name="[32b]"></a>text_selector_get_prop</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = text_selector_get_prop &rArr; text_selector_get_text &rArr; str_from_wstr &rArr; str_set &rArr; str_set_with_len &rArr; str_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[ca7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_text
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_get_value
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(.constdata)
</UL>
<P><STRONG><a name="[32f]"></a>text_selector_on_destroy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = text_selector_on_destroy &rArr; text_selector_reset_options &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
<LI><a href="#[ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_reset_options
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(.constdata)
</UL>
<P><STRONG><a name="[32e]"></a>text_selector_on_event</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = text_selector_on_event &rArr; text_selector_on_pointer_up &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_up
<LI><a href="#[cab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_move
<LI><a href="#[ca9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>text_selector_on_paint_self</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, text_selector.o(i.text_selector_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = text_selector_on_paint_self &rArr; text_selector_paint_self &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_self
<LI><a href="#[cad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_paint_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(.constdata)
</UL>
<P><STRONG><a name="[ca9]"></a>text_selector_on_pointer_down</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = text_selector_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
</UL>

<P><STRONG><a name="[cab]"></a>text_selector_on_pointer_move</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = text_selector_on_pointer_move &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
</UL>

<P><STRONG><a name="[caa]"></a>text_selector_on_pointer_up</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, text_selector.o(i.text_selector_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = text_selector_on_pointer_up &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[ca2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_count_options
<LI><a href="#[cae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_event
</UL>

<P><STRONG><a name="[165]"></a>text_selector_on_scroll_done</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, text_selector.o(i.text_selector_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = text_selector_on_scroll_done &rArr; text_selector_sync_selected_index_with_yoffset &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_sync_selected_index_with_yoffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(i.text_selector_scroll_to)
</UL>
<P><STRONG><a name="[cad]"></a>text_selector_paint_mask</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, text_selector.o(i.text_selector_paint_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = text_selector_paint_mask &rArr; canvas_draw_hline &rArr; canvas_draw_hline_impl &rArr; lcd_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
</UL>

<P><STRONG><a name="[cac]"></a>text_selector_paint_self</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, text_selector.o(i.text_selector_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = text_selector_paint_self &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wcslen
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_hline
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_paint_self
</UL>

<P><STRONG><a name="[cae]"></a>text_selector_scroll_to</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = text_selector_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[caa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_pointer_up
</UL>

<P><STRONG><a name="[32c]"></a>text_selector_set_prop</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = text_selector_set_prop &rArr; text_selector_set_options &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_visible_nr
<LI><a href="#[cb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_text
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
<LI><a href="#[ca1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_cast
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_value
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text_selector.o(.constdata)
</UL>
<P><STRONG><a name="[cb2]"></a>text_selector_set_range_options_ex</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, text_selector.o(i.text_selector_set_range_options_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = text_selector_set_range_options_ex &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_append_option
</UL>
<BR>[Called By]<UL><LI><a href="#[cb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_options
</UL>

<P><STRONG><a name="[cb6]"></a>text_selector_set_selected_index_only</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, text_selector.o(i.text_selector_set_selected_index_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
<LI><a href="#[caf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_sync_selected_index_with_yoffset
</UL>

<P><STRONG><a name="[caf]"></a>text_selector_sync_selected_index_with_yoffset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_sync_selected_index_with_yoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = text_selector_sync_selected_index_with_yoffset &rArr; text_selector_set_selected_index_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index_only
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_on_scroll_done
</UL>

<P><STRONG><a name="[cb7]"></a>text_selector_sync_yoffset_with_selected_index</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text_selector.o(i.text_selector_sync_yoffset_with_selected_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = text_selector_sync_yoffset_with_selected_index &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_visible_nr
<LI><a href="#[cb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_selector_set_selected_index
</UL>

<P><STRONG><a name="[cbf]"></a>time_clock_draw_image</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, time_clock.o(i.time_clock_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = time_clock_draw_image &rArr; vgcanvas_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rotate
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_paint_self
</UL>

<P><STRONG><a name="[330]"></a>time_clock_get_prop</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, time_clock.o(i.time_clock_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = time_clock_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_clock.o(.constdata)
</UL>
<P><STRONG><a name="[cc0]"></a>time_clock_load_image</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = time_clock_load_image &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_paint_self
</UL>

<P><STRONG><a name="[333]"></a>time_clock_on_destroy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = time_clock_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_clock.o(.constdata)
</UL>
<P><STRONG><a name="[332]"></a>time_clock_on_paint_self</STRONG> (Thumb, 674 bytes, Stack size 128 bytes, time_clock.o(i.time_clock_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = time_clock_on_paint_self &rArr; time_clock_load_image &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_ex
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
<LI><a href="#[cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_load_image
<LI><a href="#[cbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_draw_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_clock.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>time_clock_on_timer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, time_clock.o(i.time_clock_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = time_clock_on_timer &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[cbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_cast
<LI><a href="#[cbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_reset_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_clock.o(i.time_clock_create)
</UL>
<P><STRONG><a name="[cbe]"></a>time_clock_reset_time</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, time_clock.o(i.time_clock_reset_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = time_clock_reset_time &rArr; date_time_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_on_timer
</UL>

<P><STRONG><a name="[331]"></a>time_clock_set_prop</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, time_clock.o(i.time_clock_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = time_clock_set_prop &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_second_image
<LI><a href="#[cc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_second
<LI><a href="#[cc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_minute_image
<LI><a href="#[cc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_minute
<LI><a href="#[cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_image
<LI><a href="#[cc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_hour_image
<LI><a href="#[cc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_hour
<LI><a href="#[cc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clock_set_bg_image
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_clock.o(.constdata)
</UL>
<P><STRONG><a name="[74b]"></a>children_layouter_register_ext_builtins</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ext_widgets.o(i.children_layouter_register_ext_builtins))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = children_layouter_register_ext_builtins &rArr; children_layouter_factory_register &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_layouter_factory_register
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_ext_widgets_init
</UL>

<P><STRONG><a name="[7d8]"></a>count_char</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, digit_clock.o(i.count_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = count_char
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[334]"></a>digit_clock_get_prop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, digit_clock.o(i.digit_clock_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = digit_clock_get_prop &rArr; value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digit_clock.o(.constdata)
</UL>
<P><STRONG><a name="[336]"></a>digit_clock_on_destroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, digit_clock.o(i.digit_clock_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = digit_clock_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digit_clock.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>digit_clock_on_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, digit_clock.o(i.digit_clock_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = digit_clock_on_timer &rArr; digit_clock_update_time &rArr; digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_update_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digit_clock.o(i.digit_clock_create)
</UL>
<P><STRONG><a name="[335]"></a>digit_clock_set_prop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, digit_clock.o(i.digit_clock_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = digit_clock_set_prop &rArr; digit_clock_set_format &rArr; digit_clock_update_time &rArr; digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_format
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digit_clock.o(.constdata)
</UL>
<P><STRONG><a name="[7da]"></a>digit_clock_translate_month</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, digit_clock.o(i.digit_clock_translate_month))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = digit_clock_translate_month &rArr; locale_info_tr &rArr; str_table_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[7dc]"></a>digit_clock_translate_wday</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, digit_clock.o(i.digit_clock_translate_wday))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = digit_clock_translate_wday &rArr; locale_info_tr &rArr; str_table_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_utf16
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info_tr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
</UL>

<P><STRONG><a name="[7d5]"></a>digit_clock_update_time</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, digit_clock.o(i.digit_clock_update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = digit_clock_update_time &rArr; digit_clock_format_time &rArr; wstr_push_int &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time_init
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_format_time
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_cast
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_set_format
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_on_timer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit_clock_create
</UL>

<P><STRONG><a name="[337]"></a>progress_circle_get_prop</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, progress_circle.o(i.progress_circle_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = progress_circle_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_circle.o(.constdata)
</UL>
<P><STRONG><a name="[33a]"></a>progress_circle_on_destroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progress_circle.o(i.progress_circle_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = progress_circle_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_circle.o(.constdata)
</UL>
<P><STRONG><a name="[339]"></a>progress_circle_on_paint_self</STRONG> (Thumb, 536 bytes, Stack size 208 bytes, progress_circle.o(i.progress_circle_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = progress_circle_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_text_utf8
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_stroke
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_width
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_cap
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_paint
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_arc
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_circle.o(.constdata)
</UL>
<P><STRONG><a name="[338]"></a>progress_circle_set_prop</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, progress_circle.o(i.progress_circle_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = progress_circle_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_value
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_unit
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_start_angle
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_show_text
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_max
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_line_width
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_circle_set_counter_clock_wise
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progress_circle.o(.constdata)
</UL>
<P><STRONG><a name="[33b]"></a>guage_pointer_get_prop</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, guage_pointer.o(i.guage_pointer_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = guage_pointer_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage_pointer.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>guage_pointer_load_svg_asset</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guage_pointer.o(i.guage_pointer_load_svg_asset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = guage_pointer_load_svg_asset &rArr; widget_load_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_asset
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage_pointer.o(i.guage_pointer_set_image)
</UL>
<P><STRONG><a name="[33e]"></a>guage_pointer_on_destroy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guage_pointer.o(i.guage_pointer_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = guage_pointer_on_destroy &rArr; widget_unload_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage_pointer.o(.constdata)
</UL>
<P><STRONG><a name="[33d]"></a>guage_pointer_on_paint_self</STRONG> (Thumb, 366 bytes, Stack size 152 bytes, guage_pointer.o(i.guage_pointer_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = guage_pointer_on_paint_self &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_rotate
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_image
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_init
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_cast
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_paint_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage_pointer.o(.constdata)
</UL>
<P><STRONG><a name="[89b]"></a>guage_pointer_paint_default</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, guage_pointer.o(i.guage_pointer_paint_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = guage_pointer_paint_default &rArr; vgcanvas_arc
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_stroke
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_line_width
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_move_to
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_line_to
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_fill
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_on_paint_self
</UL>

<P><STRONG><a name="[33c]"></a>guage_pointer_set_prop</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, guage_pointer.o(i.guage_pointer_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = guage_pointer_set_prop &rArr; guage_pointer_set_anchor_for_str &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_image
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_angle
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guage_pointer_set_anchor_for_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guage_pointer.o(.constdata)
</UL>
<P><STRONG><a name="[c67]"></a>svg_image_load_bsvg</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, svg_image.o(i.svg_image_load_bsvg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = svg_image_load_bsvg &rArr; widget_load_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_asset
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_on_paint_self
</UL>

<P><STRONG><a name="[340]"></a>svg_image_on_destroy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, svg_image.o(i.svg_image_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = svg_image_on_destroy &rArr; widget_unload_asset &rArr; widget_get_assets_manager &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_destroy
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_unload_asset
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svg_image.o(.constdata)
</UL>
<P><STRONG><a name="[33f]"></a>svg_image_on_paint_self</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, svg_image.o(i.svg_image_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = svg_image_on_paint_self &rArr; widget_paint_helper &rArr; widget_draw_icon_text &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint_helper
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_draw
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsvg_init
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_cast
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svg_image_load_bsvg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svg_image.o(.constdata)
</UL>
<P><STRONG><a name="[342]"></a>gif_image_on_destroy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gif_image.o(i.gif_image_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gif_image_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_on_destroy
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gif_image.o(.constdata)
</UL>
<P><STRONG><a name="[341]"></a>gif_image_on_paint_self</STRONG> (Thumb, 368 bytes, Stack size 160 bytes, gif_image.o(i.gif_image_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = gif_image_on_paint_self &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image_scale_down
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_icon
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_transform
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_need_transform
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_base_cast
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gif_image.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>gif_image_on_timer</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gif_image.o(i.gif_image_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gif_image_on_timer &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_image_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gif_image.o(i.gif_image_on_paint_self)
<LI> gif_image.o(i.gif_image_on_timer)
</UL>
<P><STRONG><a name="[911]"></a>image_value_draw_images</STRONG> (Thumb, 254 bytes, Stack size 96 bytes, image_value.o(i.image_value_draw_images))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = image_value_draw_images &rArr; canvas_draw_image &rArr; canvas_do_draw_image &rArr; lcd_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_on_paint_self
</UL>

<P><STRONG><a name="[343]"></a>image_value_get_prop</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, image_value.o(i.image_value_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = image_value_get_prop &rArr; value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_value.o(.constdata)
</UL>
<P><STRONG><a name="[346]"></a>image_value_on_destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, image_value.o(i.image_value_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = image_value_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_value.o(.constdata)
</UL>
<P><STRONG><a name="[345]"></a>image_value_on_paint_self</STRONG> (Thumb, 302 bytes, Stack size 632 bytes, image_value.o(i.image_value_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = image_value_on_paint_self &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_cast
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_draw_images
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_value.o(.constdata)
</UL>
<P><STRONG><a name="[344]"></a>image_value_set_prop</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, image_value.o(i.image_value_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = image_value_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_value
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_image
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_value_set_format
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_value.o(.constdata)
</UL>
<P><STRONG><a name="[b28]"></a>slide_menu_calc_child_size</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_calc_child_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = slide_menu_calc_child_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>

<P><STRONG><a name="[b29]"></a>slide_menu_calc_child_y</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, slide_menu.o(i.slide_menu_calc_child_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = slide_menu_calc_child_y
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>

<P><STRONG><a name="[b25]"></a>slide_menu_do_layout_children</STRONG> (Thumb, 316 bytes, Stack size 96 bytes, slide_menu.o(i.slide_menu_do_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = slide_menu_do_layout_children &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_delta_index
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_calc_child_y
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_calc_child_size
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_layout_children
</UL>

<P><STRONG><a name="[34c]"></a>slide_menu_find_target</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, slide_menu.o(i.slide_menu_find_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = slide_menu_find_target &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[b2a]"></a>slide_menu_get_child</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_get_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slide_menu_get_child &rArr; slide_menu_fix_index
</UL>
<BR>[Calls]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_fix_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_find_target
</UL>

<P><STRONG><a name="[b2c]"></a>slide_menu_get_clip_r</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_get_clip_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = slide_menu_get_clip_r &rArr; rect_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_nr
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
</UL>

<P><STRONG><a name="[b27]"></a>slide_menu_get_delta_index</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_get_delta_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_menu_get_delta_index &rArr; slide_menu_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_scroll_done
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>

<P><STRONG><a name="[347]"></a>slide_menu_get_prop</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, slide_menu.o(i.slide_menu_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = slide_menu_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[b26]"></a>slide_menu_get_visible_children</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, slide_menu.o(i.slide_menu_get_visible_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = slide_menu_get_visible_children &rArr; slide_menu_get_child &rArr; slide_menu_fix_index
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_child
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_fix_index
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_nr
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_delta_index
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>

<P><STRONG><a name="[b2d]"></a>slide_menu_get_visible_nr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_get_visible_nr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slide_menu_get_visible_nr &rArr; slide_menu_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_children
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_clip_r
</UL>

<P><STRONG><a name="[34a]"></a>slide_menu_layout_children</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, slide_menu.o(i.slide_menu_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = slide_menu_layout_children &rArr; slide_menu_do_layout_children &rArr; widget_move_resize &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_do_layout_children
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[34b]"></a>slide_menu_on_event</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, slide_menu.o(i.slide_menu_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = slide_menu_on_event &rArr; slide_menu_on_pointer_up &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_event_init
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch_event_to_target_recursive
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_move
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>slide_menu_on_paint_children</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, slide_menu.o(i.slide_menu_on_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = slide_menu_on_paint_children &rArr; slide_menu_paint_children &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_save
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_restore
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_mask
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_paint_children
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_visible_nr
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_clip_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[b2e]"></a>slide_menu_on_pointer_down</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = slide_menu_on_pointer_down &rArr; velocity_update &rArr; velocity_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
</UL>

<P><STRONG><a name="[b30]"></a>slide_menu_on_pointer_move</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_on_pointer_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = slide_menu_on_pointer_move &rArr; slide_menu_set_xoffset &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_xoffset
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
</UL>

<P><STRONG><a name="[b2f]"></a>slide_menu_on_pointer_up</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = slide_menu_on_pointer_up &rArr; widget_to_local &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_update
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_event
</UL>

<P><STRONG><a name="[158]"></a>slide_menu_on_scroll_done</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, slide_menu.o(i.slide_menu_on_scroll_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = slide_menu_on_scroll_done &rArr; slide_menu_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_fix_index
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value_only
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_get_delta_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(i.slide_menu_scroll_to)
</UL>
<P><STRONG><a name="[b32]"></a>slide_menu_paint_children</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_paint_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = slide_menu_paint_children &rArr; widget_paint &rArr; widget_paint_impl &rArr; widget_on_paint_background &rArr; widget_draw_background &rArr; widget_fill_rect &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_paint
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
</UL>

<P><STRONG><a name="[b34]"></a>slide_menu_paint_mask</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, slide_menu.o(i.slide_menu_paint_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = slide_menu_paint_mask &rArr; canvas_draw_vline &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_vline
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easing_get
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_paint_children
</UL>

<P><STRONG><a name="[b36]"></a>slide_menu_scroll_to</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, slide_menu.o(i.slide_menu_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = slide_menu_scroll_to &rArr; widget_animator_scroll_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_set_params
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_scroll_create
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_up
</UL>

<P><STRONG><a name="[348]"></a>slide_menu_set_prop</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = slide_menu_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_v_type_find
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_min_scale
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_align_v
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_cast
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_xoffset
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_menu.o(.constdata)
</UL>
<P><STRONG><a name="[b37]"></a>slide_menu_set_value_only</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, slide_menu.o(i.slide_menu_set_value_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = slide_menu_set_value_only &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_value
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_scroll_done
</UL>

<P><STRONG><a name="[b35]"></a>slide_menu_set_xoffset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, slide_menu.o(i.slide_menu_set_xoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slide_menu_set_xoffset &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_set_prop
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_menu_on_pointer_move
</UL>

<P><STRONG><a name="[352]"></a>slide_indicator_arc_on_paint_self</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_arc_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = slide_indicator_arc_on_paint_self &rArr; slide_indicator_paint_arc &rArr; slide_indicator_paint_one &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b08]"></a>slide_indicator_default_paint_active_indicator</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_default_paint_active_indicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = slide_indicator_default_paint_active_indicator &rArr; slide_indicator_fill_dot &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_rect
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
</UL>

<P><STRONG><a name="[b0b]"></a>slide_indicator_default_paint_indicator</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_default_paint_indicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = slide_indicator_default_paint_indicator &rArr; slide_indicator_stroke_dot &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_rect
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_stroke_dot
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_rect
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fill_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
</UL>

<P><STRONG><a name="[b0a]"></a>slide_indicator_fill_dot</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_fill_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = slide_indicator_fill_dot &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_fill
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_active_indicator
</UL>

<P><STRONG><a name="[b09]"></a>slide_indicator_fill_rect</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, slide_indicator.o(i.slide_indicator_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = slide_indicator_fill_rect &rArr; canvas_fill_rect &rArr; canvas_fill_rect_impl &rArr; lcd_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_fill_color
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_active_indicator
</UL>

<P><STRONG><a name="[b0e]"></a>slide_indicator_fix_anchor</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_fix_anchor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = slide_indicator_fix_anchor &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_local
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_layout_children
</UL>

<P><STRONG><a name="[34d]"></a>slide_indicator_get_prop</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = slide_indicator_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_float
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b04]"></a>slide_indicator_init_if_not_inited</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_init_if_not_inited))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = slide_indicator_init_if_not_inited &rArr; slide_indicator_set_indicated_widget &rArr; slide_indicator_fix_anchor &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_paint_self
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_arc_on_paint_self
</UL>

<P><STRONG><a name="[157]"></a>slide_indicator_on_animate_end</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_on_animate_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = slide_indicator_on_animate_end &rArr; widget_set_visible &rArr; widget_set_visible_self &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(i.slide_indicator_set_visible)
</UL>
<P><STRONG><a name="[350]"></a>slide_indicator_on_layout_children</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_on_layout_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = slide_indicator_on_layout_children &rArr; slide_indicator_fix_anchor &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_children_default
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fix_anchor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[34f]"></a>slide_indicator_on_paint_self</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = slide_indicator_on_paint_self &rArr; slide_indicator_paint_linear &rArr; slide_indicator_paint_one &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_linear
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b05]"></a>slide_indicator_paint_arc</STRONG> (Thumb, 782 bytes, Stack size 112 bytes, slide_indicator.o(i.slide_indicator_paint_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = slide_indicator_paint_arc &rArr; slide_indicator_paint_one &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_arc_on_paint_self
</UL>

<P><STRONG><a name="[b12]"></a>slide_indicator_paint_linear</STRONG> (Thumb, 454 bytes, Stack size 104 bytes, slide_indicator.o(i.slide_indicator_paint_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = slide_indicator_paint_linear &rArr; slide_indicator_paint_one &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_one
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_paint_self
</UL>

<P><STRONG><a name="[b13]"></a>slide_indicator_paint_one</STRONG> (Thumb, 158 bytes, Stack size 112 bytes, slide_indicator.o(i.slide_indicator_paint_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = slide_indicator_paint_one &rArr; widget_load_image &rArr; image_manager_get_bitmap &rArr; image_manager_get_bitmap_exprs &rArr; system_info_eval_exprs &rArr; system_info_eval_one &rArr; str_expand_vars &rArr; expand_var &rArr; object_eval &rArr; eval_execute &rArr; parse_expr &rArr; parse_logic &rArr; parse_compare &rArr; parse_sum &rArr; parse_product &rArr; parse_unary &rArr; parse_term &rArr;  parse_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_icon
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_load_image
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_active_indicator
</UL>
<BR>[Called By]<UL><LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_linear
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_paint_arc
</UL>

<P><STRONG><a name="[b11]"></a>slide_indicator_reset_indicated_widget</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, slide_indicator.o(i.slide_indicator_reset_indicated_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = slide_indicator_reset_indicated_widget &rArr; widget_off_by_func &rArr; emitter_off_by_func &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_off_by_func
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_target
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_on_destroy
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_widget
</UL>

<P><STRONG><a name="[b0f]"></a>slide_indicator_set_indicated_widget</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_set_indicated_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = slide_indicator_set_indicated_widget &rArr; slide_indicator_fix_anchor &rArr; widget_to_screen &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_uint32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_count_children
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_max
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_reset_indicated_widget
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_fix_anchor
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
</UL>

<P><STRONG><a name="[34e]"></a>slide_indicator_set_prop</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = slide_indicator_set_prop &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_float
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint32
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_uint16
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_value
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_spacing
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_size
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_max
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_margin
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_indicated_target
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_default_paint
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_auto_hide
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_y
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_anchor_x
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_default_paint_find
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slide_indicator.o(.constdata)
</UL>
<P><STRONG><a name="[b10]"></a>slide_indicator_set_visible</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_set_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = slide_indicator_set_visible &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_start
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_on
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_destroy
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_opacity
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_set_params
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_prop_create
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_value_changed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_up
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_down_abort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_target_on_pointer_down
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_init_if_not_inited
</UL>

<P><STRONG><a name="[b0c]"></a>slide_indicator_stroke_dot</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_stroke_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = slide_indicator_stroke_dot &rArr; canvas_get_vgcanvas &rArr; vgcanvas_set_text_baseline &rArr; tk_str_copy &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_begin_path
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_vgcanvas
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_translate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_stroke
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_stroke_color
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
</UL>

<P><STRONG><a name="[b0d]"></a>slide_indicator_stroke_rect</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, slide_indicator.o(i.slide_indicator_stroke_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = slide_indicator_stroke_rect &rArr; canvas_stroke_rect &rArr; canvas_stroke_rect_impl &rArr; canvas_draw_vline_impl &rArr; lcd_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_stroke_rect
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_stroke_color
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_default_paint_indicator
</UL>

<P><STRONG><a name="[153]"></a>slide_indicator_target_on_destroy</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_target_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slide_indicator_target_on_destroy &rArr; slide_indicator_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_indicator.o(i.slide_indicator_reset_indicated_widget)
<LI> slide_indicator.o(i.slide_indicator_set_indicated_widget)
</UL>
<P><STRONG><a name="[154]"></a>slide_indicator_target_on_pointer_down</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_target_on_pointer_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = slide_indicator_target_on_pointer_down &rArr; slide_indicator_set_visible &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_indicator.o(i.slide_indicator_reset_indicated_widget)
<LI> slide_indicator.o(i.slide_indicator_set_indicated_widget)
</UL>
<P><STRONG><a name="[155]"></a>slide_indicator_target_on_pointer_down_abort</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, slide_indicator.o(i.slide_indicator_target_on_pointer_down_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = slide_indicator_target_on_pointer_down_abort &rArr; slide_indicator_set_visible &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_indicator.o(i.slide_indicator_reset_indicated_widget)
<LI> slide_indicator.o(i.slide_indicator_set_indicated_widget)
</UL>
<P><STRONG><a name="[156]"></a>slide_indicator_target_on_pointer_up</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, slide_indicator.o(i.slide_indicator_target_on_pointer_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = slide_indicator_target_on_pointer_up &rArr; slide_indicator_set_visible &rArr; widget_animator_prop_create &rArr; widget_animator_init &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager_find
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_animator_manager
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_indicator.o(i.slide_indicator_reset_indicated_widget)
<LI> slide_indicator.o(i.slide_indicator_set_indicated_widget)
</UL>
<P><STRONG><a name="[152]"></a>slide_indicator_target_on_value_changed</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, slide_indicator.o(i.slide_indicator_target_on_value_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = slide_indicator_target_on_value_changed &rArr; widget_set_prop &rArr; widget_set_style &rArr; color_parse &rArr; color_parse_impl &rArr; color_parse_rgba &rArr; tk_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_prop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_prop
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_cast
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_indicator_set_visible
</UL>
<BR>[Address Reference Count : 2]<UL><LI> slide_indicator.o(i.slide_indicator_reset_indicated_widget)
<LI> slide_indicator.o(i.slide_indicator_set_indicated_widget)
</UL>
<P><STRONG><a name="[358]"></a>children_layouter_list_view_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, children_layouter_list_view.o(i.children_layouter_list_view_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = children_layouter_list_view_destroy &rArr; str_reset &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[356]"></a>children_layouter_list_view_get_param</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, children_layouter_list_view.o(i.children_layouter_list_view_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = children_layouter_list_view_get_param &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[355]"></a>children_layouter_list_view_is_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, children_layouter_list_view.o(i.children_layouter_list_view_is_valid))
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>children_layouter_list_view_layout</STRONG> (Thumb, 602 bytes, Stack size 112 bytes, children_layouter_list_view.o(i.children_layouter_list_view_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = children_layouter_list_view_layout &rArr; widget_layout_floating_children &rArr; widget_layout &rArr; widget_layout_self &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_deinit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_move_resize
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_layout_floating_children
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_children_for_layout
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_visible_only
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_enable
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_virtual_h
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_params
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_yslidable
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_xslidable
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_set_offset
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_view_cast
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_is_mobile
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_cast
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_view_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>children_layouter_list_view_set_param</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, children_layouter_list_view.o(i.children_layouter_list_view_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = children_layouter_list_view_set_param &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[353]"></a>children_layouter_list_view_to_string</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, children_layouter_list_view.o(i.children_layouter_list_view_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = children_layouter_list_view_to_string &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_set
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_trim_right
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> children_layouter_list_view.o(.constdata)
</UL>
<P><STRONG><a name="[9b9]"></a>mledit_commit_str</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mledit.o(i.mledit_commit_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mledit_commit_str &rArr; text_edit_paste &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paste
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[9ba]"></a>mledit_dispatch_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mledit.o(i.mledit_dispatch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mledit_dispatch_event &rArr; widget_dispatch &rArr; emitter_dispatch &rArr; emitter_remove_item &rArr; emitter_remove &rArr; emitter_item_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_dispatch
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[359]"></a>mledit_get_prop</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, mledit.o(i.mledit_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mledit_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_wstr
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[35c]"></a>mledit_on_add_child</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mledit.o(i.mledit_on_add_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mledit_on_add_child &rArr; widget_on &rArr; emitter_on &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_type
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_on_state_changed
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[35e]"></a>mledit_on_destroy</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mledit.o(i.mledit_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mledit_on_destroy &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_reset
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_destroy
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[35d]"></a>mledit_on_event</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, mledit.o(i.mledit_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = mledit_on_event &rArr; text_edit_key_down &rArr; wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_grab
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_find_target
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_key_down
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_drag
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_click
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_clear
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_update_status
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_request_input_method
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_pointer_up_cleanup
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_dispatch_event
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_commit_str
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[35b]"></a>mledit_on_paint_self</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mledit.o(i.mledit_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mledit_on_paint_self &rArr; text_edit_paint &rArr; text_edit_do_paint &rArr; text_edit_layout &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_paint
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>mledit_on_scroll_bar_value_changed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mledit.o(i.mledit_on_scroll_bar_value_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mledit_on_scroll_bar_value_changed &rArr; widget_get_value &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_value
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_offset
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(i.mledit_on_add_child)
</UL>
<P><STRONG><a name="[132]"></a>mledit_on_text_edit_state_changed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mledit.o(i.mledit_on_text_edit_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mledit_on_text_edit_state_changed &rArr; mledit_sync_line_number &rArr; line_number_set_yoffset &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_scrollbar
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_sync_line_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(i.mledit_on_add_child)
</UL>
<P><STRONG><a name="[9bd]"></a>mledit_pointer_up_cleanup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mledit.o(i.mledit_pointer_up_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mledit_pointer_up_cleanup &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_ungrab
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[9be]"></a>mledit_request_input_method</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mledit.o(i.mledit_request_input_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mledit_request_input_method &rArr; widget_is_window_opened &rArr; widget_get_prop_int &rArr; widget_get_prop &rArr; widget_get_state_for_style &rArr; widget_is_focusable &rArr;  widget_get_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_on
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_get_window
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_is_window_opened
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[134]"></a>mledit_request_input_method_on_window_open</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mledit.o(i.mledit_request_input_method_on_window_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mledit_request_input_method_on_window_open &rArr; input_method_request
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method_request
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(i.mledit_request_input_method)
</UL>
<P><STRONG><a name="[35a]"></a>mledit_set_prop</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, mledit.o(i.mledit_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = mledit_set_prop &rArr; wstr_from_value &rArr; value_float &rArr; tk_watof &rArr; tk_atof &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_str
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_from_value
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_cursor
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_wrap_word
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_max_lines
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_input_tips
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_focus
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(.constdata)
</UL>
<P><STRONG><a name="[9c0]"></a>mledit_sync_line_number</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mledit.o(i.mledit_sync_line_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mledit_sync_line_number &rArr; line_number_set_yoffset &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_yoffset
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_top_margin
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_line_height
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_set_bottom_margin
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_text_edit_state_changed
</UL>

<P><STRONG><a name="[9c1]"></a>mledit_sync_scrollbar</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mledit.o(i.mledit_sync_scrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mledit_sync_scrollbar &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_lookup_by_type
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_params
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_bar_set_value_only
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_text_edit_state_changed
</UL>

<P><STRONG><a name="[133]"></a>mledit_update_caret</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mledit.o(i.mledit_update_caret))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mledit_update_caret &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_set_caret_visible
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_edit_invert_caret_visible
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mledit.o(i.mledit_on_event)
</UL>
<P><STRONG><a name="[9bc]"></a>mledit_update_status</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mledit.o(i.mledit_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mledit_update_status &rArr; widget_set_state &rArr; widget_invalidate_force &rArr; widget_invalidate &rArr; widget_invalidate_default &rArr;  widget_invalidate_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_set_focus
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mledit_on_event
</UL>

<P><STRONG><a name="[978]"></a>line_number_do_paint_self</STRONG> (Thumb, 210 bytes, Stack size 112 bytes, line_number.o(i.line_number_do_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = line_number_do_paint_self &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wstr_set_utf8
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_prepare_text_style
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_is_valid
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_on_paint_self
</UL>

<P><STRONG><a name="[35f]"></a>line_number_get_prop</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, line_number.o(i.line_number_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = line_number_get_prop &rArr; line_number_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_number.o(.constdata)
</UL>
<P><STRONG><a name="[361]"></a>line_number_on_paint_self</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, line_number.o(i.line_number_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = line_number_on_paint_self &rArr; line_number_do_paint_self &rArr; widget_prepare_text_style &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_cast
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_number_do_paint_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_number.o(.constdata)
</UL>
<P><STRONG><a name="[360]"></a>line_number_set_prop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, line_number.o(i.line_number_set_prop))
<BR>[Address Reference Count : 1]<UL><LI> line_number.o(.constdata)
</UL>
<P><STRONG><a name="[8a9]"></a>hscroll_label_do_paint_self</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, hscroll_label.o(i.hscroll_label_do_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = hscroll_label_do_paint_self &rArr; canvas_draw_text_in_rect &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text_in_rect
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_is_running
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self_ellipses
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_paint_self
</UL>

<P><STRONG><a name="[8ab]"></a>hscroll_label_do_paint_self_ellipses</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, hscroll_label.o(i.hscroll_label_do_paint_self_ellipses))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hscroll_label_do_paint_self_ellipses &rArr; canvas_draw_text &rArr; canvas_draw_text_impl &rArr; canvas_draw_glyph &rArr; lcd_draw_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_measure_text
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_draw_text
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
</UL>

<P><STRONG><a name="[362]"></a>hscroll_label_get_prop</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, hscroll_label.o(i.hscroll_label_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hscroll_label_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_bool
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[8aa]"></a>hscroll_label_is_running</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hscroll_label_is_running &rArr; hscroll_label_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_event
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_on_destroy
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
</UL>

<P><STRONG><a name="[366]"></a>hscroll_label_on_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hscroll_label.o(i.hscroll_label_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hscroll_label_on_destroy &rArr; hscroll_label_stop &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_stop
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_is_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[365]"></a>hscroll_label_on_event</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hscroll_label.o(i.hscroll_label_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hscroll_label_on_event &rArr; hscroll_label_stop &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_stop
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_start
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_is_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[364]"></a>hscroll_label_on_paint_self</STRONG> (Thumb, 268 bytes, Stack size 120 bytes, hscroll_label.o(i.hscroll_label_on_paint_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = hscroll_label_on_paint_self &rArr; canvas_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; tk_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_to_screen
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_color
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_text_align
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_font
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_set_clip_rect
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canvas_get_clip_rect
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_int
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_intersect
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_str
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_get_color
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_do_paint_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>hscroll_label_on_timer</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, hscroll_label.o(i.hscroll_label_on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hscroll_label_on_timer &rArr; hscroll_label_stop &rArr; timer_remove &rArr; timer_manager_remove &rArr; slist_remove &rArr; slist_node_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_stop
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_step
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(i.hscroll_label_start)
</UL>
<P><STRONG><a name="[e3]"></a>hscroll_label_on_timer_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hscroll_label.o(i.hscroll_label_on_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hscroll_label_on_timer_start &rArr; hscroll_label_start &rArr; timer_add &rArr; timer_manager_add &rArr; timer_info_create &rArr; timer_manager_append &rArr; slist_append &rArr; slist_node_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widget_invalidate_force
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_start
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hscroll_label.o(i.hscroll_label_on_timer)
<LI> hscroll_label.o(i.hscroll_label_create)
</UL>
<P><STRONG><a name="[363]"></a>hscroll_label_set_prop</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, hscroll_label.o(i.hscroll_label_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = hscroll_label_set_prop &rArr; value_bool &rArr; value_int &rArr; tk_watoi &rArr; utf8_from_utf16 &rArr; utf16_to_utf8 &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_int
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_bool
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_yoyo
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_xoffset
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_only_focus
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_lull
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_loop
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_ellipses
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscroll_label_set_duration
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hscroll_label.o(.constdata)
</UL>
<P><STRONG><a name="[716]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[845]"></a>clear_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[848]"></a>find_volume</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[844]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[719]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[718]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[85e]"></a>lock_fs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[717]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[9c8]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[849]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[4ea]"></a>SD_CheckStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio_dma_rtos.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; BSP_SD_GetCardStateEx &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[3d5]"></a>_partition_sort</STRONG> (Thumb, 478 bytes, Stack size 296 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[89]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[3f2]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3ff]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[40a]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
